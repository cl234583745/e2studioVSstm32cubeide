
nucleo_u575_backtrace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000791c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c8b  08007b54  08007b54  00008b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080087e0  080087e0  000097e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080087e8  080087e8  000097e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080087ec  080087ec  000097ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  20000000  080087f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000045c  20000084  08008874  0000a084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004e0  08008874  0000a4e0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000180ac  00000000  00000000  0000a0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c6b  00000000  00000000  00022166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001448  00000000  00000000  00024dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001310  00000000  00000000  00026220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001258f  00000000  00000000  00027530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000073b8  00000000  00000000  00039abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00040e77  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005ef4  00000000  00000000  00040ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000084 	.word	0x20000084
 8000254:	00000000 	.word	0x00000000
 8000258:	08007b3c 	.word	0x08007b3c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000088 	.word	0x20000088
 8000274:	08007b3c 	.word	0x08007b3c

08000278 <HardFault_Handler>:
/* NOTE: If use this file's HardFault_Handler, please comments the HardFault_Handler code on other file. */

.global HardFault_Handler
.type HardFault_Handler, %function
HardFault_Handler:
    MOV     r0, lr                  /* get lr */
 8000278:	4670      	mov	r0, lr
    MOV     r1, sp                  /* get stack pointer (current is MSP) */
 800027a:	4669      	mov	r1, sp
    BL      cm_backtrace_fault
 800027c:	f000 fde2 	bl	8000e44 <cm_backtrace_fault>

08000280 <Fault_Loop>:

Fault_Loop:
    BL      Fault_Loop              /* while(1) */
 8000280:	f7ff fffe 	bl	8000280 <Fault_Loop>

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b97e 	b.w	8000598 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ba:	460c      	mov	r4, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14d      	bne.n	800035c <__udivmoddi4+0xa8>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	460f      	mov	r7, r1
 80002c4:	4684      	mov	ip, r0
 80002c6:	4696      	mov	lr, r2
 80002c8:	fab2 f382 	clz	r3, r2
 80002cc:	d960      	bls.n	8000390 <__udivmoddi4+0xdc>
 80002ce:	b14b      	cbz	r3, 80002e4 <__udivmoddi4+0x30>
 80002d0:	fa02 fe03 	lsl.w	lr, r2, r3
 80002d4:	f1c3 0220 	rsb	r2, r3, #32
 80002d8:	409f      	lsls	r7, r3
 80002da:	fa00 fc03 	lsl.w	ip, r0, r3
 80002de:	fa20 f202 	lsr.w	r2, r0, r2
 80002e2:	4317      	orrs	r7, r2
 80002e4:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002e8:	fa1f f48e 	uxth.w	r4, lr
 80002ec:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f0:	fbb7 f1f6 	udiv	r1, r7, r6
 80002f4:	fb06 7711 	mls	r7, r6, r1, r7
 80002f8:	fb01 f004 	mul.w	r0, r1, r4
 80002fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000300:	4290      	cmp	r0, r2
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x62>
 8000304:	eb1e 0202 	adds.w	r2, lr, r2
 8000308:	f101 37ff 	add.w	r7, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x60>
 800030e:	4290      	cmp	r0, r2
 8000310:	f200 812d 	bhi.w	800056e <__udivmoddi4+0x2ba>
 8000314:	4639      	mov	r1, r7
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	fa1f fc8c 	uxth.w	ip, ip
 800031c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000320:	fb06 2210 	mls	r2, r6, r0, r2
 8000324:	fb00 f404 	mul.w	r4, r0, r4
 8000328:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800032c:	4564      	cmp	r4, ip
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x8e>
 8000330:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000334:	f100 32ff 	add.w	r2, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x8c>
 800033a:	4564      	cmp	r4, ip
 800033c:	f200 811a 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 8000340:	4610      	mov	r0, r2
 8000342:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000346:	ebac 0c04 	sub.w	ip, ip, r4
 800034a:	2100      	movs	r1, #0
 800034c:	b125      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 800034e:	fa2c f303 	lsr.w	r3, ip, r3
 8000352:	2200      	movs	r2, #0
 8000354:	e9c5 3200 	strd	r3, r2, [r5]
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d905      	bls.n	800036c <__udivmoddi4+0xb8>
 8000360:	b10d      	cbz	r5, 8000366 <__udivmoddi4+0xb2>
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	2100      	movs	r1, #0
 8000368:	4608      	mov	r0, r1
 800036a:	e7f5      	b.n	8000358 <__udivmoddi4+0xa4>
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d14d      	bne.n	8000410 <__udivmoddi4+0x15c>
 8000374:	42a3      	cmp	r3, r4
 8000376:	f0c0 80f2 	bcc.w	800055e <__udivmoddi4+0x2aa>
 800037a:	4290      	cmp	r0, r2
 800037c:	f080 80ef 	bcs.w	800055e <__udivmoddi4+0x2aa>
 8000380:	4606      	mov	r6, r0
 8000382:	4623      	mov	r3, r4
 8000384:	4608      	mov	r0, r1
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0e6      	beq.n	8000358 <__udivmoddi4+0xa4>
 800038a:	e9c5 6300 	strd	r6, r3, [r5]
 800038e:	e7e3      	b.n	8000358 <__udivmoddi4+0xa4>
 8000390:	2b00      	cmp	r3, #0
 8000392:	f040 80a2 	bne.w	80004da <__udivmoddi4+0x226>
 8000396:	1a8a      	subs	r2, r1, r2
 8000398:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800039c:	fa1f f68e 	uxth.w	r6, lr
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003a6:	fb07 2014 	mls	r0, r7, r4, r2
 80003aa:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b2:	fb06 f004 	mul.w	r0, r6, r4
 80003b6:	4290      	cmp	r0, r2
 80003b8:	d90f      	bls.n	80003da <__udivmoddi4+0x126>
 80003ba:	eb1e 0202 	adds.w	r2, lr, r2
 80003be:	f104 38ff 	add.w	r8, r4, #4294967295
 80003c2:	bf2c      	ite	cs
 80003c4:	f04f 0901 	movcs.w	r9, #1
 80003c8:	f04f 0900 	movcc.w	r9, #0
 80003cc:	4290      	cmp	r0, r2
 80003ce:	d903      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003d0:	f1b9 0f00 	cmp.w	r9, #0
 80003d4:	f000 80c8 	beq.w	8000568 <__udivmoddi4+0x2b4>
 80003d8:	4644      	mov	r4, r8
 80003da:	1a12      	subs	r2, r2, r0
 80003dc:	fa1f fc8c 	uxth.w	ip, ip
 80003e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e4:	fb07 2210 	mls	r2, r7, r0, r2
 80003e8:	fb00 f606 	mul.w	r6, r0, r6
 80003ec:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f0:	4566      	cmp	r6, ip
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x152>
 80003f4:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x150>
 80003fe:	4566      	cmp	r6, ip
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000404:	4610      	mov	r0, r2
 8000406:	ebac 0c06 	sub.w	ip, ip, r6
 800040a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040e:	e79d      	b.n	800034c <__udivmoddi4+0x98>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa04 fe01 	lsl.w	lr, r4, r1
 800041a:	fa22 f706 	lsr.w	r7, r2, r6
 800041e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000422:	40f4      	lsrs	r4, r6
 8000424:	408a      	lsls	r2, r1
 8000426:	431f      	orrs	r7, r3
 8000428:	ea4e 030c 	orr.w	r3, lr, ip
 800042c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000430:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000434:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000440:	fb08 4410 	mls	r4, r8, r0, r4
 8000444:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000448:	fb00 f90c 	mul.w	r9, r0, ip
 800044c:	45a1      	cmp	r9, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1ba>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f100 3aff 	add.w	sl, r0, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a1      	cmp	r9, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 8093 	beq.w	8000592 <__udivmoddi4+0x2de>
 800046c:	4650      	mov	r0, sl
 800046e:	eba4 0409 	sub.w	r4, r4, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb4 f3f8 	udiv	r3, r4, r8
 800047a:	fb08 4413 	mls	r4, r8, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1e4>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1e2>
 8000492:	45a4      	cmp	ip, r4
 8000494:	d87a      	bhi.n	800058c <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 9802 	umull	r9, r8, r0, r2
 80004a4:	4544      	cmp	r4, r8
 80004a6:	46cc      	mov	ip, r9
 80004a8:	4643      	mov	r3, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1fe>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x208>
 80004ae:	45ce      	cmp	lr, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x208>
 80004b2:	3801      	subs	r0, #1
 80004b4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004b8:	eb68 0307 	sbc.w	r3, r8, r7
 80004bc:	b15d      	cbz	r5, 80004d6 <__udivmoddi4+0x222>
 80004be:	ebbe 020c 	subs.w	r2, lr, ip
 80004c2:	eb64 0403 	sbc.w	r4, r4, r3
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	fa22 f301 	lsr.w	r3, r2, r1
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	431e      	orrs	r6, r3
 80004d2:	e9c5 6400 	strd	r6, r4, [r5]
 80004d6:	2100      	movs	r1, #0
 80004d8:	e73e      	b.n	8000358 <__udivmoddi4+0xa4>
 80004da:	fa02 fe03 	lsl.w	lr, r2, r3
 80004de:	f1c3 0120 	rsb	r1, r3, #32
 80004e2:	fa04 f203 	lsl.w	r2, r4, r3
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f0:	fa20 f101 	lsr.w	r1, r0, r1
 80004f4:	fa1f f68e 	uxth.w	r6, lr
 80004f8:	fbb4 f0f7 	udiv	r0, r4, r7
 80004fc:	430a      	orrs	r2, r1
 80004fe:	fb07 4410 	mls	r4, r7, r0, r4
 8000502:	0c11      	lsrs	r1, r2, #16
 8000504:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000508:	fb00 f406 	mul.w	r4, r0, r6
 800050c:	428c      	cmp	r4, r1
 800050e:	d90e      	bls.n	800052e <__udivmoddi4+0x27a>
 8000510:	eb1e 0101 	adds.w	r1, lr, r1
 8000514:	f100 38ff 	add.w	r8, r0, #4294967295
 8000518:	bf2c      	ite	cs
 800051a:	f04f 0901 	movcs.w	r9, #1
 800051e:	f04f 0900 	movcc.w	r9, #0
 8000522:	428c      	cmp	r4, r1
 8000524:	d902      	bls.n	800052c <__udivmoddi4+0x278>
 8000526:	f1b9 0f00 	cmp.w	r9, #0
 800052a:	d02c      	beq.n	8000586 <__udivmoddi4+0x2d2>
 800052c:	4640      	mov	r0, r8
 800052e:	1b09      	subs	r1, r1, r4
 8000530:	b292      	uxth	r2, r2
 8000532:	fbb1 f4f7 	udiv	r4, r1, r7
 8000536:	fb07 1114 	mls	r1, r7, r4, r1
 800053a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053e:	fb04 f106 	mul.w	r1, r4, r6
 8000542:	4291      	cmp	r1, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x2a2>
 8000546:	eb1e 0202 	adds.w	r2, lr, r2
 800054a:	f104 38ff 	add.w	r8, r4, #4294967295
 800054e:	d201      	bcs.n	8000554 <__udivmoddi4+0x2a0>
 8000550:	4291      	cmp	r1, r2
 8000552:	d815      	bhi.n	8000580 <__udivmoddi4+0x2cc>
 8000554:	4644      	mov	r4, r8
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800055c:	e721      	b.n	80003a2 <__udivmoddi4+0xee>
 800055e:	1a86      	subs	r6, r0, r2
 8000560:	eb64 0303 	sbc.w	r3, r4, r3
 8000564:	2001      	movs	r0, #1
 8000566:	e70e      	b.n	8000386 <__udivmoddi4+0xd2>
 8000568:	3c02      	subs	r4, #2
 800056a:	4472      	add	r2, lr
 800056c:	e735      	b.n	80003da <__udivmoddi4+0x126>
 800056e:	3902      	subs	r1, #2
 8000570:	4472      	add	r2, lr
 8000572:	e6d0      	b.n	8000316 <__udivmoddi4+0x62>
 8000574:	44f4      	add	ip, lr
 8000576:	3802      	subs	r0, #2
 8000578:	e6e3      	b.n	8000342 <__udivmoddi4+0x8e>
 800057a:	44f4      	add	ip, lr
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x152>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e7e7      	b.n	8000556 <__udivmoddi4+0x2a2>
 8000586:	3802      	subs	r0, #2
 8000588:	4471      	add	r1, lr
 800058a:	e7d0      	b.n	800052e <__udivmoddi4+0x27a>
 800058c:	3b02      	subs	r3, #2
 800058e:	443c      	add	r4, r7
 8000590:	e782      	b.n	8000498 <__udivmoddi4+0x1e4>
 8000592:	3802      	subs	r0, #2
 8000594:	443c      	add	r4, r7
 8000596:	e76a      	b.n	800046e <__udivmoddi4+0x1ba>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <cm_backtrace_init>:
static bool on_thread_before_fault = false;

/**
 * library initialize
 */
void cm_backtrace_init(const char *firmware_name, const char *hardware_ver, const char *software_ver) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
    strncpy(fw_name, firmware_name, CMB_NAME_MAX);
 80005a8:	2220      	movs	r2, #32
 80005aa:	68f9      	ldr	r1, [r7, #12]
 80005ac:	4818      	ldr	r0, [pc, #96]	@ (8000610 <cm_backtrace_init+0x74>)
 80005ae:	f006 fb6d 	bl	8006c8c <strncpy>
    strncpy(hw_ver, hardware_ver, CMB_NAME_MAX);
 80005b2:	2220      	movs	r2, #32
 80005b4:	68b9      	ldr	r1, [r7, #8]
 80005b6:	4817      	ldr	r0, [pc, #92]	@ (8000614 <cm_backtrace_init+0x78>)
 80005b8:	f006 fb68 	bl	8006c8c <strncpy>
    strncpy(sw_ver, software_ver, CMB_NAME_MAX);
 80005bc:	2220      	movs	r2, #32
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	4815      	ldr	r0, [pc, #84]	@ (8000618 <cm_backtrace_init+0x7c>)
 80005c2:	f006 fb63 	bl	8006c8c <strncpy>
    main_stack_start_addr = (uint32_t)__section_begin(CMB_CSTACK_BLOCK_NAME);
    main_stack_size = (uint32_t)__section_end(CMB_CSTACK_BLOCK_NAME) - main_stack_start_addr;
    code_start_addr = (uint32_t)__section_begin(CMB_CODE_SECTION_NAME);
    code_size = (uint32_t)__section_end(CMB_CODE_SECTION_NAME) - code_start_addr;
#elif defined(__GNUC__)
    main_stack_start_addr = (uint32_t)(&CMB_CSTACK_BLOCK_START);
 80005c6:	4a15      	ldr	r2, [pc, #84]	@ (800061c <cm_backtrace_init+0x80>)
 80005c8:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <cm_backtrace_init+0x84>)
 80005ca:	601a      	str	r2, [r3, #0]
    main_stack_size = (uint32_t)(&CMB_CSTACK_BLOCK_END) - main_stack_start_addr;
 80005cc:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <cm_backtrace_init+0x88>)
 80005ce:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <cm_backtrace_init+0x84>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	4a14      	ldr	r2, [pc, #80]	@ (8000628 <cm_backtrace_init+0x8c>)
 80005d6:	6013      	str	r3, [r2, #0]
    code_start_addr = (uint32_t)(&CMB_CODE_SECTION_START);
 80005d8:	4a14      	ldr	r2, [pc, #80]	@ (800062c <cm_backtrace_init+0x90>)
 80005da:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <cm_backtrace_init+0x94>)
 80005dc:	601a      	str	r2, [r3, #0]
    code_size = (uint32_t)(&CMB_CODE_SECTION_END) - code_start_addr;
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <cm_backtrace_init+0x98>)
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <cm_backtrace_init+0x94>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <cm_backtrace_init+0x9c>)
 80005e8:	6013      	str	r3, [r2, #0]
#else
    #error "not supported compiler"
#endif

    if (main_stack_size == 0) {
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <cm_backtrace_init+0x8c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d107      	bne.n	8000602 <cm_backtrace_init+0x66>
        cmb_println(print_info[PRINT_MAIN_STACK_CFG_ERROR]);
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <cm_backtrace_init+0xa0>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f006 f9d9 	bl	80069ac <iprintf>
 80005fa:	4811      	ldr	r0, [pc, #68]	@ (8000640 <cm_backtrace_init+0xa4>)
 80005fc:	f006 fa3e 	bl	8006a7c <puts>
        return;
 8000600:	e002      	b.n	8000608 <cm_backtrace_init+0x6c>
    }

    init_ok = true;
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <cm_backtrace_init+0xa8>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
}
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000a0 	.word	0x200000a0
 8000614:	200000c4 	.word	0x200000c4
 8000618:	200000e8 	.word	0x200000e8
 800061c:	20000000 	.word	0x20000000
 8000620:	2000010c 	.word	0x2000010c
 8000624:	200c0000 	.word	0x200c0000
 8000628:	20000110 	.word	0x20000110
 800062c:	08000000 	.word	0x08000000
 8000630:	20000114 	.word	0x20000114
 8000634:	08007b54 	.word	0x08007b54
 8000638:	20000118 	.word	0x20000118
 800063c:	08007b54 	.word	0x08007b54
 8000640:	0800840c 	.word	0x0800840c
 8000644:	2000011c 	.word	0x2000011c

08000648 <cm_backtrace_firmware_info>:

/**
 * print firmware information, such as: firmware name, hardware version, software version
 */
void cm_backtrace_firmware_info(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    cmb_println(print_info[PRINT_FIRMWARE_INFO], fw_name, hw_ver, sw_ver);
 800064c:	4805      	ldr	r0, [pc, #20]	@ (8000664 <cm_backtrace_firmware_info+0x1c>)
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <cm_backtrace_firmware_info+0x20>)
 8000650:	4a06      	ldr	r2, [pc, #24]	@ (800066c <cm_backtrace_firmware_info+0x24>)
 8000652:	4907      	ldr	r1, [pc, #28]	@ (8000670 <cm_backtrace_firmware_info+0x28>)
 8000654:	f006 f9aa 	bl	80069ac <iprintf>
 8000658:	4806      	ldr	r0, [pc, #24]	@ (8000674 <cm_backtrace_firmware_info+0x2c>)
 800065a:	f006 fa0f 	bl	8006a7c <puts>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08007bb8 	.word	0x08007bb8
 8000668:	200000e8 	.word	0x200000e8
 800066c:	200000c4 	.word	0x200000c4
 8000670:	200000a0 	.word	0x200000a0
 8000674:	0800840c 	.word	0x0800840c

08000678 <dump_stack>:

#ifdef CMB_USING_DUMP_STACK_INFO
/**
 * dump current stack information
 */
static void dump_stack(uint32_t stack_start_addr, size_t stack_size, uint32_t *stack_pointer) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
    uint32_t deep = CMB_DUMP_STACK_DEPTH_SIZE;
 8000684:	2320      	movs	r3, #32
 8000686:	617b      	str	r3, [r7, #20]

    if (stack_is_overflow) {
 8000688:	4b2e      	ldr	r3, [pc, #184]	@ (8000744 <dump_stack+0xcc>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d025      	beq.n	80006dc <dump_stack+0x64>
        if (on_thread_before_fault) {
 8000690:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <dump_stack+0xd0>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <dump_stack+0x32>
            cmb_println(print_info[PRINT_THREAD_STACK_OVERFLOW], stack_pointer);
 8000698:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <dump_stack+0xd4>)
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4618      	mov	r0, r3
 800069e:	f006 f985 	bl	80069ac <iprintf>
 80006a2:	482b      	ldr	r0, [pc, #172]	@ (8000750 <dump_stack+0xd8>)
 80006a4:	f006 f9ea 	bl	8006a7c <puts>
 80006a8:	e007      	b.n	80006ba <dump_stack+0x42>
        } else {
            cmb_println(print_info[PRINT_MAIN_STACK_OVERFLOW], stack_pointer);
 80006aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <dump_stack+0xdc>)
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 f97c 	bl	80069ac <iprintf>
 80006b4:	4826      	ldr	r0, [pc, #152]	@ (8000750 <dump_stack+0xd8>)
 80006b6:	f006 f9e1 	bl	8006a7c <puts>
        }
        if ((uint32_t) stack_pointer < stack_start_addr) {
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d902      	bls.n	80006c8 <dump_stack+0x50>
            stack_pointer = (uint32_t *) stack_start_addr;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e009      	b.n	80006dc <dump_stack+0x64>
        } else if ((uint32_t) stack_pointer > stack_start_addr + stack_size) {
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	441a      	add	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d203      	bcs.n	80006dc <dump_stack+0x64>
            stack_pointer = (uint32_t *) (stack_start_addr + stack_size);
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4413      	add	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
        }
    }
    cmb_println("stack_start_addr=%lx, stack_size=%ld, stack_pointer=%lx", stack_start_addr, stack_size, stack_pointer);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	68f9      	ldr	r1, [r7, #12]
 80006e2:	481d      	ldr	r0, [pc, #116]	@ (8000758 <dump_stack+0xe0>)
 80006e4:	f006 f962 	bl	80069ac <iprintf>
 80006e8:	4819      	ldr	r0, [pc, #100]	@ (8000750 <dump_stack+0xd8>)
 80006ea:	f006 f9c7 	bl	8006a7c <puts>
    cmb_println(print_info[PRINT_THREAD_STACK_INFO]);
 80006ee:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <dump_stack+0xe4>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 f95b 	bl	80069ac <iprintf>
 80006f6:	4816      	ldr	r0, [pc, #88]	@ (8000750 <dump_stack+0xd8>)
 80006f8:	f006 f9c0 	bl	8006a7c <puts>
    for (; (uint32_t) stack_pointer < stack_start_addr + stack_size && deep; stack_pointer++, deep--) {
 80006fc:	e00f      	b.n	800071e <dump_stack+0xa6>
        cmb_println("  addr: %08x    data: %08x", stack_pointer, *stack_pointer);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	4816      	ldr	r0, [pc, #88]	@ (8000760 <dump_stack+0xe8>)
 8000708:	f006 f950 	bl	80069ac <iprintf>
 800070c:	4810      	ldr	r0, [pc, #64]	@ (8000750 <dump_stack+0xd8>)
 800070e:	f006 f9b5 	bl	8006a7c <puts>
    for (; (uint32_t) stack_pointer < stack_start_addr + stack_size && deep; stack_pointer++, deep--) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3304      	adds	r3, #4
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	3b01      	subs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	441a      	add	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d902      	bls.n	8000730 <dump_stack+0xb8>
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e6      	bne.n	80006fe <dump_stack+0x86>
    }
    cmb_println("====================================");
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <dump_stack+0xec>)
 8000732:	f006 f93b 	bl	80069ac <iprintf>
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <dump_stack+0xd8>)
 8000738:	f006 f9a0 	bl	8006a7c <puts>
}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000241 	.word	0x20000241
 8000748:	20000289 	.word	0x20000289
 800074c:	08007c94 	.word	0x08007c94
 8000750:	0800840c 	.word	0x0800840c
 8000754:	08007cbc 	.word	0x08007cbc
 8000758:	08008410 	.word	0x08008410
 800075c:	08007c44 	.word	0x08007c44
 8000760:	08008448 	.word	0x08008448
 8000764:	08008464 	.word	0x08008464

08000768 <disassembly_ins_is_bl_blx>:
#endif /* CMB_USING_DUMP_STACK_INFO */

/* check the disassembly instruction is 'BL' or 'BLX' */
static bool disassembly_ins_is_bl_blx(uint32_t addr) {
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    uint16_t ins1 = *((uint16_t *)addr);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	81fb      	strh	r3, [r7, #14]
    uint16_t ins2 = *((uint16_t *)(addr + 2));
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3302      	adds	r3, #2
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	81bb      	strh	r3, [r7, #12]
#define BL_INS_HIGH         0xF800
#define BL_INS_LOW          0xF000
#define BLX_INX_MASK        0xFF00
#define BLX_INX             0x4700

    if ((ins2 & BL_INS_MASK) == BL_INS_HIGH && (ins1 & BL_INS_MASK) == BL_INS_LOW) {
 800077e:	89bb      	ldrh	r3, [r7, #12]
 8000780:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8000784:	f5b3 4f78 	cmp.w	r3, #63488	@ 0xf800
 8000788:	d107      	bne.n	800079a <disassembly_ins_is_bl_blx+0x32>
 800078a:	89fb      	ldrh	r3, [r7, #14]
 800078c:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8000790:	f5b3 4f70 	cmp.w	r3, #61440	@ 0xf000
 8000794:	d101      	bne.n	800079a <disassembly_ins_is_bl_blx+0x32>
        return true;
 8000796:	2301      	movs	r3, #1
 8000798:	e008      	b.n	80007ac <disassembly_ins_is_bl_blx+0x44>
    } else if ((ins2 & BLX_INX_MASK) == BLX_INX) {
 800079a:	89bb      	ldrh	r3, [r7, #12]
 800079c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80007a0:	f5b3 4f8e 	cmp.w	r3, #18176	@ 0x4700
 80007a4:	d101      	bne.n	80007aa <disassembly_ins_is_bl_blx+0x42>
        return true;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <disassembly_ins_is_bl_blx+0x44>
    } else {
        return false;
 80007aa:	2300      	movs	r3, #0
    }
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <cm_backtrace_call_stack>:
 * @param size buffer size
 * @param sp stack pointer
 *
 * @return depth
 */
size_t cm_backtrace_call_stack(uint32_t *buffer, size_t size, uint32_t sp) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
    uint32_t stack_start_addr = main_stack_start_addr, pc;
 80007c4:	4b4c      	ldr	r3, [pc, #304]	@ (80008f8 <cm_backtrace_call_stack+0x140>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	61fb      	str	r3, [r7, #28]

#ifdef CMB_USING_OS_PLATFORM
    uint32_t tcb_sp;
#endif
    size_t depth = 0, stack_size = main_stack_size;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ce:	4b4b      	ldr	r3, [pc, #300]	@ (80008fc <cm_backtrace_call_stack+0x144>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	61bb      	str	r3, [r7, #24]
    bool regs_saved_lr_is_valid = false;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (on_fault) {
 80007da:	4b49      	ldr	r3, [pc, #292]	@ (8000900 <cm_backtrace_call_stack+0x148>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d032      	beq.n	8000848 <cm_backtrace_call_stack+0x90>
        if (!stack_is_overflow) {
 80007e2:	4b48      	ldr	r3, [pc, #288]	@ (8000904 <cm_backtrace_call_stack+0x14c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	f083 0301 	eor.w	r3, r3, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d02b      	beq.n	8000848 <cm_backtrace_call_stack+0x90>
            /* first depth is PC */
            buffer[depth++] = regs.saved.pc;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a42      	ldr	r2, [pc, #264]	@ (8000908 <cm_backtrace_call_stack+0x150>)
 80007fe:	6992      	ldr	r2, [r2, #24]
 8000800:	601a      	str	r2, [r3, #0]
            /* fix the LR address in thumb mode */
            pc = regs.saved.lr - 1;
 8000802:	4b41      	ldr	r3, [pc, #260]	@ (8000908 <cm_backtrace_call_stack+0x150>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	3b01      	subs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
            if ((pc >= code_start_addr) && (pc <= code_start_addr + code_size) && (depth < CMB_CALL_STACK_MAX_DEPTH)
 800080a:	4b40      	ldr	r3, [pc, #256]	@ (800090c <cm_backtrace_call_stack+0x154>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	d319      	bcc.n	8000848 <cm_backtrace_call_stack+0x90>
 8000814:	4b3d      	ldr	r3, [pc, #244]	@ (800090c <cm_backtrace_call_stack+0x154>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <cm_backtrace_call_stack+0x158>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4413      	add	r3, r2
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	429a      	cmp	r2, r3
 8000822:	d811      	bhi.n	8000848 <cm_backtrace_call_stack+0x90>
 8000824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000826:	2b1f      	cmp	r3, #31
 8000828:	d80e      	bhi.n	8000848 <cm_backtrace_call_stack+0x90>
                    && (depth < size)) {
 800082a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	429a      	cmp	r2, r3
 8000830:	d20a      	bcs.n	8000848 <cm_backtrace_call_stack+0x90>
                buffer[depth++] = pc;
 8000832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000834:	1c5a      	adds	r2, r3, #1
 8000836:	627a      	str	r2, [r7, #36]	@ 0x24
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	601a      	str	r2, [r3, #0]
                regs_saved_lr_is_valid = true;
 8000842:	2301      	movs	r3, #1
 8000844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        }
#endif /* CMB_USING_OS_PLATFORM */

    }

    if (stack_is_overflow) {
 8000848:	4b2e      	ldr	r3, [pc, #184]	@ (8000904 <cm_backtrace_call_stack+0x14c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d048      	beq.n	80008e2 <cm_backtrace_call_stack+0x12a>
        sp = stack_start_addr;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	607b      	str	r3, [r7, #4]
    }

    /* copy called function address */
    for (; sp < stack_start_addr + stack_size; sp += sizeof(size_t)) {
 8000854:	e045      	b.n	80008e2 <cm_backtrace_call_stack+0x12a>
        /* the *sp value may be LR, so need decrease a word to PC */
        pc = *((uint32_t *) sp) - sizeof(size_t);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3b04      	subs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
        /* the Cortex-M using thumb instruction, so the pc must be an odd number */
        if (pc % 2 == 0) {
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d036      	beq.n	80008d6 <cm_backtrace_call_stack+0x11e>
            continue;
        }
        /* fix the PC address in thumb mode */
        pc = *((uint32_t *) sp) - 1;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3b01      	subs	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
        if ((pc >= code_start_addr + sizeof(size_t)) && (pc <= code_start_addr + code_size) && (depth < CMB_CALL_STACK_MAX_DEPTH)
 8000870:	4b26      	ldr	r3, [pc, #152]	@ (800090c <cm_backtrace_call_stack+0x154>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3304      	adds	r3, #4
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	429a      	cmp	r2, r3
 800087a:	d32f      	bcc.n	80008dc <cm_backtrace_call_stack+0x124>
 800087c:	4b23      	ldr	r3, [pc, #140]	@ (800090c <cm_backtrace_call_stack+0x154>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <cm_backtrace_call_stack+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4413      	add	r3, r2
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	429a      	cmp	r2, r3
 800088a:	d827      	bhi.n	80008dc <cm_backtrace_call_stack+0x124>
 800088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088e:	2b1f      	cmp	r3, #31
 8000890:	d824      	bhi.n	80008dc <cm_backtrace_call_stack+0x124>
                /* check the the instruction before PC address is 'BL' or 'BLX' */
                && disassembly_ins_is_bl_blx(pc - sizeof(size_t)) && (depth < size)) {
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3b04      	subs	r3, #4
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff66 	bl	8000768 <disassembly_ins_is_bl_blx>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d01c      	beq.n	80008dc <cm_backtrace_call_stack+0x124>
 80008a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d218      	bcs.n	80008dc <cm_backtrace_call_stack+0x124>
            /* the second depth function may be already saved, so need ignore repeat */
            if ((depth == 2) && regs_saved_lr_is_valid && (pc == buffer[1])) {
 80008aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d109      	bne.n	80008c4 <cm_backtrace_call_stack+0x10c>
 80008b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d005      	beq.n	80008c4 <cm_backtrace_call_stack+0x10c>
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3304      	adds	r3, #4
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d00a      	beq.n	80008da <cm_backtrace_call_stack+0x122>
                continue;
            }
            buffer[depth++] = pc;
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e002      	b.n	80008dc <cm_backtrace_call_stack+0x124>
            continue;
 80008d6:	bf00      	nop
 80008d8:	e000      	b.n	80008dc <cm_backtrace_call_stack+0x124>
                continue;
 80008da:	bf00      	nop
    for (; sp < stack_start_addr + stack_size; sp += sizeof(size_t)) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3304      	adds	r3, #4
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	4413      	add	r3, r2
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d3b3      	bcc.n	8000856 <cm_backtrace_call_stack+0x9e>
        }
    }

    return depth;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000010c 	.word	0x2000010c
 80008fc:	20000110 	.word	0x20000110
 8000900:	20000240 	.word	0x20000240
 8000904:	20000241 	.word	0x20000241
 8000908:	20000244 	.word	0x20000244
 800090c:	20000114 	.word	0x20000114
 8000910:	20000118 	.word	0x20000118

08000914 <print_call_stack>:
/**
 * dump function call stack
 *
 * @param sp stack pointer
 */
static void print_call_stack(uint32_t sp) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b0a6      	sub	sp, #152	@ 0x98
 8000918:	af02      	add	r7, sp, #8
 800091a:	6078      	str	r0, [r7, #4]
    size_t i, cur_depth = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t call_stack_buf[CMB_CALL_STACK_MAX_DEPTH] = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2280      	movs	r2, #128	@ 0x80
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f006 f9a6 	bl	8006c7c <memset>

    cur_depth = cm_backtrace_call_stack(call_stack_buf, CMB_CALL_STACK_MAX_DEPTH, sp);
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	2120      	movs	r1, #32
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff3d 	bl	80007b8 <cm_backtrace_call_stack>
 800093e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

    for (i = 0; i < cur_depth; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000948:	e01f      	b.n	800098a <print_call_stack+0x76>
        sprintf(call_stack_info + i * (8 + 1), "%08lx", (unsigned long)call_stack_buf[i]);
 800094a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800094e:	4613      	mov	r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4413      	add	r3, r2
 8000954:	4a1f      	ldr	r2, [pc, #124]	@ (80009d4 <print_call_stack+0xc0>)
 8000956:	1898      	adds	r0, r3, r2
 8000958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	3390      	adds	r3, #144	@ 0x90
 8000960:	443b      	add	r3, r7
 8000962:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000966:	461a      	mov	r2, r3
 8000968:	491b      	ldr	r1, [pc, #108]	@ (80009d8 <print_call_stack+0xc4>)
 800096a:	f006 f88f 	bl	8006a8c <siprintf>
        call_stack_info[i * (8 + 1) + 8] = ' ';
 800096e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000972:	4613      	mov	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4413      	add	r3, r2
 8000978:	3308      	adds	r3, #8
 800097a:	4a16      	ldr	r2, [pc, #88]	@ (80009d4 <print_call_stack+0xc0>)
 800097c:	2120      	movs	r1, #32
 800097e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < cur_depth; i++) {
 8000980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000984:	3301      	adds	r3, #1
 8000986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800098a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800098e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000992:	429a      	cmp	r2, r3
 8000994:	d3d9      	bcc.n	800094a <print_call_stack+0x36>
    }

    if (cur_depth) {
 8000996:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00f      	beq.n	80009be <print_call_stack+0xaa>
        cmb_println(print_info[PRINT_CALL_STACK_INFO], fw_name, CMB_ELF_FILE_EXTENSION_NAME, cur_depth * (8 + 1),
 800099e:	480f      	ldr	r0, [pc, #60]	@ (80009dc <print_call_stack+0xc8>)
 80009a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80009a4:	4613      	mov	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	4413      	add	r3, r2
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <print_call_stack+0xc0>)
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <print_call_stack+0xcc>)
 80009b0:	490c      	ldr	r1, [pc, #48]	@ (80009e4 <print_call_stack+0xd0>)
 80009b2:	f005 fffb 	bl	80069ac <iprintf>
 80009b6:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <print_call_stack+0xd4>)
 80009b8:	f006 f860 	bl	8006a7c <puts>
                call_stack_info);
    } else {
        cmb_println(print_info[PRINT_CALL_STACK_ERR]);
    }
}
 80009bc:	e006      	b.n	80009cc <print_call_stack+0xb8>
        cmb_println(print_info[PRINT_CALL_STACK_ERR]);
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <print_call_stack+0xd8>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 fff3 	bl	80069ac <iprintf>
 80009c6:	4808      	ldr	r0, [pc, #32]	@ (80009e8 <print_call_stack+0xd4>)
 80009c8:	f006 f858 	bl	8006a7c <puts>
}
 80009cc:	bf00      	nop
 80009ce:	3790      	adds	r7, #144	@ 0x90
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000120 	.word	0x20000120
 80009d8:	0800848c 	.word	0x0800848c
 80009dc:	08007ce4 	.word	0x08007ce4
 80009e0:	08008494 	.word	0x08008494
 80009e4:	200000a0 	.word	0x200000a0
 80009e8:	0800840c 	.word	0x0800840c
 80009ec:	08007d24 	.word	0x08007d24

080009f0 <fault_diagnosis>:

#if (CMB_CPU_PLATFORM_TYPE != CMB_CPU_ARM_CORTEX_M0)
/**
 * fault diagnosis then print cause of fault
 */
static void fault_diagnosis(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    if (regs.hfsr.bits.VECTBL) {
 80009f4:	4bb3      	ldr	r3, [pc, #716]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 80009f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <fault_diagnosis+0x22>
        cmb_println(print_info[PRINT_HFSR_VECTBL]);
 8000a04:	4bb0      	ldr	r3, [pc, #704]	@ (8000cc8 <fault_diagnosis+0x2d8>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f005 ffd0 	bl	80069ac <iprintf>
 8000a0c:	48af      	ldr	r0, [pc, #700]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000a0e:	f006 f835 	bl	8006a7c <puts>
    }
    if (regs.hfsr.bits.FORCED) {
 8000a12:	4bac      	ldr	r3, [pc, #688]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000a14:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 8186 	beq.w	8000d30 <fault_diagnosis+0x340>
        /* Memory Management Fault */
        if (regs.mfsr.value) {
 8000a24:	4ba7      	ldr	r3, [pc, #668]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000a26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d06c      	beq.n	8000b08 <fault_diagnosis+0x118>
            if (regs.mfsr.bits.IACCVIOL) {
 8000a2e:	4ba5      	ldr	r3, [pc, #660]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000a30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <fault_diagnosis+0x5c>
                cmb_println(print_info[PRINT_MFSR_IACCVIOL]);
 8000a3e:	4ba4      	ldr	r3, [pc, #656]	@ (8000cd0 <fault_diagnosis+0x2e0>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f005 ffb3 	bl	80069ac <iprintf>
 8000a46:	48a1      	ldr	r0, [pc, #644]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000a48:	f006 f818 	bl	8006a7c <puts>
            }
            if (regs.mfsr.bits.DACCVIOL) {
 8000a4c:	4b9d      	ldr	r3, [pc, #628]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <fault_diagnosis+0x7a>
                cmb_println(print_info[PRINT_MFSR_DACCVIOL]);
 8000a5c:	4b9d      	ldr	r3, [pc, #628]	@ (8000cd4 <fault_diagnosis+0x2e4>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f005 ffa4 	bl	80069ac <iprintf>
 8000a64:	4899      	ldr	r0, [pc, #612]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000a66:	f006 f809 	bl	8006a7c <puts>
            }
            if (regs.mfsr.bits.MUNSTKERR) {
 8000a6a:	4b96      	ldr	r3, [pc, #600]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <fault_diagnosis+0x98>
                cmb_println(print_info[PRINT_MFSR_MUNSTKERR]);
 8000a7a:	4b97      	ldr	r3, [pc, #604]	@ (8000cd8 <fault_diagnosis+0x2e8>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f005 ff95 	bl	80069ac <iprintf>
 8000a82:	4892      	ldr	r0, [pc, #584]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000a84:	f005 fffa 	bl	8006a7c <puts>
            }
            if (regs.mfsr.bits.MSTKERR) {
 8000a88:	4b8e      	ldr	r3, [pc, #568]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <fault_diagnosis+0xb6>
                cmb_println(print_info[PRINT_MFSR_MSTKERR]);
 8000a98:	4b90      	ldr	r3, [pc, #576]	@ (8000cdc <fault_diagnosis+0x2ec>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f005 ff86 	bl	80069ac <iprintf>
 8000aa0:	488a      	ldr	r0, [pc, #552]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000aa2:	f005 ffeb 	bl	8006a7c <puts>
            }

#if (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M4) || (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M7) || \
    (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M33)
            if (regs.mfsr.bits.MLSPERR) {
 8000aa6:	4b87      	ldr	r3, [pc, #540]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d006      	beq.n	8000ac4 <fault_diagnosis+0xd4>
                cmb_println(print_info[PRINT_MFSR_MLSPERR]);
 8000ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8000ce0 <fault_diagnosis+0x2f0>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 ff77 	bl	80069ac <iprintf>
 8000abe:	4883      	ldr	r0, [pc, #524]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000ac0:	f005 ffdc 	bl	8006a7c <puts>
            }
#endif

            if (regs.mfsr.bits.MMARVALID) {
 8000ac4:	4b7f      	ldr	r3, [pc, #508]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000aca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d019      	beq.n	8000b08 <fault_diagnosis+0x118>
                if (regs.mfsr.bits.IACCVIOL || regs.mfsr.bits.DACCVIOL) {
 8000ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d107      	bne.n	8000af4 <fault_diagnosis+0x104>
 8000ae4:	4b77      	ldr	r3, [pc, #476]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d009      	beq.n	8000b08 <fault_diagnosis+0x118>
                    cmb_println(print_info[PRINT_MMAR], regs.mmar);
 8000af4:	4a7b      	ldr	r2, [pc, #492]	@ (8000ce4 <fault_diagnosis+0x2f4>)
 8000af6:	4b73      	ldr	r3, [pc, #460]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4610      	mov	r0, r2
 8000afe:	f005 ff55 	bl	80069ac <iprintf>
 8000b02:	4872      	ldr	r0, [pc, #456]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000b04:	f005 ffba 	bl	8006a7c <puts>
                }
            }
        }
        /* Bus Fault */
        if (regs.bfsr.value) {
 8000b08:	4b6e      	ldr	r3, [pc, #440]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000b0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d073      	beq.n	8000bfa <fault_diagnosis+0x20a>
            if (regs.bfsr.bits.IBUSERR) {
 8000b12:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000b14:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <fault_diagnosis+0x140>
                cmb_println(print_info[PRINT_BFSR_IBUSERR]);
 8000b22:	4b71      	ldr	r3, [pc, #452]	@ (8000ce8 <fault_diagnosis+0x2f8>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 ff41 	bl	80069ac <iprintf>
 8000b2a:	4868      	ldr	r0, [pc, #416]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000b2c:	f005 ffa6 	bl	8006a7c <puts>
            }
            if (regs.bfsr.bits.PRECISERR) {
 8000b30:	4b64      	ldr	r3, [pc, #400]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000b32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <fault_diagnosis+0x15e>
                cmb_println(print_info[PRINT_BFSR_PRECISERR]);
 8000b40:	4b6a      	ldr	r3, [pc, #424]	@ (8000cec <fault_diagnosis+0x2fc>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 ff32 	bl	80069ac <iprintf>
 8000b48:	4860      	ldr	r0, [pc, #384]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000b4a:	f005 ff97 	bl	8006a7c <puts>
            }
            if (regs.bfsr.bits.IMPREISERR) {
 8000b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000b50:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <fault_diagnosis+0x17c>
                cmb_println(print_info[PRINT_BFSR_IMPREISERR]);
 8000b5e:	4b64      	ldr	r3, [pc, #400]	@ (8000cf0 <fault_diagnosis+0x300>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 ff23 	bl	80069ac <iprintf>
 8000b66:	4859      	ldr	r0, [pc, #356]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000b68:	f005 ff88 	bl	8006a7c <puts>
            }
            if (regs.bfsr.bits.UNSTKERR) {
 8000b6c:	4b55      	ldr	r3, [pc, #340]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <fault_diagnosis+0x19a>
                cmb_println(print_info[PRINT_BFSR_UNSTKERR]);
 8000b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8000cf4 <fault_diagnosis+0x304>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f005 ff14 	bl	80069ac <iprintf>
 8000b84:	4851      	ldr	r0, [pc, #324]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000b86:	f005 ff79 	bl	8006a7c <puts>
            }
            if (regs.bfsr.bits.STKERR) {
 8000b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000b8c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <fault_diagnosis+0x1b8>
                cmb_println(print_info[PRINT_BFSR_STKERR]);
 8000b9a:	4b57      	ldr	r3, [pc, #348]	@ (8000cf8 <fault_diagnosis+0x308>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 ff05 	bl	80069ac <iprintf>
 8000ba2:	484a      	ldr	r0, [pc, #296]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000ba4:	f005 ff6a 	bl	8006a7c <puts>
            }

#if (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M4) || (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M7) || \
    (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M33)
            if (regs.bfsr.bits.LSPERR) {
 8000ba8:	4b46      	ldr	r3, [pc, #280]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000baa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <fault_diagnosis+0x1d6>
                cmb_println(print_info[PRINT_BFSR_LSPERR]);
 8000bb8:	4b50      	ldr	r3, [pc, #320]	@ (8000cfc <fault_diagnosis+0x30c>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 fef6 	bl	80069ac <iprintf>
 8000bc0:	4842      	ldr	r0, [pc, #264]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000bc2:	f005 ff5b 	bl	8006a7c <puts>
            }
#endif

            if (regs.bfsr.bits.BFARVALID) {
 8000bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000bc8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000bcc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d011      	beq.n	8000bfa <fault_diagnosis+0x20a>
                if (regs.bfsr.bits.PRECISERR) {
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000bd8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d009      	beq.n	8000bfa <fault_diagnosis+0x20a>
                    cmb_println(print_info[PRINT_BFAR], regs.bfar);
 8000be6:	4a46      	ldr	r2, [pc, #280]	@ (8000d00 <fault_diagnosis+0x310>)
 8000be8:	4b36      	ldr	r3, [pc, #216]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	4619      	mov	r1, r3
 8000bee:	4610      	mov	r0, r2
 8000bf0:	f005 fedc 	bl	80069ac <iprintf>
 8000bf4:	4835      	ldr	r0, [pc, #212]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000bf6:	f005 ff41 	bl	8006a7c <puts>
                }
            }

        }
        /* Usage Fault */
        if (regs.ufsr.value) {
 8000bfa:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000bfc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8096 	beq.w	8000d30 <fault_diagnosis+0x340>
            if (regs.ufsr.bits.UNDEFINSTR) {
 8000c04:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000c06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <fault_diagnosis+0x232>
                cmb_println(print_info[PRINT_UFSR_UNDEFINSTR]);
 8000c14:	4b3b      	ldr	r3, [pc, #236]	@ (8000d04 <fault_diagnosis+0x314>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 fec8 	bl	80069ac <iprintf>
 8000c1c:	482b      	ldr	r0, [pc, #172]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000c1e:	f005 ff2d 	bl	8006a7c <puts>
            }
            if (regs.ufsr.bits.INVSTATE) {
 8000c22:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000c24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <fault_diagnosis+0x250>
                cmb_println(print_info[PRINT_UFSR_INVSTATE]);
 8000c32:	4b35      	ldr	r3, [pc, #212]	@ (8000d08 <fault_diagnosis+0x318>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f005 feb9 	bl	80069ac <iprintf>
 8000c3a:	4824      	ldr	r0, [pc, #144]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000c3c:	f005 ff1e 	bl	8006a7c <puts>
            }
            if (regs.ufsr.bits.INVPC) {
 8000c40:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000c42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d006      	beq.n	8000c5e <fault_diagnosis+0x26e>
                cmb_println(print_info[PRINT_UFSR_INVPC]);
 8000c50:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <fault_diagnosis+0x31c>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f005 feaa 	bl	80069ac <iprintf>
 8000c58:	481c      	ldr	r0, [pc, #112]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000c5a:	f005 ff0f 	bl	8006a7c <puts>
            }
            if (regs.ufsr.bits.NOCP) {
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000c60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d006      	beq.n	8000c7c <fault_diagnosis+0x28c>
                cmb_println(print_info[PRINT_UFSR_NOCP]);
 8000c6e:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <fault_diagnosis+0x320>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 fe9b 	bl	80069ac <iprintf>
 8000c76:	4815      	ldr	r0, [pc, #84]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000c78:	f005 ff00 	bl	8006a7c <puts>
            }
#if (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M33)
            if (regs.ufsr.bits.STKOF) {
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <fault_diagnosis+0x2aa>
                cmb_println(print_info[PRINT_UFSR_STKOF]);
 8000c8c:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <fault_diagnosis+0x324>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 fe8c 	bl	80069ac <iprintf>
 8000c94:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000c96:	f005 fef1 	bl	8006a7c <puts>
            }
#endif
            if (regs.ufsr.bits.UNALIGNED) {
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <fault_diagnosis+0x2c8>
                cmb_println(print_info[PRINT_UFSR_UNALIGNED]);
 8000caa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <fault_diagnosis+0x328>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 fe7d 	bl	80069ac <iprintf>
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <fault_diagnosis+0x2dc>)
 8000cb4:	f005 fee2 	bl	8006a7c <puts>
            }
            if (regs.ufsr.bits.DIVBYZERO0) {
 8000cb8:	4b02      	ldr	r3, [pc, #8]	@ (8000cc4 <fault_diagnosis+0x2d4>)
 8000cba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	e02b      	b.n	8000d1c <fault_diagnosis+0x32c>
 8000cc4:	20000244 	.word	0x20000244
 8000cc8:	08007dcc 	.word	0x08007dcc
 8000ccc:	0800840c 	.word	0x0800840c
 8000cd0:	08007df8 	.word	0x08007df8
 8000cd4:	08007e3c 	.word	0x08007e3c
 8000cd8:	08007e78 	.word	0x08007e78
 8000cdc:	08007eb0 	.word	0x08007eb0
 8000ce0:	08007ee4 	.word	0x08007ee4
 8000ce4:	080083ac 	.word	0x080083ac
 8000ce8:	08007f30 	.word	0x08007f30
 8000cec:	08007f64 	.word	0x08007f64
 8000cf0:	08007f9c 	.word	0x08007f9c
 8000cf4:	08007fd4 	.word	0x08007fd4
 8000cf8:	08007ffc 	.word	0x08007ffc
 8000cfc:	08008024 	.word	0x08008024
 8000d00:	080083e4 	.word	0x080083e4
 8000d04:	08008064 	.word	0x08008064
 8000d08:	080080ac 	.word	0x080080ac
 8000d0c:	080080f8 	.word	0x080080f8
 8000d10:	08008158 	.word	0x08008158
 8000d14:	080081a0 	.word	0x080081a0
 8000d18:	080081fc 	.word	0x080081fc
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <fault_diagnosis+0x340>
                cmb_println(print_info[PRINT_UFSR_DIVBYZERO0]);
 8000d22:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <fault_diagnosis+0x3f4>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 fe41 	bl	80069ac <iprintf>
 8000d2a:	482f      	ldr	r0, [pc, #188]	@ (8000de8 <fault_diagnosis+0x3f8>)
 8000d2c:	f005 fea6 	bl	8006a7c <puts>
            }
        }
    }
    /* Debug Fault */
    if (regs.hfsr.bits.DEBUGEVT) {
 8000d30:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <fault_diagnosis+0x3fc>)
 8000d32:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000d36:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d04e      	beq.n	8000dde <fault_diagnosis+0x3ee>
        if (regs.dfsr.value) {
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <fault_diagnosis+0x3fc>)
 8000d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d04a      	beq.n	8000dde <fault_diagnosis+0x3ee>
            if (regs.dfsr.bits.HALTED) {
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <fault_diagnosis+0x3fc>)
 8000d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <fault_diagnosis+0x376>
                cmb_println(print_info[PRINT_DFSR_HALTED]);
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <fault_diagnosis+0x400>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 fe26 	bl	80069ac <iprintf>
 8000d60:	4821      	ldr	r0, [pc, #132]	@ (8000de8 <fault_diagnosis+0x3f8>)
 8000d62:	f005 fe8b 	bl	8006a7c <puts>
            }
            if (regs.dfsr.bits.BKPT) {
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <fault_diagnosis+0x3fc>)
 8000d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d006      	beq.n	8000d84 <fault_diagnosis+0x394>
                cmb_println(print_info[PRINT_DFSR_BKPT]);
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <fault_diagnosis+0x404>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 fe17 	bl	80069ac <iprintf>
 8000d7e:	481a      	ldr	r0, [pc, #104]	@ (8000de8 <fault_diagnosis+0x3f8>)
 8000d80:	f005 fe7c 	bl	8006a7c <puts>
            }
            if (regs.dfsr.bits.DWTTRAP) {
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <fault_diagnosis+0x3fc>)
 8000d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <fault_diagnosis+0x3b2>
                cmb_println(print_info[PRINT_DFSR_DWTTRAP]);
 8000d94:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <fault_diagnosis+0x408>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f005 fe08 	bl	80069ac <iprintf>
 8000d9c:	4812      	ldr	r0, [pc, #72]	@ (8000de8 <fault_diagnosis+0x3f8>)
 8000d9e:	f005 fe6d 	bl	8006a7c <puts>
            }
            if (regs.dfsr.bits.VCATCH) {
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <fault_diagnosis+0x3fc>)
 8000da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <fault_diagnosis+0x3d0>
                cmb_println(print_info[PRINT_DFSR_VCATCH]);
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <fault_diagnosis+0x40c>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 fdf9 	bl	80069ac <iprintf>
 8000dba:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <fault_diagnosis+0x3f8>)
 8000dbc:	f005 fe5e 	bl	8006a7c <puts>
            }
            if (regs.dfsr.bits.EXTERNAL) {
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <fault_diagnosis+0x3fc>)
 8000dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <fault_diagnosis+0x3ee>
                cmb_println(print_info[PRINT_DFSR_EXTERNAL]);
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <fault_diagnosis+0x410>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f005 fdea 	bl	80069ac <iprintf>
 8000dd8:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <fault_diagnosis+0x3f8>)
 8000dda:	f005 fe4f 	bl	8006a7c <puts>
            }
        }
    }
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08008250 	.word	0x08008250
 8000de8:	0800840c 	.word	0x0800840c
 8000dec:	20000244 	.word	0x20000244
 8000df0:	080082bc 	.word	0x080082bc
 8000df4:	080082ec 	.word	0x080082ec
 8000df8:	08008320 	.word	0x08008320
 8000dfc:	0800834c 	.word	0x0800834c
 8000e00:	0800837c 	.word	0x0800837c

08000e04 <statck_del_fpu_regs>:
#endif /* (CMB_CPU_PLATFORM_TYPE != CMB_CPU_ARM_CORTEX_M0) */

#if (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M4) || (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M7) || \
    (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M33)
static uint32_t statck_del_fpu_regs(uint32_t fault_handler_lr, uint32_t sp) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
    statck_has_fpu_regs = (fault_handler_lr & (1UL << 4)) == 0 ? true : false;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f003 0310 	and.w	r3, r3, #16
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf0c      	ite	eq
 8000e18:	2301      	moveq	r3, #1
 8000e1a:	2300      	movne	r3, #0
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <statck_del_fpu_regs+0x3c>)
 8000e20:	701a      	strb	r2, [r3, #0]

    /* the stack has S0~S15 and FPSCR registers when statck_has_fpu_regs is true, double word align */
    return statck_has_fpu_regs == true ? sp + sizeof(size_t) * 18 : sp;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <statck_del_fpu_regs+0x3c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <statck_del_fpu_regs+0x2c>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	3348      	adds	r3, #72	@ 0x48
 8000e2e:	e000      	b.n	8000e32 <statck_del_fpu_regs+0x2e>
 8000e30:	683b      	ldr	r3, [r7, #0]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000288 	.word	0x20000288

08000e44 <cm_backtrace_fault>:
 * @note only call once
 *
 * @param fault_handler_lr the LR register value on fault handler
 * @param fault_handler_sp the stack pointer on fault handler
 */
void cm_backtrace_fault(uint32_t fault_handler_lr, uint32_t fault_handler_sp) {
 8000e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e46:	b099      	sub	sp, #100	@ 0x64
 8000e48:	af06      	add	r7, sp, #24
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
    uint32_t stack_pointer = fault_handler_sp, saved_regs_addr = stack_pointer, tcb_stack_pointer = 0;
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e56:	2300      	movs	r3, #0
 8000e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const char *regs_name[] = { "R0 ", "R1 ", "R2 ", "R3 ", "R12", "LR ", "PC ", "PSR" };
 8000e5a:	4b85      	ldr	r3, [pc, #532]	@ (8001070 <cm_backtrace_fault+0x22c>)
 8000e5c:	f107 0414 	add.w	r4, r7, #20
 8000e60:	461d      	mov	r5, r3
 8000e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

#ifdef CMB_USING_DUMP_STACK_INFO
    uint32_t stack_start_addr = main_stack_start_addr;
 8000e6e:	4b81      	ldr	r3, [pc, #516]	@ (8001074 <cm_backtrace_fault+0x230>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	63bb      	str	r3, [r7, #56]	@ 0x38
    size_t stack_size = main_stack_size;
 8000e74:	4b80      	ldr	r3, [pc, #512]	@ (8001078 <cm_backtrace_fault+0x234>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	637b      	str	r3, [r7, #52]	@ 0x34
#endif

    CMB_ASSERT(init_ok);
 8000e7a:	4b80      	ldr	r3, [pc, #512]	@ (800107c <cm_backtrace_fault+0x238>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	f083 0301 	eor.w	r3, r3, #1
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d009      	beq.n	8000e9c <cm_backtrace_fault+0x58>
 8000e88:	4a7d      	ldr	r2, [pc, #500]	@ (8001080 <cm_backtrace_fault+0x23c>)
 8000e8a:	497e      	ldr	r1, [pc, #504]	@ (8001084 <cm_backtrace_fault+0x240>)
 8000e8c:	487e      	ldr	r0, [pc, #504]	@ (8001088 <cm_backtrace_fault+0x244>)
 8000e8e:	f005 fd8d 	bl	80069ac <iprintf>
 8000e92:	487e      	ldr	r0, [pc, #504]	@ (800108c <cm_backtrace_fault+0x248>)
 8000e94:	f005 fdf2 	bl	8006a7c <puts>
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <cm_backtrace_fault+0x54>
    /* only call once */
    CMB_ASSERT(!on_fault);
 8000e9c:	4b7c      	ldr	r3, [pc, #496]	@ (8001090 <cm_backtrace_fault+0x24c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d009      	beq.n	8000eb8 <cm_backtrace_fault+0x74>
 8000ea4:	4a76      	ldr	r2, [pc, #472]	@ (8001080 <cm_backtrace_fault+0x23c>)
 8000ea6:	497b      	ldr	r1, [pc, #492]	@ (8001094 <cm_backtrace_fault+0x250>)
 8000ea8:	4877      	ldr	r0, [pc, #476]	@ (8001088 <cm_backtrace_fault+0x244>)
 8000eaa:	f005 fd7f 	bl	80069ac <iprintf>
 8000eae:	4877      	ldr	r0, [pc, #476]	@ (800108c <cm_backtrace_fault+0x248>)
 8000eb0:	f005 fde4 	bl	8006a7c <puts>
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <cm_backtrace_fault+0x70>

    on_fault = true;
 8000eb8:	4b75      	ldr	r3, [pc, #468]	@ (8001090 <cm_backtrace_fault+0x24c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]

    cmb_println("");
 8000ebe:	4873      	ldr	r0, [pc, #460]	@ (800108c <cm_backtrace_fault+0x248>)
 8000ec0:	f005 fddc 	bl	8006a7c <puts>
    cm_backtrace_firmware_info();
 8000ec4:	f7ff fbc0 	bl	8000648 <cm_backtrace_firmware_info>
    } else {
        cmb_println(print_info[PRINT_FAULT_ON_HANDLER]);
    }
#else
    /* bare metal(no OS) environment */
    cmb_println(print_info[PRINT_FAULT_ON_HANDLER]);
 8000ec8:	4b73      	ldr	r3, [pc, #460]	@ (8001098 <cm_backtrace_fault+0x254>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f005 fd6e 	bl	80069ac <iprintf>
 8000ed0:	486e      	ldr	r0, [pc, #440]	@ (800108c <cm_backtrace_fault+0x248>)
 8000ed2:	f005 fdd3 	bl	8006a7c <puts>
#endif /* CMB_USING_OS_PLATFORM */

    /* delete saved R0~R3, R12, LR,PC,xPSR registers space */
    stack_pointer += sizeof(size_t) * 8;
 8000ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ed8:	3320      	adds	r3, #32
 8000eda:	647b      	str	r3, [r7, #68]	@ 0x44

#if (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M4) || (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M7) || \
    (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M33)
    stack_pointer = statck_del_fpu_regs(fault_handler_lr, stack_pointer);
 8000edc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff ff90 	bl	8000e04 <statck_del_fpu_regs>
 8000ee4:	6478      	str	r0, [r7, #68]	@ 0x44
#endif /* (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M4) || (CMB_CPU_PLATFORM_TYPE == CMB_CPU_ARM_CORTEX_M7) */

#ifdef CMB_USING_DUMP_STACK_INFO
    /* check stack overflow */
    if (stack_pointer < stack_start_addr || stack_pointer > stack_start_addr + stack_size) {
 8000ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d305      	bcc.n	8000efa <cm_backtrace_fault+0xb6>
 8000eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef2:	4413      	add	r3, r2
 8000ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d913      	bls.n	8000f22 <cm_backtrace_fault+0xde>
        cmb_println("stack_pointer: 0x%08x, stack_start_addr: 0x%08x, stack_end_addr: 0x%08x", stack_pointer, stack_start_addr,
 8000efa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000efe:	4413      	add	r3, r2
 8000f00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000f04:	4865      	ldr	r0, [pc, #404]	@ (800109c <cm_backtrace_fault+0x258>)
 8000f06:	f005 fd51 	bl	80069ac <iprintf>
 8000f0a:	4860      	ldr	r0, [pc, #384]	@ (800108c <cm_backtrace_fault+0x248>)
 8000f0c:	f005 fdb6 	bl	8006a7c <puts>
            stack_start_addr + stack_size);
        stack_is_overflow = true;
 8000f10:	4b63      	ldr	r3, [pc, #396]	@ (80010a0 <cm_backtrace_fault+0x25c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
#if (CMB_OS_PLATFORM_TYPE == CMB_OS_PLATFORM_RTT)
        if (on_thread_before_fault) {
 8000f16:	4b63      	ldr	r3, [pc, #396]	@ (80010a4 <cm_backtrace_fault+0x260>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <cm_backtrace_fault+0xde>
             /* change the stack start adder to TCB->sp when stack is overflow  */
            stack_pointer = tcb_stack_pointer;
 8000f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f20:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }
    /* dump stack information */
    dump_stack(stack_start_addr, stack_size, (uint32_t *) stack_pointer);
 8000f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f24:	461a      	mov	r2, r3
 8000f26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000f28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000f2a:	f7ff fba5 	bl	8000678 <dump_stack>
#endif /* CMB_USING_DUMP_STACK_INFO */

    {
        /* dump register */
        cmb_println(print_info[PRINT_REGS_TITLE]);
 8000f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80010a8 <cm_backtrace_fault+0x264>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 fd3b 	bl	80069ac <iprintf>
 8000f36:	4855      	ldr	r0, [pc, #340]	@ (800108c <cm_backtrace_fault+0x248>)
 8000f38:	f005 fda0 	bl	8006a7c <puts>

        regs.saved.r0        = ((uint32_t *)saved_regs_addr)[0];  // Register R0
 8000f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a5a      	ldr	r2, [pc, #360]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f42:	6013      	str	r3, [r2, #0]
        regs.saved.r1        = ((uint32_t *)saved_regs_addr)[1];  // Register R1
 8000f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f46:	3304      	adds	r3, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a58      	ldr	r2, [pc, #352]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f4c:	6053      	str	r3, [r2, #4]
        regs.saved.r2        = ((uint32_t *)saved_regs_addr)[2];  // Register R2
 8000f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f50:	3308      	adds	r3, #8
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a55      	ldr	r2, [pc, #340]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f56:	6093      	str	r3, [r2, #8]
        regs.saved.r3        = ((uint32_t *)saved_regs_addr)[3];  // Register R3
 8000f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f5a:	330c      	adds	r3, #12
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a53      	ldr	r2, [pc, #332]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f60:	60d3      	str	r3, [r2, #12]
        regs.saved.r12       = ((uint32_t *)saved_regs_addr)[4];  // Register R12
 8000f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f64:	3310      	adds	r3, #16
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a50      	ldr	r2, [pc, #320]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f6a:	6113      	str	r3, [r2, #16]
        regs.saved.lr        = ((uint32_t *)saved_regs_addr)[5];  // Link register LR
 8000f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f6e:	3314      	adds	r3, #20
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a4e      	ldr	r2, [pc, #312]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f74:	6153      	str	r3, [r2, #20]
        regs.saved.pc        = ((uint32_t *)saved_regs_addr)[6];  // Program counter PC
 8000f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f78:	3318      	adds	r3, #24
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f7e:	6193      	str	r3, [r2, #24]
        regs.saved.psr.value = ((uint32_t *)saved_regs_addr)[7];  // Program status word PSR
 8000f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f82:	331c      	adds	r3, #28
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a49      	ldr	r2, [pc, #292]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f88:	61d3      	str	r3, [r2, #28]

        cmb_println("  %s: %08x  %s: %08x  %s: %08x  %s: %08x", regs_name[0], regs.saved.r0,
 8000f8a:	697d      	ldr	r5, [r7, #20]
 8000f8c:	4b47      	ldr	r3, [pc, #284]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f8e:	681e      	ldr	r6, [r3, #0]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b45      	ldr	r3, [pc, #276]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	4944      	ldr	r1, [pc, #272]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000f9c:	6889      	ldr	r1, [r1, #8]
 8000f9e:	6a38      	ldr	r0, [r7, #32]
 8000fa0:	4c42      	ldr	r4, [pc, #264]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000fa2:	68e4      	ldr	r4, [r4, #12]
 8000fa4:	9404      	str	r4, [sp, #16]
 8000fa6:	9003      	str	r0, [sp, #12]
 8000fa8:	9102      	str	r1, [sp, #8]
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4632      	mov	r2, r6
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	483e      	ldr	r0, [pc, #248]	@ (80010b0 <cm_backtrace_fault+0x26c>)
 8000fb6:	f005 fcf9 	bl	80069ac <iprintf>
 8000fba:	4834      	ldr	r0, [pc, #208]	@ (800108c <cm_backtrace_fault+0x248>)
 8000fbc:	f005 fd5e 	bl	8006a7c <puts>
                                                                regs_name[1], regs.saved.r1,
                                                                regs_name[2], regs.saved.r2,
                                                                regs_name[3], regs.saved.r3);
        cmb_println("  %s: %08x  %s: %08x  %s: %08x  %s: %08x", regs_name[4], regs.saved.r12,
 8000fc0:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000fc4:	691e      	ldr	r6, [r3, #16]
 8000fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b38      	ldr	r3, [pc, #224]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fd0:	4936      	ldr	r1, [pc, #216]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000fd2:	6989      	ldr	r1, [r1, #24]
 8000fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000fd6:	4c35      	ldr	r4, [pc, #212]	@ (80010ac <cm_backtrace_fault+0x268>)
 8000fd8:	69e4      	ldr	r4, [r4, #28]
 8000fda:	9404      	str	r4, [sp, #16]
 8000fdc:	9003      	str	r0, [sp, #12]
 8000fde:	9102      	str	r1, [sp, #8]
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4632      	mov	r2, r6
 8000fe8:	4629      	mov	r1, r5
 8000fea:	4831      	ldr	r0, [pc, #196]	@ (80010b0 <cm_backtrace_fault+0x26c>)
 8000fec:	f005 fcde 	bl	80069ac <iprintf>
 8000ff0:	4826      	ldr	r0, [pc, #152]	@ (800108c <cm_backtrace_fault+0x248>)
 8000ff2:	f005 fd43 	bl	8006a7c <puts>
                                                                regs_name[5], regs.saved.lr,
                                                                regs_name[6], regs.saved.pc,
                                                                regs_name[7], regs.saved.psr.value);
        cmb_println("==============================================================");
 8000ff6:	482f      	ldr	r0, [pc, #188]	@ (80010b4 <cm_backtrace_fault+0x270>)
 8000ff8:	f005 fcd8 	bl	80069ac <iprintf>
 8000ffc:	4823      	ldr	r0, [pc, #140]	@ (800108c <cm_backtrace_fault+0x248>)
 8000ffe:	f005 fd3d 	bl	8006a7c <puts>
    }

    /* the Cortex-M0 is not support fault diagnosis */
#if (CMB_CPU_PLATFORM_TYPE != CMB_CPU_ARM_CORTEX_M0)
    regs.syshndctrl.value = CMB_SYSHND_CTRL;  // System Handler Control and State Register
 8001002:	4b2d      	ldr	r3, [pc, #180]	@ (80010b8 <cm_backtrace_fault+0x274>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a29      	ldr	r2, [pc, #164]	@ (80010ac <cm_backtrace_fault+0x268>)
 8001008:	6213      	str	r3, [r2, #32]
    regs.mfsr.value       = CMB_NVIC_MFSR;    // Memory Fault Status Register
 800100a:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <cm_backtrace_fault+0x278>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <cm_backtrace_fault+0x268>)
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    regs.mmar             = CMB_NVIC_MMAR;    // Memory Management Fault Address Register
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <cm_backtrace_fault+0x27c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a24      	ldr	r2, [pc, #144]	@ (80010ac <cm_backtrace_fault+0x268>)
 800101c:	6293      	str	r3, [r2, #40]	@ 0x28
    regs.bfsr.value       = CMB_NVIC_BFSR;    // Bus Fault Status Register
 800101e:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <cm_backtrace_fault+0x280>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <cm_backtrace_fault+0x268>)
 8001026:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    regs.bfar             = CMB_NVIC_BFAR;    // Bus Fault Manage Address Register
 800102a:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <cm_backtrace_fault+0x284>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ac <cm_backtrace_fault+0x268>)
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
    regs.ufsr.value       = CMB_NVIC_UFSR;    // Usage Fault Status Register
 8001032:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <cm_backtrace_fault+0x288>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <cm_backtrace_fault+0x268>)
 800103a:	869a      	strh	r2, [r3, #52]	@ 0x34
    regs.hfsr.value       = CMB_NVIC_HFSR;    // Hard Fault Status Register
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <cm_backtrace_fault+0x28c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1a      	ldr	r2, [pc, #104]	@ (80010ac <cm_backtrace_fault+0x268>)
 8001042:	6393      	str	r3, [r2, #56]	@ 0x38
    regs.dfsr.value       = CMB_NVIC_DFSR;    // Debug Fault Status Register
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <cm_backtrace_fault+0x290>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <cm_backtrace_fault+0x268>)
 800104e:	63da      	str	r2, [r3, #60]	@ 0x3c
    regs.afsr             = CMB_NVIC_AFSR;    // Auxiliary Fault Status Register
 8001050:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <cm_backtrace_fault+0x294>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <cm_backtrace_fault+0x268>)
 800105a:	641a      	str	r2, [r3, #64]	@ 0x40

    fault_diagnosis();
 800105c:	f7ff fcc8 	bl	80009f0 <fault_diagnosis>
#endif

    print_call_stack(stack_pointer);
 8001060:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001062:	f7ff fc57 	bl	8000914 <print_call_stack>
}
 8001066:	bf00      	nop
 8001068:	374c      	adds	r7, #76	@ 0x4c
 800106a:	46bd      	mov	sp, r7
 800106c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800106e:	bf00      	nop
 8001070:	080085a4 	.word	0x080085a4
 8001074:	2000010c 	.word	0x2000010c
 8001078:	20000110 	.word	0x20000110
 800107c:	2000011c 	.word	0x2000011c
 8001080:	08008694 	.word	0x08008694
 8001084:	0800849c 	.word	0x0800849c
 8001088:	080084a4 	.word	0x080084a4
 800108c:	0800840c 	.word	0x0800840c
 8001090:	20000240 	.word	0x20000240
 8001094:	080084c4 	.word	0x080084c4
 8001098:	08007d58 	.word	0x08007d58
 800109c:	080084d0 	.word	0x080084d0
 80010a0:	20000241 	.word	0x20000241
 80010a4:	20000289 	.word	0x20000289
 80010a8:	08007d8c 	.word	0x08007d8c
 80010ac:	20000244 	.word	0x20000244
 80010b0:	08008518 	.word	0x08008518
 80010b4:	08008544 	.word	0x08008544
 80010b8:	e000ed24 	.word	0xe000ed24
 80010bc:	e000ed28 	.word	0xe000ed28
 80010c0:	e000ed34 	.word	0xe000ed34
 80010c4:	e000ed29 	.word	0xe000ed29
 80010c8:	e000ed38 	.word	0xe000ed38
 80010cc:	e000ed2a 	.word	0xe000ed2a
 80010d0:	e000ed2c 	.word	0xe000ed2c
 80010d4:	e000ed30 	.word	0xe000ed30
 80010d8:	e000ed3c 	.word	0xe000ed3c

080010dc <fault_test_by_div0>:
    p = (int *) 0x03;
    value = *p;
    printf("addr:0x%02X value:0x%08X\r\n", (int) p, value);
}

void fault_test_by_div0(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
    volatile int * SCB_CCR = (volatile int *) 0xE000ED14; // SCB->CCR
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <fault_test_by_div0+0x38>)
 80010e4:	60fb      	str	r3, [r7, #12]
    int x, y, z;

    *SCB_CCR |= (1 << 4); /* bit4: DIV_0_TRP. */
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f043 0210 	orr.w	r2, r3, #16
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	601a      	str	r2, [r3, #0]

    x = 10;
 80010f2:	230a      	movs	r3, #10
 80010f4:	60bb      	str	r3, [r7, #8]
    y = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
    z = x / y;
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001102:	603b      	str	r3, [r7, #0]
    printf("z:%d\n", z);
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	4804      	ldr	r0, [pc, #16]	@ (8001118 <fault_test_by_div0+0x3c>)
 8001108:	f005 fc50 	bl	80069ac <iprintf>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	e000ed14 	.word	0xe000ed14
 8001118:	080085e0 	.word	0x080085e0

0800111c <func_c>:
static int func_c();
static int func_c() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
    int c=0;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
        c++;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3301      	adds	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
    //printf("fault_test_by_unalign\n");
    //fault_test_by_unalign();
    printf("fault_test_by_div0\n");
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <func_c+0x24>)
 800112e:	f005 fca5 	bl	8006a7c <puts>
    fault_test_by_div0();
 8001132:	f7ff ffd3 	bl	80010dc <fault_test_by_div0>
    return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	080085e8 	.word	0x080085e8

08001144 <func_b>:
static int func_b();
static int func_b() {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
    int b=0;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
        b++;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
    return func_c();
 8001154:	f7ff ffe2 	bl	800111c <func_c>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <func_a>:
static int func_a();
static int func_a() {
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
    int a=0;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
    a++;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
    return func_b();
 8001172:	f7ff ffe7 	bl	8001144 <func_b>
 8001176:	4603      	mov	r3, r0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f000 fcf5 	bl	8001b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800118a:	f000 f8a8 	bl	80012de <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f85d 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f000 f8c5 	bl	8001320 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8001196:	f000 f8b0 	bl	80012fa <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 fae0 	bl	8001760 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f000 fadd 	bl	8001760 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f000 fada 	bl	8001760 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80011ac:	2101      	movs	r1, #1
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 fb66 	bl	8001880 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <main+0xa0>)
 80011b6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011ba:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <main+0xa0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <main+0xa0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <main+0xa0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <main+0xa0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80011d4:	4912      	ldr	r1, [pc, #72]	@ (8001220 <main+0xa0>)
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 fbec 	bl	80019b4 <BSP_COM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <main+0x66>
  {
    Error_Handler();
 80011e2:	f000 f8e7 	bl	80013b4 <Error_Handler>
  }

  printf("hello world!\n");
 80011e6:	480f      	ldr	r0, [pc, #60]	@ (8001224 <main+0xa4>)
 80011e8:	f005 fc48 	bl	8006a7c <puts>
  printf("date:%s\ntime:%s\nfile:%s\nfunc:%s,line:%d\nhello world!\n", __DATE__, __TIME__, __FILE__, __FUNCTION__, __LINE__);
 80011ec:	23b2      	movs	r3, #178	@ 0xb2
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <main+0xa8>)
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <main+0xac>)
 80011f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001230 <main+0xb0>)
 80011f8:	490e      	ldr	r1, [pc, #56]	@ (8001234 <main+0xb4>)
 80011fa:	480f      	ldr	r0, [pc, #60]	@ (8001238 <main+0xb8>)
 80011fc:	f005 fbd6 	bl	80069ac <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* CmBacktrace initialize */
  cm_backtrace_init("CmBacktrace", HARDWARE_VERSION, SOFTWARE_VERSION);
 8001200:	4a0e      	ldr	r2, [pc, #56]	@ (800123c <main+0xbc>)
 8001202:	490f      	ldr	r1, [pc, #60]	@ (8001240 <main+0xc0>)
 8001204:	480f      	ldr	r0, [pc, #60]	@ (8001244 <main+0xc4>)
 8001206:	f7ff f9c9 	bl	800059c <cm_backtrace_init>

  //fault_test_by_unalign();
  //fault_test_by_div0();
  func_a();
 800120a:	f7ff ffaa 	bl	8001162 <func_a>
  while (1)
  {
	  printf("hello\n");
 800120e:	480e      	ldr	r0, [pc, #56]	@ (8001248 <main+0xc8>)
 8001210:	f005 fc34 	bl	8006a7c <puts>
	  HAL_Delay(1000);
 8001214:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001218:	f000 fcfc 	bl	8001c14 <HAL_Delay>
	  printf("hello\n");
 800121c:	bf00      	nop
 800121e:	e7f6      	b.n	800120e <main+0x8e>
 8001220:	2000028c 	.word	0x2000028c
 8001224:	080085fc 	.word	0x080085fc
 8001228:	080086a8 	.word	0x080086a8
 800122c:	0800860c 	.word	0x0800860c
 8001230:	08008620 	.word	0x08008620
 8001234:	0800862c 	.word	0x0800862c
 8001238:	08008638 	.word	0x08008638
 800123c:	08008670 	.word	0x08008670
 8001240:	08008678 	.word	0x08008678
 8001244:	08008680 	.word	0x08008680
 8001248:	0800868c 	.word	0x0800868c

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09e      	sub	sp, #120	@ 0x78
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	2260      	movs	r2, #96	@ 0x60
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f005 fd0e 	bl	8006c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001270:	2000      	movs	r0, #0
 8001272:	f001 f8bb 	bl	80023ec <HAL_PWREx_ControlVoltageScaling>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800127c:	f000 f89a 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001280:	2310      	movs	r3, #16
 8001282:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001288:	2310      	movs	r3, #16
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800128c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001292:	2300      	movs	r3, #0
 8001294:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4618      	mov	r0, r3
 800129c:	f001 f9a2 	bl	80025e4 <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80012a6:	f000 f885 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012aa:	231f      	movs	r3, #31
 80012ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 f868 	bl	800339c <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012d2:	f000 f86f 	bl	80013b4 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3778      	adds	r7, #120	@ 0x78
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012e2:	f001 f96f 	bl	80025c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80012e6:	2002      	movs	r0, #2
 80012e8:	f001 f90c 	bl	8002504 <HAL_PWREx_ConfigSupply>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80012f2:	f000 f85f 	bl	80013b4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}

080012fa <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80012fe:	2000      	movs	r0, #0
 8001300:	f001 f844 	bl	800238c <HAL_ICACHE_ConfigAssociativityMode>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800130a:	f000 f853 	bl	80013b4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800130e:	f001 f85d 	bl	80023cc <HAL_ICACHE_Enable>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001318:	f000 f84c 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <MX_GPIO_Init+0x6c>)
 8001328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132c:	4a17      	ldr	r2, [pc, #92]	@ (800138c <MX_GPIO_Init+0x6c>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_GPIO_Init+0x6c>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_GPIO_Init+0x6c>)
 8001346:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134a:	4a10      	ldr	r2, [pc, #64]	@ (800138c <MX_GPIO_Init+0x6c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001354:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <MX_GPIO_Init+0x6c>)
 8001356:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <MX_GPIO_Init+0x6c>)
 8001364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001368:	4a08      	ldr	r2, [pc, #32]	@ (800138c <MX_GPIO_Init+0x6c>)
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_GPIO_Init+0x6c>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	46020c00 	.word	0x46020c00

08001390 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013a2:	f000 fc17 	bl	8001bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40014800 	.word	0x40014800

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <Error_Handler+0x8>

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_MspInit+0x34>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013cc:	4a09      	ldr	r2, [pc, #36]	@ (80013f4 <HAL_MspInit+0x34>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <HAL_MspInit+0x34>)
 80013d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80013e4:	2004      	movs	r0, #4
 80013e6:	f000 fce6 	bl	8001db6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	46020c00 	.word	0x46020c00

080013f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001408:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <HAL_InitTick+0xcc>)
 800140a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800140e:	4a2d      	ldr	r2, [pc, #180]	@ (80014c4 <HAL_InitTick+0xcc>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001414:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001418:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <HAL_InitTick+0xcc>)
 800141a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800141e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001426:	f107 0210 	add.w	r2, r7, #16
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fafd 	bl	8003a30 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001436:	f002 fad3 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 800143a:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800143c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800143e:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <HAL_InitTick+0xd0>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	3b01      	subs	r3, #1
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <HAL_InitTick+0xd4>)
 800144c:	4a20      	ldr	r2, [pc, #128]	@ (80014d0 <HAL_InitTick+0xd8>)
 800144e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <HAL_InitTick+0xd4>)
 8001452:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001456:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001458:	4a1c      	ldr	r2, [pc, #112]	@ (80014cc <HAL_InitTick+0xd4>)
 800145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_InitTick+0xd4>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <HAL_InitTick+0xd4>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800146a:	4818      	ldr	r0, [pc, #96]	@ (80014cc <HAL_InitTick+0xd4>)
 800146c:	f004 f962 	bl	8005734 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001476:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800147a:	2b00      	cmp	r3, #0
 800147c:	d118      	bne.n	80014b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800147e:	4813      	ldr	r0, [pc, #76]	@ (80014cc <HAL_InitTick+0xd4>)
 8001480:	f004 f9ba 	bl	80057f8 <HAL_TIM_Base_Start_IT>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800148a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10e      	bne.n	80014b0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d808      	bhi.n	80014aa <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	2047      	movs	r0, #71	@ 0x47
 800149e:	f000 fc95 	bl	8001dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a2:	4a0c      	ldr	r2, [pc, #48]	@ (80014d4 <HAL_InitTick+0xdc>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e002      	b.n	80014b0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80014b0:	2047      	movs	r0, #71	@ 0x47
 80014b2:	f000 fca5 	bl	8001e00 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80014b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3738      	adds	r7, #56	@ 0x38
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	46020c00 	.word	0x46020c00
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	2000029c 	.word	0x2000029c
 80014d0:	40014800 	.word	0x40014800
 80014d4:	20000020 	.word	0x20000020

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <NMI_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001534:	2000      	movs	r0, #0
 8001536:	f000 fa1b 	bl	8001970 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <TIM17_IRQHandler+0x10>)
 8001546:	f004 f9f7 	bl	8005938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000029c 	.word	0x2000029c

08001554 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e00a      	b.n	800157c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001566:	f3af 8000 	nop.w
 800156a:	4601      	mov	r1, r0
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	b2ca      	uxtb	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf0      	blt.n	8001566 <_read+0x12>
  }

  return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e009      	b.n	80015b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fa67 	bl	8001a7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf1      	blt.n	80015a0 <_write+0x12>
  }
  return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_close>:

int _close(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ee:	605a      	str	r2, [r3, #4]
  return 0;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_isatty>:

int _isatty(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	@ (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f005 fb6e 	bl	8006d40 <__errno>
 8001664:	4603      	mov	r3, r0
 8001666:	220c      	movs	r2, #12
 8001668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4a05      	ldr	r2, [pc, #20]	@ (8001694 <_sbrk+0x64>)
 8001680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200c0000 	.word	0x200c0000
 8001690:	00000400 	.word	0x00000400
 8001694:	200002e8 	.word	0x200002e8
 8001698:	200004e0 	.word	0x200004e0

0800169c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016a0:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <SystemInit+0x68>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a6:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <SystemInit+0x68>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <SystemInit+0x6c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <SystemInit+0x6c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <SystemInit+0x6c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <SystemInit+0x6c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80016c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <SystemInit+0x6c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <SystemInit+0x6c>)
 80016ce:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80016d2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80016d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <SystemInit+0x6c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <SystemInit+0x6c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <SystemInit+0x6c>)
 80016e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <SystemInit+0x6c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <SystemInit+0x68>)
 80016f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016f6:	609a      	str	r2, [r3, #8]
  #endif
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	46020c00 	.word	0x46020c00

0800170c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001744 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001710:	f7ff ffc4 	bl	800169c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001714:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001716:	e003      	b.n	8001720 <LoopCopyDataInit>

08001718 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800171a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800171c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800171e:	3104      	adds	r1, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001720:	480a      	ldr	r0, [pc, #40]	@ (800174c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001724:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001726:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001728:	d3f6      	bcc.n	8001718 <CopyDataInit>
	ldr	r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <LoopForever+0x12>)
	b	LoopFillZerobss
 800172c:	e002      	b.n	8001734 <LoopFillZerobss>

0800172e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800172e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001730:	f842 3b04 	str.w	r3, [r2], #4

08001734 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <LoopForever+0x16>)
	cmp	r2, r3
 8001736:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001738:	d3f9      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f005 fb07 	bl	8006d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f7ff fd1f 	bl	8001180 <main>

08001742 <LoopForever>:

LoopForever:
    b LoopForever
 8001742:	e7fe      	b.n	8001742 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001744:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001748:	080087f0 	.word	0x080087f0
	ldr	r0, =_sdata
 800174c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001750:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001754:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8001758:	200004e0 	.word	0x200004e0

0800175c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_IRQHandler>
	...

08001760 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08e      	sub	sp, #56	@ 0x38
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800176a:	2300      	movs	r3, #0
 800176c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d009      	beq.n	800178c <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <BSP_LED_Init+0x2c>
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d003      	beq.n	800178c <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001784:	f06f 0301 	mvn.w	r3, #1
 8001788:	637b      	str	r3, [r7, #52]	@ 0x34
 800178a:	e06e      	b.n	800186a <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d10f      	bne.n	80017b2 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001792:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <BSP_LED_Init+0x114>)
 8001794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001798:	4a36      	ldr	r2, [pc, #216]	@ (8001874 <BSP_LED_Init+0x114>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017a2:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <BSP_LED_Init+0x114>)
 80017a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	e046      	b.n	8001840 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10f      	bne.n	80017d8 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80017b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001874 <BSP_LED_Init+0x114>)
 80017ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017be:	4a2d      	ldr	r2, [pc, #180]	@ (8001874 <BSP_LED_Init+0x114>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <BSP_LED_Init+0x114>)
 80017ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	e033      	b.n	8001840 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d8:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <BSP_LED_Init+0x114>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d110      	bne.n	8001808 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <BSP_LED_Init+0x114>)
 80017e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ec:	4a21      	ldr	r2, [pc, #132]	@ (8001874 <BSP_LED_Init+0x114>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <BSP_LED_Init+0x114>)
 80017f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001808:	f000 fecc 	bl	80025a4 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 800180c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <BSP_LED_Init+0x114>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001818:	4a16      	ldr	r2, [pc, #88]	@ (8001874 <BSP_LED_Init+0x114>)
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001822:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <BSP_LED_Init+0x114>)
 8001824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001828:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <BSP_LED_Init+0x114>)
 800182a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800182e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <BSP_LED_Init+0x114>)
 8001834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <BSP_LED_Init+0x118>)
 8001844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001848:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4a08      	ldr	r2, [pc, #32]	@ (800187c <BSP_LED_Init+0x11c>)
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	f107 021c 	add.w	r2, r7, #28
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fbb9 	bl	8001fdc <HAL_GPIO_Init>
  }

  return ret;
 800186a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800186c:	4618      	mov	r0, r3
 800186e:	3738      	adds	r7, #56	@ 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	46020c00 	.word	0x46020c00
 8001878:	08008708 	.word	0x08008708
 800187c:	20000008 	.word	0x20000008

08001880 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	460a      	mov	r2, r1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	4613      	mov	r3, r2
 800188e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001890:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <BSP_PB_Init+0xd4>)
 8001892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001896:	4a2f      	ldr	r2, [pc, #188]	@ (8001954 <BSP_PB_Init+0xd4>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <BSP_PB_Init+0xd4>)
 80018a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80018ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018b4:	2302      	movs	r3, #2
 80018b6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10c      	bne.n	80018dc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4a23      	ldr	r2, [pc, #140]	@ (8001958 <BSP_PB_Init+0xd8>)
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	f107 020c 	add.w	r2, r7, #12
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fb81 	bl	8001fdc <HAL_GPIO_Init>
 80018da:	e036      	b.n	800194a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <BSP_PB_Init+0xdc>)
 80018de:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <BSP_PB_Init+0xd8>)
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	f107 020c 	add.w	r2, r7, #12
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fb74 	bl	8001fdc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018f4:	79fa      	ldrb	r2, [r7, #7]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4a18      	ldr	r2, [pc, #96]	@ (8001960 <BSP_PB_Init+0xe0>)
 8001900:	441a      	add	r2, r3
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4917      	ldr	r1, [pc, #92]	@ (8001964 <BSP_PB_Init+0xe4>)
 8001906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800190a:	4619      	mov	r1, r3
 800190c:	4610      	mov	r0, r2
 800190e:	f000 fb09 	bl	8001f24 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4a10      	ldr	r2, [pc, #64]	@ (8001960 <BSP_PB_Init+0xe0>)
 800191e:	1898      	adds	r0, r3, r2
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4a11      	ldr	r2, [pc, #68]	@ (8001968 <BSP_PB_Init+0xe8>)
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	461a      	mov	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	f000 face 	bl	8001ecc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001930:	2018      	movs	r0, #24
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <BSP_PB_Init+0xec>)
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	f000 fa45 	bl	8001dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001942:	2318      	movs	r3, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fa5b 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	46020c00 	.word	0x46020c00
 8001958:	20000014 	.word	0x20000014
 800195c:	10110000 	.word	0x10110000
 8001960:	200002ec 	.word	0x200002ec
 8001964:	08008710 	.word	0x08008710
 8001968:	20000018 	.word	0x20000018
 800196c:	2000001c 	.word	0x2000001c

08001970 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800197a:	79fa      	ldrb	r2, [r7, #7]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <BSP_PB_IRQHandler+0x28>)
 8001986:	4413      	add	r3, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fadf 	bl	8001f4c <HAL_EXTI_IRQHandler>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200002ec 	.word	0x200002ec

0800199c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019ca:	f06f 0301 	mvn.w	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e018      	b.n	8001a04 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2294      	movs	r2, #148	@ 0x94
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <BSP_COM_Init+0x5c>)
 80019dc:	4413      	add	r3, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f870 	bl	8001ac4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2294      	movs	r2, #148	@ 0x94
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a08      	ldr	r2, [pc, #32]	@ (8001a10 <BSP_COM_Init+0x5c>)
 80019ee:	4413      	add	r3, r2
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f80e 	bl	8001a14 <MX_USART1_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019fe:	f06f 0303 	mvn.w	r3, #3
 8001a02:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002f8 	.word	0x200002f8

08001a14 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <MX_USART1_Init+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	220c      	movs	r2, #12
 8001a32:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	895b      	ldrh	r3, [r3, #10]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	891b      	ldrh	r3, [r3, #8]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	899b      	ldrh	r3, [r3, #12]
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a60:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f004 fa23 	bl	8005eb4 <HAL_UART_Init>
 8001a6e:	4603      	mov	r3, r0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000004 	.word	0x20000004

08001a7c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <__io_putchar+0x30>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2394      	movs	r3, #148	@ 0x94
 8001a8c:	fb02 f303 	mul.w	r3, r2, r3
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <__io_putchar+0x34>)
 8001a92:	1898      	adds	r0, r3, r2
 8001a94:	1d39      	adds	r1, r7, #4
 8001a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f004 fa64 	bl	8005f68 <HAL_UART_Transmit>
  return ch;
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000038c 	.word	0x2000038c
 8001ab0:	200002f8 	.word	0x200002f8

08001ab4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff ff6f 	bl	800199c <BSP_PB_Callback>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001acc:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad2:	4a26      	ldr	r2, [pc, #152]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b08:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b14:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <COM1_MspInit+0xa8>)
 8001b1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b2a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b30:	2302      	movs	r3, #2
 8001b32:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <COM1_MspInit+0xac>)
 8001b44:	f000 fa4a 	bl	8001fdc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b4c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001b52:	2307      	movs	r3, #7
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <COM1_MspInit+0xac>)
 8001b5e:	f000 fa3d 	bl	8001fdc <HAL_GPIO_Init>
}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	@ 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	46020c00 	.word	0x46020c00
 8001b70:	42020000 	.word	0x42020000

08001b74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_Init+0x50>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <HAL_Init+0x50>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f916 	bl	8001db6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b8a:	f001 fdf9 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_Init+0x54>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	490c      	ldr	r1, [pc, #48]	@ (8001bcc <HAL_Init+0x58>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd0 <HAL_Init+0x5c>)
 8001ba2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ba4:	2004      	movs	r0, #4
 8001ba6:	f000 f939 	bl	8001e1c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001baa:	2007      	movs	r0, #7
 8001bac:	f7ff fc24 	bl	80013f8 <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e002      	b.n	8001bc0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bba:	f7ff fc01 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	46020c00 	.word	0x46020c00
 8001bcc:	080086b0 	.word	0x080086b0
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_IncTick+0x20>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000024 	.word	0x20000024
 8001bf8:	20000390 	.word	0x20000390

08001bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <HAL_GetTick+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000390 	.word	0x20000390

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff ffee 	bl	8001bfc <HAL_GetTick>
 8001c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_Delay+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c3a:	bf00      	nop
 8001c3c:	f7ff ffde 	bl	8001bfc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000024 	.word	0x20000024

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	@ (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	@ (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff4c 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dda:	f7ff ff63 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001dde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7ff ffb3 	bl	8001d50 <NVIC_EncodePriority>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff82 	bl	8001cfc <__NVIC_SetPriority>
}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff56 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d844      	bhi.n	8001eb4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e30 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001e53 	.word	0x08001e53
 8001e34:	08001e71 	.word	0x08001e71
 8001e38:	08001e93 	.word	0x08001e93
 8001e3c:	08001eb5 	.word	0x08001eb5
 8001e40:	08001e45 	.word	0x08001e45
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6013      	str	r3, [r2, #0]
      break;
 8001e50:	e031      	b.n	8001eb6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e64:	4a18      	ldr	r2, [pc, #96]	@ (8001ec8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e66:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e6e:	e022      	b.n	8001eb6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a13      	ldr	r2, [pc, #76]	@ (8001ec4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e82:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e86:	4a10      	ldr	r2, [pc, #64]	@ (8001ec8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e90:	e011      	b.n	8001eb6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ea8:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001eaa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001eb2:	e000      	b.n	8001eb6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001eb4:	bf00      	nop
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010
 8001ec8:	46020c00 	.word	0x46020c00

08001ecc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d011      	beq.n	8001f08 <HAL_EXTI_RegisterCallback+0x3c>
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	dc13      	bgt.n	8001f10 <HAL_EXTI_RegisterCallback+0x44>
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_EXTI_RegisterCallback+0x26>
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d007      	beq.n	8001f00 <HAL_EXTI_RegisterCallback+0x34>
 8001ef0:	e00e      	b.n	8001f10 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	609a      	str	r2, [r3, #8]
      break;
 8001efe:	e00a      	b.n	8001f16 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]
      break;
 8001f06:	e006      	b.n	8001f16 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	75fb      	strb	r3, [r7, #23]
      break;
 8001f14:	bf00      	nop
  }

  return status;
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e003      	b.n	8001f40 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	2201      	movs	r2, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <HAL_EXTI_IRQHandler+0x88>)
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <HAL_EXTI_IRQHandler+0x8c>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4798      	blx	r3
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	4602200c 	.word	0x4602200c
 8001fd8:	46022010 	.word	0x46022010

08001fdc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fee:	e1ba      	b.n	8002366 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 81aa 	beq.w	8002360 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a55      	ldr	r2, [pc, #340]	@ (8002164 <HAL_GPIO_Init+0x188>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d15d      	bne.n	80020d0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800201a:	2201      	movs	r2, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	4013      	ands	r3, r2
 8002028:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	4313      	orrs	r3, r2
 800203c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002044:	4a48      	ldr	r2, [pc, #288]	@ (8002168 <HAL_GPIO_Init+0x18c>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800204c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800204e:	4a46      	ldr	r2, [pc, #280]	@ (8002168 <HAL_GPIO_Init+0x18c>)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	3208      	adds	r2, #8
 8002062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002066:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	4013      	ands	r3, r2
 800207c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220b      	movs	r2, #11
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	4313      	orrs	r3, r2
 8002090:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	3208      	adds	r2, #8
 800209a:	69f9      	ldr	r1, [r7, #28]
 800209c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2202      	movs	r2, #2
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e067      	b.n	80021a0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x104>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b12      	cmp	r3, #18
 80020de:	d145      	bne.n	800216c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	4013      	ands	r3, r2
 8002102:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	4313      	orrs	r3, r2
 800211c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69f9      	ldr	r1, [r7, #28]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4013      	ands	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	4313      	orrs	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e01e      	b.n	80021a0 <HAL_GPIO_Init+0x1c4>
 8002162:	bf00      	nop
 8002164:	46020000 	.word	0x46020000
 8002168:	08008714 	.word	0x08008714
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4013      	ands	r3, r2
 8002182:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	4313      	orrs	r3, r2
 8002198:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d00b      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b4:	2b11      	cmp	r3, #17
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b12      	cmp	r3, #18
 80021be:	d130      	bne.n	8002222 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80021f6:	2201      	movs	r2, #1
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	4013      	ands	r3, r2
 8002204:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 0201 	and.w	r2, r3, #1
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	4313      	orrs	r3, r2
 800221a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d017      	beq.n	800225a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	4013      	ands	r3, r2
 8002240:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	4313      	orrs	r3, r2
 8002252:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d07c      	beq.n	8002360 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002266:	4a47      	ldr	r2, [pc, #284]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3318      	adds	r3, #24
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	4013      	ands	r3, r2
 8002288:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0a9a      	lsrs	r2, r3, #10
 800228e:	4b3e      	ldr	r3, [pc, #248]	@ (8002388 <HAL_GPIO_Init+0x3ac>)
 8002290:	4013      	ands	r3, r2
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	00d2      	lsls	r2, r2, #3
 800229a:	4093      	lsls	r3, r2
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022a2:	4938      	ldr	r1, [pc, #224]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3318      	adds	r3, #24
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022b0:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	4013      	ands	r3, r2
 80022be:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80022d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80022da:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80022fe:	4a21      	ldr	r2, [pc, #132]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002304:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 8002306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	4013      	ands	r3, r2
 8002314:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800232a:	4a16      	ldr	r2, [pc, #88]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002332:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 8002334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002338:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	4013      	ands	r3, r2
 8002342:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f ae3d 	bne.w	8001ff0 <HAL_GPIO_Init+0x14>
  }
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	3724      	adds	r7, #36	@ 0x24
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	46022000 	.word	0x46022000
 8002388:	002f7f7f 	.word	0x002f7f7f

0800238c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e007      	b.n	80023ba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80023aa:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0204 	bic.w	r2, r3, #4
 80023b2:	4905      	ldr	r1, [pc, #20]	@ (80023c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40030400 	.word	0x40030400

080023cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_ICACHE_Enable+0x1c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <HAL_ICACHE_Enable+0x1c>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40030400 	.word	0x40030400

080023ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80023f4:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023fc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	d10b      	bne.n	800241e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240c:	d905      	bls.n	800241a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800240e:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	4a32      	ldr	r2, [pc, #200]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002418:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e057      	b.n	80024ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002424:	d90a      	bls.n	800243c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002426:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	4a2a      	ldr	r2, [pc, #168]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002438:	60d3      	str	r3, [r2, #12]
 800243a:	e007      	b.n	800244c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800243c:	4b27      	ldr	r3, [pc, #156]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002444:	4925      	ldr	r1, [pc, #148]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4313      	orrs	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800244c:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a24      	ldr	r2, [pc, #144]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	2232      	movs	r2, #50	@ 0x32
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	4a21      	ldr	r2, [pc, #132]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	099b      	lsrs	r3, r3, #6
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800246a:	e002      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3b01      	subs	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_PWREx_ControlVoltageScaling+0x98>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f3      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01b      	beq.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a15      	ldr	r2, [pc, #84]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	2232      	movs	r2, #50	@ 0x32
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	4a11      	ldr	r2, [pc, #68]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	3301      	adds	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80024a8:	e002      	b.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80024b0:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80024b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f3      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e000      	b.n	80024ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	46020800 	.word	0x46020800
 80024e0:	20000000 	.word	0x20000000
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80024ec:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <HAL_PWREx_GetVoltageRange+0x18>)
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	46020800 	.word	0x46020800

08002504 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800250c:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <HAL_PWREx_ConfigSupply+0x94>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a22      	ldr	r2, [pc, #136]	@ (800259c <HAL_PWREx_ConfigSupply+0x98>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	2232      	movs	r2, #50	@ 0x32
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	4a1f      	ldr	r2, [pc, #124]	@ (800259c <HAL_PWREx_ConfigSupply+0x98>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d113      	bne.n	8002558 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8002536:	f023 0302 	bic.w	r3, r3, #2
 800253a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800253c:	e002      	b.n	8002544 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3b01      	subs	r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002544:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	d116      	bne.n	800257e <HAL_PWREx_ConfigSupply+0x7a>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f3      	bne.n	800253e <HAL_PWREx_ConfigSupply+0x3a>
 8002556:	e012      	b.n	800257e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002564:	e002      	b.n	800256c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3b01      	subs	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800256e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <HAL_PWREx_ConfigSupply+0x7a>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f3      	bne.n	8002566 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e000      	b.n	800258a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000000 	.word	0x20000000
 800259c:	10624dd3 	.word	0x10624dd3
 80025a0:	46020800 	.word	0x46020800

080025a4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80025ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80025b2:	6113      	str	r3, [r2, #16]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	46020800 	.word	0x46020800

080025c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	46020800 	.word	0x46020800

080025e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08e      	sub	sp, #56	@ 0x38
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f000 bec8 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4b99      	ldr	r3, [pc, #612]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	4b96      	ldr	r3, [pc, #600]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 816c 	beq.w	80028f8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_RCC_OscConfig+0x52>
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f040 80de 	bne.w	80027ea <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800262e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 80da 	bne.w	80027ea <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f000 bea5 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002648:	4b86      	ldr	r3, [pc, #536]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <HAL_RCC_OscConfig+0x7a>
 8002654:	4b83      	ldr	r3, [pc, #524]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800265c:	e005      	b.n	800266a <HAL_RCC_OscConfig+0x86>
 800265e:	4b81      	ldr	r3, [pc, #516]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800266a:	4293      	cmp	r3, r2
 800266c:	d255      	bcs.n	800271a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800266e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fa11 	bl	8003aa0 <RCC_SetFlashLatencyFromMSIRange>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f000 be82 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800268a:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4a75      	ldr	r2, [pc, #468]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002690:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002694:	6093      	str	r3, [r2, #8]
 8002696:	4b73      	ldr	r3, [pc, #460]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	4970      	ldr	r1, [pc, #448]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80026b0:	d309      	bcc.n	80026c6 <HAL_RCC_OscConfig+0xe2>
 80026b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f023 021f 	bic.w	r2, r3, #31
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4969      	ldr	r1, [pc, #420]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60cb      	str	r3, [r1, #12]
 80026c4:	e07e      	b.n	80027c4 <HAL_RCC_OscConfig+0x1e0>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da0a      	bge.n	80026e4 <HAL_RCC_OscConfig+0x100>
 80026ce:	4b65      	ldr	r3, [pc, #404]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	015b      	lsls	r3, r3, #5
 80026dc:	4961      	ldr	r1, [pc, #388]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
 80026e2:	e06f      	b.n	80027c4 <HAL_RCC_OscConfig+0x1e0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ec:	d30a      	bcc.n	8002704 <HAL_RCC_OscConfig+0x120>
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	029b      	lsls	r3, r3, #10
 80026fc:	4959      	ldr	r1, [pc, #356]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
 8002702:	e05f      	b.n	80027c4 <HAL_RCC_OscConfig+0x1e0>
 8002704:	4b57      	ldr	r3, [pc, #348]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	03db      	lsls	r3, r3, #15
 8002712:	4954      	ldr	r1, [pc, #336]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002714:	4313      	orrs	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	e054      	b.n	80027c4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800271a:	4b52      	ldr	r3, [pc, #328]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	4a51      	ldr	r2, [pc, #324]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002720:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002724:	6093      	str	r3, [r2, #8]
 8002726:	4b4f      	ldr	r3, [pc, #316]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	494c      	ldr	r1, [pc, #304]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002740:	d309      	bcc.n	8002756 <HAL_RCC_OscConfig+0x172>
 8002742:	4b48      	ldr	r3, [pc, #288]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 021f 	bic.w	r2, r3, #31
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4945      	ldr	r1, [pc, #276]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002750:	4313      	orrs	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
 8002754:	e028      	b.n	80027a8 <HAL_RCC_OscConfig+0x1c4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	da0a      	bge.n	8002774 <HAL_RCC_OscConfig+0x190>
 800275e:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	015b      	lsls	r3, r3, #5
 800276c:	493d      	ldr	r1, [pc, #244]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800276e:	4313      	orrs	r3, r2
 8002770:	60cb      	str	r3, [r1, #12]
 8002772:	e019      	b.n	80027a8 <HAL_RCC_OscConfig+0x1c4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277c:	d30a      	bcc.n	8002794 <HAL_RCC_OscConfig+0x1b0>
 800277e:	4b39      	ldr	r3, [pc, #228]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4935      	ldr	r1, [pc, #212]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800278e:	4313      	orrs	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]
 8002792:	e009      	b.n	80027a8 <HAL_RCC_OscConfig+0x1c4>
 8002794:	4b33      	ldr	r3, [pc, #204]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	03db      	lsls	r3, r3, #15
 80027a2:	4930      	ldr	r1, [pc, #192]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f974 	bl	8003aa0 <RCC_SetFlashLatencyFromMSIRange>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f000 bde5 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80027c4:	f001 f8de 	bl	8003984 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027c8:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <HAL_RCC_OscConfig+0x284>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fe13 	bl	80013f8 <HAL_InitTick>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80027d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 808a 	beq.w	80028f6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80027e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027e6:	f000 bdd2 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d066      	beq.n	80028c0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80027f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027fe:	f7ff f9fd 	bl	8001bfc <HAL_GetTick>
 8002802:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002804:	e009      	b.n	800281a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002806:	f7ff f9f9 	bl	8001bfc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d902      	bls.n	800281a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	f000 bdba 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800281a:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0ef      	beq.n	8002806 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002826:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4a0e      	ldr	r2, [pc, #56]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800282c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002830:	6093      	str	r3, [r2, #8]
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	4909      	ldr	r1, [pc, #36]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800284c:	d30e      	bcc.n	800286c <HAL_RCC_OscConfig+0x288>
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f023 021f 	bic.w	r2, r3, #31
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4902      	ldr	r1, [pc, #8]	@ (8002864 <HAL_RCC_OscConfig+0x280>)
 800285c:	4313      	orrs	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
 8002860:	e04a      	b.n	80028f8 <HAL_RCC_OscConfig+0x314>
 8002862:	bf00      	nop
 8002864:	46020c00 	.word	0x46020c00
 8002868:	20000020 	.word	0x20000020
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	da0a      	bge.n	800288a <HAL_RCC_OscConfig+0x2a6>
 8002874:	4b98      	ldr	r3, [pc, #608]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	015b      	lsls	r3, r3, #5
 8002882:	4995      	ldr	r1, [pc, #596]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
 8002888:	e036      	b.n	80028f8 <HAL_RCC_OscConfig+0x314>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002892:	d30a      	bcc.n	80028aa <HAL_RCC_OscConfig+0x2c6>
 8002894:	4b90      	ldr	r3, [pc, #576]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	029b      	lsls	r3, r3, #10
 80028a2:	498d      	ldr	r1, [pc, #564]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
 80028a8:	e026      	b.n	80028f8 <HAL_RCC_OscConfig+0x314>
 80028aa:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	03db      	lsls	r3, r3, #15
 80028b8:	4987      	ldr	r1, [pc, #540]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60cb      	str	r3, [r1, #12]
 80028be:	e01b      	b.n	80028f8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80028c0:	4b85      	ldr	r3, [pc, #532]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a84      	ldr	r2, [pc, #528]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80028cc:	f7ff f996 	bl	8001bfc <HAL_GetTick>
 80028d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80028d2:	e009      	b.n	80028e8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028d4:	f7ff f992 	bl	8001bfc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d902      	bls.n	80028e8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	f000 bd53 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80028e8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ef      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2f0>
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80028f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 808b 	beq.w	8002a1c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002908:	2b08      	cmp	r3, #8
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x334>
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d109      	bne.n	8002926 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	2b03      	cmp	r3, #3
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d17d      	bne.n	8002a1c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	f000 bd34 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x35a>
 8002930:	4b69      	ldr	r3, [pc, #420]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a68      	ldr	r2, [pc, #416]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e041      	b.n	80029c2 <HAL_RCC_OscConfig+0x3de>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002946:	d112      	bne.n	800296e <HAL_RCC_OscConfig+0x38a>
 8002948:	4b63      	ldr	r3, [pc, #396]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a62      	ldr	r2, [pc, #392]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800294e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b60      	ldr	r3, [pc, #384]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5f      	ldr	r2, [pc, #380]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e029      	b.n	80029c2 <HAL_RCC_OscConfig+0x3de>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002976:	d112      	bne.n	800299e <HAL_RCC_OscConfig+0x3ba>
 8002978:	4b57      	ldr	r3, [pc, #348]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a56      	ldr	r2, [pc, #344]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800297e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b54      	ldr	r3, [pc, #336]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a53      	ldr	r2, [pc, #332]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b51      	ldr	r3, [pc, #324]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a50      	ldr	r2, [pc, #320]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e011      	b.n	80029c2 <HAL_RCC_OscConfig+0x3de>
 800299e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b48      	ldr	r3, [pc, #288]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a47      	ldr	r2, [pc, #284]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80029c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d014      	beq.n	80029f4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80029ca:	f7ff f917 	bl	8001bfc <HAL_GetTick>
 80029ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d0:	e009      	b.n	80029e6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d2:	f7ff f913 	bl	8001bfc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	@ 0x64
 80029de:	d902      	bls.n	80029e6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	f000 bcd4 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0ef      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3ee>
 80029f2:	e013      	b.n	8002a1c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80029f4:	f7ff f902 	bl	8001bfc <HAL_GetTick>
 80029f8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029fa:	e009      	b.n	8002a10 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7ff f8fe 	bl	8001bfc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d902      	bls.n	8002a10 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	f000 bcbf 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a10:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ef      	bne.n	80029fc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d05f      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x456>
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	d114      	bne.n	8002a5e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d111      	bne.n	8002a5e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f000 bca3 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b23      	ldr	r3, [pc, #140]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	4920      	ldr	r1, [pc, #128]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a5c:	e044      	b.n	8002ae8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d024      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002a66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a70:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a72:	f7ff f8c3 	bl	8001bfc <HAL_GetTick>
 8002a76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a78:	e009      	b.n	8002a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7ff f8bf 	bl	8001bfc <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d902      	bls.n	8002a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f000 bc80 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ef      	beq.n	8002a7a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	490b      	ldr	r1, [pc, #44]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	610b      	str	r3, [r1, #16]
 8002aae:	e01b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002ab0:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002abc:	f7ff f89e 	bl	8001bfc <HAL_GetTick>
 8002ac0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7ff f89a 	bl	8001bfc <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d904      	bls.n	8002adc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f000 bc5b 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
 8002ad8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002adc:	4baf      	ldr	r3, [pc, #700]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ed      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80c8 	beq.w	8002c86 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afc:	4ba7      	ldr	r3, [pc, #668]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d111      	bne.n	8002b2e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	4ba4      	ldr	r3, [pc, #656]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b10:	4aa2      	ldr	r2, [pc, #648]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002b1a:	4ba0      	ldr	r3, [pc, #640]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8002da0 <HAL_RCC_OscConfig+0x7bc>)
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d119      	bne.n	8002b6e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b3a:	4b99      	ldr	r3, [pc, #612]	@ (8002da0 <HAL_RCC_OscConfig+0x7bc>)
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	4a98      	ldr	r2, [pc, #608]	@ (8002da0 <HAL_RCC_OscConfig+0x7bc>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7ff f859 	bl	8001bfc <HAL_GetTick>
 8002b4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b4c:	e009      	b.n	8002b62 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7ff f855 	bl	8001bfc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d902      	bls.n	8002b62 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f000 bc16 	b.w	800338e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b62:	4b8f      	ldr	r3, [pc, #572]	@ (8002da0 <HAL_RCC_OscConfig+0x7bc>)
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0ef      	beq.n	8002b4e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d05f      	beq.n	8002c36 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002b76:	4b89      	ldr	r3, [pc, #548]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b7c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d037      	beq.n	8002bfc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e3f4      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002bae:	4b7b      	ldr	r3, [pc, #492]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bb4:	4a79      	ldr	r2, [pc, #484]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002bb6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002bba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002bbe:	f7ff f81d 	bl	8001bfc <HAL_GetTick>
 8002bc2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc6:	f7ff f819 	bl	8001bfc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e3da      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002bd8:	4b70      	ldr	r3, [pc, #448]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ef      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002be6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4969      	ldr	r1, [pc, #420]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002bfc:	4b67      	ldr	r3, [pc, #412]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c02:	4a66      	ldr	r2, [pc, #408]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002c04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002c0c:	f7fe fff6 	bl	8001bfc <HAL_GetTick>
 8002c10:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe fff2 	bl	8001bfc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e3b3      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002c26:	4b5d      	ldr	r3, [pc, #372]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ef      	beq.n	8002c14 <HAL_RCC_OscConfig+0x630>
 8002c34:	e01b      	b.n	8002c6e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002c36:	4b59      	ldr	r3, [pc, #356]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c3c:	4a57      	ldr	r2, [pc, #348]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002c3e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002c42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002c46:	f7fe ffd9 	bl	8001bfc <HAL_GetTick>
 8002c4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7fe ffd5 	bl	8001bfc <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e396      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002c60:	4b4e      	ldr	r3, [pc, #312]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1ef      	bne.n	8002c4e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c6e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c76:	4b49      	ldr	r3, [pc, #292]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7c:	4a47      	ldr	r2, [pc, #284]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8111 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9a:	4b40      	ldr	r3, [pc, #256]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cae:	4a3b      	ldr	r2, [pc, #236]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002cb8:	4b38      	ldr	r3, [pc, #224]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ccc:	4b34      	ldr	r3, [pc, #208]	@ (8002da0 <HAL_RCC_OscConfig+0x7bc>)
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d118      	bne.n	8002d0a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002cd8:	4b31      	ldr	r3, [pc, #196]	@ (8002da0 <HAL_RCC_OscConfig+0x7bc>)
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	4a30      	ldr	r2, [pc, #192]	@ (8002da0 <HAL_RCC_OscConfig+0x7bc>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce4:	f7fe ff8a 	bl	8001bfc <HAL_GetTick>
 8002ce8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fe ff86 	bl	8001bfc <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e347      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002cfe:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <HAL_RCC_OscConfig+0x7bc>)
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01f      	beq.n	8002d56 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d22:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d28:	4a1c      	ldr	r2, [pc, #112]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d32:	4b1a      	ldr	r3, [pc, #104]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d38:	4a18      	ldr	r2, [pc, #96]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d42:	e018      	b.n	8002d76 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d44:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d4a:	4a14      	ldr	r2, [pc, #80]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d54:	e00f      	b.n	8002d76 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d9c <HAL_RCC_OscConfig+0x7b8>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d057      	beq.n	8002e2e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002d7e:	f7fe ff3d 	bl	8001bfc <HAL_GetTick>
 8002d82:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d84:	e00e      	b.n	8002da4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe ff39 	bl	8001bfc <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d905      	bls.n	8002da4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e2f8      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
 8002d9c:	46020c00 	.word	0x46020c00
 8002da0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da4:	4b9c      	ldr	r3, [pc, #624]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0e9      	beq.n	8002d86 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002dbe:	4b96      	ldr	r3, [pc, #600]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dc4:	4a94      	ldr	r2, [pc, #592]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe ff14 	bl	8001bfc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e2d3      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002de6:	4b8c      	ldr	r3, [pc, #560]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ed      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x7ec>
 8002df4:	e053      	b.n	8002e9e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002df6:	4b88      	ldr	r3, [pc, #544]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dfc:	4a86      	ldr	r2, [pc, #536]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe fef8 	bl	8001bfc <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e2b7      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e1e:	4b7e      	ldr	r3, [pc, #504]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ed      	bne.n	8002e08 <HAL_RCC_OscConfig+0x824>
 8002e2c:	e037      	b.n	8002e9e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fee5 	bl	8001bfc <HAL_GetTick>
 8002e32:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe fee1 	bl	8001bfc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e2a0      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e4c:	4b72      	ldr	r3, [pc, #456]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ed      	bne.n	8002e36 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01a      	beq.n	8002e9e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e68:	4b6b      	ldr	r3, [pc, #428]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe febf 	bl	8001bfc <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e27e      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e90:	4b61      	ldr	r3, [pc, #388]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1ed      	bne.n	8002e7a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e9e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eac:	4a5a      	ldr	r2, [pc, #360]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002eae:	f023 0304 	bic.w	r3, r3, #4
 8002eb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d036      	beq.n	8002f30 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d019      	beq.n	8002efe <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002eca:	4b53      	ldr	r3, [pc, #332]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a52      	ldr	r2, [pc, #328]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002ed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ed4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ed6:	f7fe fe91 	bl	8001bfc <HAL_GetTick>
 8002eda:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ede:	f7fe fe8d 	bl	8001bfc <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e24e      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ef0:	4b49      	ldr	r3, [pc, #292]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x8fa>
 8002efc:	e018      	b.n	8002f30 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002efe:	4b46      	ldr	r3, [pc, #280]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a45      	ldr	r2, [pc, #276]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f08:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f0a:	f7fe fe77 	bl	8001bfc <HAL_GetTick>
 8002f0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f12:	f7fe fe73 	bl	8001bfc <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e234      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002f24:	4b3c      	ldr	r3, [pc, #240]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d036      	beq.n	8002faa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d019      	beq.n	8002f78 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002f44:	4b34      	ldr	r3, [pc, #208]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a33      	ldr	r2, [pc, #204]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f4e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f50:	f7fe fe54 	bl	8001bfc <HAL_GetTick>
 8002f54:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002f58:	f7fe fe50 	bl	8001bfc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e211      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x974>
 8002f76:	e018      	b.n	8002faa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002f78:	4b27      	ldr	r3, [pc, #156]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a26      	ldr	r2, [pc, #152]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f82:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f84:	f7fe fe3a 	bl	8001bfc <HAL_GetTick>
 8002f88:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fe36 	bl	8001bfc <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1f7      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d07f      	beq.n	80030b6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d062      	beq.n	8003084 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002fbe:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002fc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fc8:	6093      	str	r3, [r2, #8]
 8002fca:	4b13      	ldr	r3, [pc, #76]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	4910      	ldr	r1, [pc, #64]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002fe4:	d309      	bcc.n	8002ffa <HAL_RCC_OscConfig+0xa16>
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f023 021f 	bic.w	r2, r3, #31
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4909      	ldr	r1, [pc, #36]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60cb      	str	r3, [r1, #12]
 8002ff8:	e02a      	b.n	8003050 <HAL_RCC_OscConfig+0xa6c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	da0c      	bge.n	800301c <HAL_RCC_OscConfig+0xa38>
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	015b      	lsls	r3, r3, #5
 8003010:	4901      	ldr	r1, [pc, #4]	@ (8003018 <HAL_RCC_OscConfig+0xa34>)
 8003012:	4313      	orrs	r3, r2
 8003014:	60cb      	str	r3, [r1, #12]
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0xa6c>
 8003018:	46020c00 	.word	0x46020c00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003024:	d30a      	bcc.n	800303c <HAL_RCC_OscConfig+0xa58>
 8003026:	4ba1      	ldr	r3, [pc, #644]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	029b      	lsls	r3, r3, #10
 8003034:	499d      	ldr	r1, [pc, #628]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	60cb      	str	r3, [r1, #12]
 800303a:	e009      	b.n	8003050 <HAL_RCC_OscConfig+0xa6c>
 800303c:	4b9b      	ldr	r3, [pc, #620]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	03db      	lsls	r3, r3, #15
 800304a:	4998      	ldr	r1, [pc, #608]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800304c:	4313      	orrs	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003050:	4b96      	ldr	r3, [pc, #600]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a95      	ldr	r2, [pc, #596]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003056:	f043 0310 	orr.w	r3, r3, #16
 800305a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800305c:	f7fe fdce 	bl	8001bfc <HAL_GetTick>
 8003060:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003064:	f7fe fdca 	bl	8001bfc <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e18b      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003076:	4b8d      	ldr	r3, [pc, #564]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xa80>
 8003082:	e018      	b.n	80030b6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003084:	4b89      	ldr	r3, [pc, #548]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a88      	ldr	r2, [pc, #544]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800308a:	f023 0310 	bic.w	r3, r3, #16
 800308e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003090:	f7fe fdb4 	bl	8001bfc <HAL_GetTick>
 8003094:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003098:	f7fe fdb0 	bl	8001bfc <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e171      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80030aa:	4b80      	ldr	r3, [pc, #512]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8166 	beq.w	800338c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c6:	4b79      	ldr	r3, [pc, #484]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	f000 80f2 	beq.w	80032b8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f040 80c5 	bne.w	8003268 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b73      	ldr	r3, [pc, #460]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a72      	ldr	r2, [pc, #456]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80030ea:	f7fe fd87 	bl	8001bfc <HAL_GetTick>
 80030ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fd83 	bl	8001bfc <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e144      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003104:	4b69      	ldr	r3, [pc, #420]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003110:	4b66      	ldr	r3, [pc, #408]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d111      	bne.n	8003142 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	4b63      	ldr	r3, [pc, #396]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003124:	4a61      	ldr	r2, [pc, #388]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800312e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003142:	4b5b      	ldr	r3, [pc, #364]	@ (80032b0 <HAL_RCC_OscConfig+0xccc>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800314a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800314e:	d102      	bne.n	8003156 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003156:	4b56      	ldr	r3, [pc, #344]	@ (80032b0 <HAL_RCC_OscConfig+0xccc>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4a55      	ldr	r2, [pc, #340]	@ (80032b0 <HAL_RCC_OscConfig+0xccc>)
 800315c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003160:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003162:	4b52      	ldr	r3, [pc, #328]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800316a:	f023 0303 	bic.w	r3, r3, #3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003176:	3a01      	subs	r2, #1
 8003178:	0212      	lsls	r2, r2, #8
 800317a:	4311      	orrs	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003180:	430a      	orrs	r2, r1
 8003182:	494a      	ldr	r1, [pc, #296]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003184:	4313      	orrs	r3, r2
 8003186:	628b      	str	r3, [r1, #40]	@ 0x28
 8003188:	4b48      	ldr	r3, [pc, #288]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800318a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800318c:	4b49      	ldr	r3, [pc, #292]	@ (80032b4 <HAL_RCC_OscConfig+0xcd0>)
 800318e:	4013      	ands	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003194:	3a01      	subs	r2, #1
 8003196:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800319e:	3a01      	subs	r2, #1
 80031a0:	0252      	lsls	r2, r2, #9
 80031a2:	b292      	uxth	r2, r2
 80031a4:	4311      	orrs	r1, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031aa:	3a01      	subs	r2, #1
 80031ac:	0412      	lsls	r2, r2, #16
 80031ae:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0612      	lsls	r2, r2, #24
 80031bc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80031c0:	430a      	orrs	r2, r1
 80031c2:	493a      	ldr	r1, [pc, #232]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80031c8:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	4a37      	ldr	r2, [pc, #220]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80031ce:	f023 0310 	bic.w	r3, r3, #16
 80031d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	4a34      	ldr	r2, [pc, #208]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80031de:	4b33      	ldr	r3, [pc, #204]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80031e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e2:	4a32      	ldr	r2, [pc, #200]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80031e4:	f043 0310 	orr.w	r3, r3, #16
 80031e8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80031ea:	4b30      	ldr	r3, [pc, #192]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	f023 020c 	bic.w	r2, r3, #12
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f6:	492d      	ldr	r1, [pc, #180]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80031fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003204:	4b2a      	ldr	r3, [pc, #168]	@ (80032b0 <HAL_RCC_OscConfig+0xccc>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <HAL_RCC_OscConfig+0xccc>)
 800320a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800320e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003210:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003218:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321e:	4a23      	ldr	r2, [pc, #140]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b20      	ldr	r3, [pc, #128]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003232:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003234:	f7fe fce2 	bl	8001bfc <HAL_GetTick>
 8003238:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fcde 	bl	8001bfc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e09f      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800324e:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800325a:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800325c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325e:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003264:	6293      	str	r3, [r2, #40]	@ 0x28
 8003266:	e091      	b.n	800338c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0f      	ldr	r2, [pc, #60]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003274:	f7fe fcc2 	bl	8001bfc <HAL_GetTick>
 8003278:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe fcbe 	bl	8001bfc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e07f      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800329a:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 800329c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329e:	4a03      	ldr	r2, [pc, #12]	@ (80032ac <HAL_RCC_OscConfig+0xcc8>)
 80032a0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80032a4:	f023 0303 	bic.w	r3, r3, #3
 80032a8:	6293      	str	r3, [r2, #40]	@ 0x28
 80032aa:	e06f      	b.n	800338c <HAL_RCC_OscConfig+0xda8>
 80032ac:	46020c00 	.word	0x46020c00
 80032b0:	46020800 	.word	0x46020800
 80032b4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80032b8:	4b37      	ldr	r3, [pc, #220]	@ (8003398 <HAL_RCC_OscConfig+0xdb4>)
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032be:	4b36      	ldr	r3, [pc, #216]	@ (8003398 <HAL_RCC_OscConfig+0xdb4>)
 80032c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d039      	beq.n	8003340 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0203 	and.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d132      	bne.n	8003340 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d129      	bne.n	8003340 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d122      	bne.n	8003340 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003304:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d11a      	bne.n	8003340 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	0a5b      	lsrs	r3, r3, #9
 800330e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d111      	bne.n	8003340 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003328:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d108      	bne.n	8003340 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	0e1b      	lsrs	r3, r3, #24
 8003332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e024      	b.n	800338e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <HAL_RCC_OscConfig+0xdb4>)
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003352:	429a      	cmp	r2, r3
 8003354:	d01a      	beq.n	800338c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003356:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <HAL_RCC_OscConfig+0xdb4>)
 8003358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335a:	4a0f      	ldr	r2, [pc, #60]	@ (8003398 <HAL_RCC_OscConfig+0xdb4>)
 800335c:	f023 0310 	bic.w	r3, r3, #16
 8003360:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe fc4b 	bl	8001bfc <HAL_GetTick>
 8003366:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003368:	bf00      	nop
 800336a:	f7fe fc47 	bl	8001bfc <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	4293      	cmp	r3, r2
 8003374:	d0f9      	beq.n	800336a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337a:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <HAL_RCC_OscConfig+0xdb4>)
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_OscConfig+0xdb4>)
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <HAL_RCC_OscConfig+0xdb4>)
 8003386:	f043 0310 	orr.w	r3, r3, #16
 800338a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3738      	adds	r7, #56	@ 0x38
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	46020c00 	.word	0x46020c00

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e1d9      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b9b      	ldr	r3, [pc, #620]	@ (8003620 <HAL_RCC_ClockConfig+0x284>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d910      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b98      	ldr	r3, [pc, #608]	@ (8003620 <HAL_RCC_ClockConfig+0x284>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 020f 	bic.w	r2, r3, #15
 80033c6:	4996      	ldr	r1, [pc, #600]	@ (8003620 <HAL_RCC_ClockConfig+0x284>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b94      	ldr	r3, [pc, #592]	@ (8003620 <HAL_RCC_ClockConfig+0x284>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e1c1      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d010      	beq.n	800340e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d908      	bls.n	800340e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80033fc:	4b89      	ldr	r3, [pc, #548]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	4986      	ldr	r1, [pc, #536]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 800340a:	4313      	orrs	r3, r2
 800340c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	4b81      	ldr	r3, [pc, #516]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003428:	429a      	cmp	r2, r3
 800342a:	d909      	bls.n	8003440 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800342c:	4b7d      	ldr	r3, [pc, #500]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	497a      	ldr	r1, [pc, #488]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 800343c:	4313      	orrs	r3, r2
 800343e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d010      	beq.n	800346e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4b74      	ldr	r3, [pc, #464]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003458:	429a      	cmp	r2, r3
 800345a:	d908      	bls.n	800346e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800345c:	4b71      	ldr	r3, [pc, #452]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	496e      	ldr	r1, [pc, #440]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 800346a:	4313      	orrs	r3, r2
 800346c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d010      	beq.n	800349c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4b69      	ldr	r3, [pc, #420]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	429a      	cmp	r2, r3
 8003488:	d908      	bls.n	800349c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800348a:	4b66      	ldr	r3, [pc, #408]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f023 020f 	bic.w	r2, r3, #15
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4963      	ldr	r1, [pc, #396]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003498:	4313      	orrs	r3, r2
 800349a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80d2 	beq.w	800364e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d143      	bne.n	800353e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 80034b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d110      	bne.n	80034e6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b57      	ldr	r3, [pc, #348]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ca:	4a56      	ldr	r2, [pc, #344]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80034d4:	4b53      	ldr	r3, [pc, #332]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80034e6:	f7fe fb89 	bl	8001bfc <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80034ec:	4b4e      	ldr	r3, [pc, #312]	@ (8003628 <HAL_RCC_ClockConfig+0x28c>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00f      	beq.n	8003518 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80034fa:	f7fe fb7f 	bl	8001bfc <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e12b      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800350c:	4b46      	ldr	r3, [pc, #280]	@ (8003628 <HAL_RCC_ClockConfig+0x28c>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800351e:	4b41      	ldr	r3, [pc, #260]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003524:	4a3f      	ldr	r2, [pc, #252]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003526:	f023 0304 	bic.w	r3, r3, #4
 800352a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800352e:	4b3d      	ldr	r3, [pc, #244]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d121      	bne.n	800357e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e112      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003546:	4b37      	ldr	r3, [pc, #220]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e106      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800355e:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0fa      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356e:	4b2d      	ldr	r3, [pc, #180]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0f2      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b29      	ldr	r3, [pc, #164]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4926      	ldr	r1, [pc, #152]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 800358c:	4313      	orrs	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003590:	f7fe fb34 	bl	8001bfc <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d112      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7fe fb2c 	bl	8001bfc <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0d6      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d1ee      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x204>
 80035c2:	e044      	b.n	800364e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d112      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ce:	f7fe fb15 	bl	8001bfc <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e0bf      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d1ee      	bne.n	80035ce <HAL_RCC_ClockConfig+0x232>
 80035f0:	e02d      	b.n	800364e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d123      	bne.n	8003642 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fc:	f7fe fafe 	bl	8001bfc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0a8      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <HAL_RCC_ClockConfig+0x288>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_ClockConfig+0x260>
 800361e:	e016      	b.n	800364e <HAL_RCC_ClockConfig+0x2b2>
 8003620:	40022000 	.word	0x40022000
 8003624:	46020c00 	.word	0x46020c00
 8003628:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fae6 	bl	8001bfc <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e090      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003642:	4b4a      	ldr	r3, [pc, #296]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d1ee      	bne.n	800362c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d010      	beq.n	800367c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	4b43      	ldr	r3, [pc, #268]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	429a      	cmp	r2, r3
 8003668:	d208      	bcs.n	800367c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800366a:	4b40      	ldr	r3, [pc, #256]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f023 020f 	bic.w	r2, r3, #15
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	493d      	ldr	r1, [pc, #244]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b3c      	ldr	r3, [pc, #240]	@ (8003770 <HAL_RCC_ClockConfig+0x3d4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d210      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b39      	ldr	r3, [pc, #228]	@ (8003770 <HAL_RCC_ClockConfig+0x3d4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 020f 	bic.w	r2, r3, #15
 8003692:	4937      	ldr	r1, [pc, #220]	@ (8003770 <HAL_RCC_ClockConfig+0x3d4>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b35      	ldr	r3, [pc, #212]	@ (8003770 <HAL_RCC_ClockConfig+0x3d4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e05b      	b.n	8003764 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d208      	bcs.n	80036da <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80036c8:	4b28      	ldr	r3, [pc, #160]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4925      	ldr	r1, [pc, #148]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d012      	beq.n	800370c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d209      	bcs.n	800370c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80036f8:	4b1c      	ldr	r3, [pc, #112]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	4919      	ldr	r1, [pc, #100]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	4b13      	ldr	r3, [pc, #76]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003724:	429a      	cmp	r2, r3
 8003726:	d208      	bcs.n	800373a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003728:	4b10      	ldr	r3, [pc, #64]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	490d      	ldr	r1, [pc, #52]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800373a:	f000 f821 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_RCC_ClockConfig+0x3d0>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	490a      	ldr	r1, [pc, #40]	@ (8003774 <HAL_RCC_ClockConfig+0x3d8>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	4a09      	ldr	r2, [pc, #36]	@ (8003778 <HAL_RCC_ClockConfig+0x3dc>)
 8003752:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003754:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x3e0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd fe4d 	bl	80013f8 <HAL_InitTick>
 800375e:	4603      	mov	r3, r0
 8003760:	73fb      	strb	r3, [r7, #15]

  return status;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	46020c00 	.word	0x46020c00
 8003770:	40022000 	.word	0x40022000
 8003774:	080086b0 	.word	0x080086b0
 8003778:	20000000 	.word	0x20000000
 800377c:	20000020 	.word	0x20000020

08003780 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	b08b      	sub	sp, #44	@ 0x2c
 8003784:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378e:	4b78      	ldr	r3, [pc, #480]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003798:	4b75      	ldr	r3, [pc, #468]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d121      	bne.n	80037f2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d11e      	bne.n	80037f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80037b4:	4b6e      	ldr	r3, [pc, #440]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80037c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037c6:	0b1b      	lsrs	r3, r3, #12
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ce:	e005      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80037d0:	4b67      	ldr	r3, [pc, #412]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	0f1b      	lsrs	r3, r3, #28
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037dc:	4a65      	ldr	r2, [pc, #404]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d110      	bne.n	800380e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037f0:	e00d      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d102      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	e004      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d101      	bne.n	800380e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800380c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b0c      	cmp	r3, #12
 8003812:	f040 80a5 	bne.w	8003960 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003816:	4b56      	ldr	r3, [pc, #344]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003820:	4b53      	ldr	r3, [pc, #332]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3301      	adds	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800382e:	4b50      	ldr	r3, [pc, #320]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800383a:	4b4d      	ldr	r3, [pc, #308]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	08db      	lsrs	r3, r3, #3
 8003840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d003      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0xe4>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d022      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x128>
 8003862:	e043      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800397c <HAL_RCC_GetSysClockFreq+0x1fc>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b3e      	ldr	r3, [pc, #248]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003886:	ed97 6a01 	vldr	s12, [r7, #4]
 800388a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003980 <HAL_RCC_GetSysClockFreq+0x200>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038a6:	e046      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800397c <HAL_RCC_GetSysClockFreq+0x1fc>
 80038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80038ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80038ce:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003980 <HAL_RCC_GetSysClockFreq+0x200>
 80038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80038da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ea:	e024      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003904:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003914:	ed97 6a01 	vldr	s12, [r7, #4]
 8003918:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003980 <HAL_RCC_GetSysClockFreq+0x200>
 800391c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003920:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003924:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003928:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800392c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003930:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003934:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003936:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393a:	0e1b      	lsrs	r3, r3, #24
 800393c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003940:	3301      	adds	r3, #1
 8003942:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800394e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800395a:	ee17 3a90 	vmov	r3, s15
 800395e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003960:	6a3b      	ldr	r3, [r7, #32]
}
 8003962:	4618      	mov	r0, r3
 8003964:	372c      	adds	r7, #44	@ 0x2c
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	46020c00 	.word	0x46020c00
 8003974:	080086c8 	.word	0x080086c8
 8003978:	00f42400 	.word	0x00f42400
 800397c:	4b742400 	.word	0x4b742400
 8003980:	46000000 	.word	0x46000000

08003984 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003988:	f7ff fefa 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <HAL_RCC_GetHCLKFreq+0x28>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	4906      	ldr	r1, [pc, #24]	@ (80039b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003998:	5ccb      	ldrb	r3, [r1, r3]
 800399a:	fa22 f303 	lsr.w	r3, r2, r3
 800399e:	4a05      	ldr	r2, [pc, #20]	@ (80039b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80039a0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80039a2:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80039a4:	681b      	ldr	r3, [r3, #0]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	46020c00 	.word	0x46020c00
 80039b0:	080086b0 	.word	0x080086b0
 80039b4:	20000000 	.word	0x20000000

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80039bc:	f7ff ffe2 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	46020c00 	.word	0x46020c00
 80039dc:	080086c0 	.word	0x080086c0

080039e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80039e4:	f7ff ffce 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	@ (8003a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	46020c00 	.word	0x46020c00
 8003a04:	080086c0 	.word	0x080086c0

08003a08 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003a0c:	f7ff ffba 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	@ (8003a2c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	46020c00 	.word	0x46020c00
 8003a2c:	080086c0 	.word	0x080086c0

08003a30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	221f      	movs	r2, #31
 8003a3e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003a40:	4b15      	ldr	r3, [pc, #84]	@ (8003a98 <HAL_RCC_GetClockConfig+0x68>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8003a4c:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <HAL_RCC_GetClockConfig+0x68>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8003a58:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <HAL_RCC_GetClockConfig+0x68>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <HAL_RCC_GetClockConfig+0x68>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8003a72:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <HAL_RCC_GetClockConfig+0x68>)
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <HAL_RCC_GetClockConfig+0x6c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 020f 	and.w	r2, r3, #15
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	46020c00 	.word	0x46020c00
 8003a9c:	40022000 	.word	0x40022000

08003aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ab6:	f7fe fd17 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 8003aba:	6178      	str	r0, [r7, #20]
 8003abc:	e019      	b.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac4:	4a37      	ldr	r2, [pc, #220]	@ (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ace:	4b35      	ldr	r3, [pc, #212]	@ (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003adc:	f7fe fd04 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 8003ae0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ae2:	4b30      	ldr	r3, [pc, #192]	@ (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003aea:	f023 0304 	bic.w	r3, r3, #4
 8003aee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003af8:	d003      	beq.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b00:	d109      	bne.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b08:	d202      	bcs.n	8003b10 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003b0e:	e033      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003b14:	e030      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b1c:	d208      	bcs.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b24:	d102      	bne.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003b26:	2303      	movs	r3, #3
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	e025      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e035      	b.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b36:	d90f      	bls.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b44:	d902      	bls.n	8003b4c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	e015      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e012      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	e00f      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b5e:	d109      	bne.n	8003b74 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b66:	d102      	bne.n	8003b6e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	e004      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003b6e:	2302      	movs	r3, #2
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e001      	b.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003b74:	2301      	movs	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 020f 	bic.w	r2, r3, #15
 8003b80:	4909      	ldr	r1, [pc, #36]	@ (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003b88:	4b07      	ldr	r3, [pc, #28]	@ (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	46020c00 	.word	0x46020c00
 8003ba8:	40022000 	.word	0x40022000

08003bac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	@ 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003bb4:	4ba6      	ldr	r3, [pc, #664]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003bbe:	4ba4      	ldr	r3, [pc, #656]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003bc8:	4ba1      	ldr	r3, [pc, #644]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003bd6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003be2:	4b9b      	ldr	r3, [pc, #620]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be6:	08db      	lsrs	r3, r3, #3
 8003be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d062      	beq.n	8003cca <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	f200 8081 	bhi.w	8003d0e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d024      	beq.n	8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d17a      	bne.n	8003d0e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2a:	4b89      	ldr	r3, [pc, #548]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c3e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c5a:	e08f      	b.n	8003d7c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003c5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003c68:	4b79      	ldr	r3, [pc, #484]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	0f1b      	lsrs	r3, r3, #28
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	e006      	b.n	8003c82 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003c74:	4b76      	ldr	r3, [pc, #472]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c7a:	041b      	lsls	r3, r3, #16
 8003c7c:	0f1b      	lsrs	r3, r3, #28
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	4a76      	ldr	r2, [pc, #472]	@ (8003e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	ee07 3a90 	vmov	s15, r3
 8003ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cc8:	e058      	b.n	8003d7c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cec:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d0c:	e036      	b.n	8003d7c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003d0e:	4b50      	ldr	r3, [pc, #320]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8003d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0f1b      	lsrs	r3, r3, #28
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003d26:	4b4a      	ldr	r3, [pc, #296]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	0f1b      	lsrs	r3, r3, #28
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	4a49      	ldr	r2, [pc, #292]	@ (8003e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d5e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d7a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003d7c:	4b34      	ldr	r3, [pc, #208]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d017      	beq.n	8003db8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d88:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8c:	0a5b      	lsrs	r3, r3, #9
 8003d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dae:	ee17 2a90 	vmov	r2, s15
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e002      	b.n	8003dbe <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003dbe:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d017      	beq.n	8003dfa <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003dca:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003ddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003de0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df0:	ee17 2a90 	vmov	r2, s15
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	e002      	b.n	8003e00 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003e00:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d017      	beq.n	8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e0c:	4b10      	ldr	r3, [pc, #64]	@ (8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e10:	0e1b      	lsrs	r3, r3, #24
 8003e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e32:	ee17 2a90 	vmov	r2, s15
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003e3a:	e002      	b.n	8003e42 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	bf00      	nop
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	46020c00 	.word	0x46020c00
 8003e54:	4b742400 	.word	0x4b742400
 8003e58:	46000000 	.word	0x46000000
 8003e5c:	080086c8 	.word	0x080086c8

08003e60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	@ 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003e68:	4ba6      	ldr	r3, [pc, #664]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e70:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003e72:	4ba4      	ldr	r3, [pc, #656]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003e7c:	4ba1      	ldr	r3, [pc, #644]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3301      	adds	r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003e8a:	4b9e      	ldr	r3, [pc, #632]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003e96:	4b9b      	ldr	r3, [pc, #620]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	08db      	lsrs	r3, r3, #3
 8003e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d062      	beq.n	8003f7e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	f200 8081 	bhi.w	8003fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d024      	beq.n	8003f10 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d17a      	bne.n	8003fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ede:	4b89      	ldr	r3, [pc, #548]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ef2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800410c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f0e:	e08f      	b.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003f10:	4b7c      	ldr	r3, [pc, #496]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003f1c:	4b79      	ldr	r3, [pc, #484]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	0f1b      	lsrs	r3, r3, #28
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	e006      	b.n	8003f36 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8003f28:	4b76      	ldr	r3, [pc, #472]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	0f1b      	lsrs	r3, r3, #28
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	4a76      	ldr	r2, [pc, #472]	@ (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	ee07 3a90 	vmov	s15, r3
 8003f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f60:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800410c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f7c:	e058      	b.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	ee07 3a90 	vmov	s15, r3
 8003f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f88:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f90:	4b5c      	ldr	r3, [pc, #368]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fa0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800410c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fc0:	e036      	b.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003fc2:	4b50      	ldr	r3, [pc, #320]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8003fce:	4b4d      	ldr	r3, [pc, #308]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	0f1b      	lsrs	r3, r3, #28
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8003fda:	4b4a      	ldr	r3, [pc, #296]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	0f1b      	lsrs	r3, r3, #28
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	4a49      	ldr	r2, [pc, #292]	@ (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004012:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800410c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004022:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800402e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004030:	4b34      	ldr	r3, [pc, #208]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d017      	beq.n	800406c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800403c:	4b31      	ldr	r3, [pc, #196]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	0a5b      	lsrs	r3, r3, #9
 8004042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800404e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004052:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004056:	edd7 6a07 	vldr	s13, [r7, #28]
 800405a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004062:	ee17 2a90 	vmov	r2, s15
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e002      	b.n	8004072 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004072:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d017      	beq.n	80040ae <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800407e:	4b21      	ldr	r3, [pc, #132]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004090:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004094:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004098:	edd7 6a07 	vldr	s13, [r7, #28]
 800409c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a4:	ee17 2a90 	vmov	r2, s15
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	e002      	b.n	80040b4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80040b4:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d017      	beq.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040c0:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80040c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c4:	0e1b      	lsrs	r3, r3, #24
 80040c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80040d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040da:	edd7 6a07 	vldr	s13, [r7, #28]
 80040de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e6:	ee17 2a90 	vmov	r2, s15
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040ee:	e002      	b.n	80040f6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	bf00      	nop
 80040f8:	3724      	adds	r7, #36	@ 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	46020c00 	.word	0x46020c00
 8004108:	4b742400 	.word	0x4b742400
 800410c:	46000000 	.word	0x46000000
 8004110:	080086c8 	.word	0x080086c8

08004114 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004114:	b480      	push	{r7}
 8004116:	b089      	sub	sp, #36	@ 0x24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800411c:	4ba6      	ldr	r3, [pc, #664]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800411e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004124:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004126:	4ba4      	ldr	r3, [pc, #656]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004130:	4ba1      	ldr	r3, [pc, #644]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	3301      	adds	r3, #1
 800413c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800413e:	4b9e      	ldr	r3, [pc, #632]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800414a:	4b9b      	ldr	r3, [pc, #620]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800414c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800414e:	08db      	lsrs	r3, r3, #3
 8004150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004162:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d062      	beq.n	8004232 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b03      	cmp	r3, #3
 8004170:	f200 8081 	bhi.w	8004276 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d024      	beq.n	80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d17a      	bne.n	8004276 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800418e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004192:	4b89      	ldr	r3, [pc, #548]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80041a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041a6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80041aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80041ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80041b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80041ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041be:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80041c2:	e08f      	b.n	80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80041c4:	4b7c      	ldr	r3, [pc, #496]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80041d0:	4b79      	ldr	r3, [pc, #484]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	0f1b      	lsrs	r3, r3, #28
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	e006      	b.n	80041ea <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80041dc:	4b76      	ldr	r3, [pc, #472]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80041de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	0f1b      	lsrs	r3, r3, #28
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	4a76      	ldr	r2, [pc, #472]	@ (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80041ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004210:	ed97 6a02 	vldr	s12, [r7, #8]
 8004214:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004224:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004230:	e058      	b.n	80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004244:	4b5c      	ldr	r3, [pc, #368]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004254:	ed97 6a02 	vldr	s12, [r7, #8]
 8004258:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800425c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004260:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004264:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004268:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800426c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004270:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004274:	e036      	b.n	80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004276:	4b50      	ldr	r3, [pc, #320]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004282:	4b4d      	ldr	r3, [pc, #308]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	0f1b      	lsrs	r3, r3, #28
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	e006      	b.n	800429c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800428e:	4b4a      	ldr	r3, [pc, #296]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004294:	041b      	lsls	r3, r3, #16
 8004296:	0f1b      	lsrs	r3, r3, #28
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	4a49      	ldr	r2, [pc, #292]	@ (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800429e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042c6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80042ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80042da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042e2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80042e4:	4b34      	ldr	r3, [pc, #208]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d017      	beq.n	8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80042f0:	4b31      	ldr	r3, [pc, #196]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80042f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f4:	0a5b      	lsrs	r3, r3, #9
 80042f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004302:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004306:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800430a:	edd7 6a07 	vldr	s13, [r7, #28]
 800430e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004316:	ee17 2a90 	vmov	r2, s15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e002      	b.n	8004326 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d017      	beq.n	8004362 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004332:	4b21      	ldr	r3, [pc, #132]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004348:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800434c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004358:	ee17 2a90 	vmov	r2, s15
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	605a      	str	r2, [r3, #4]
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004368:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004374:	4b10      	ldr	r3, [pc, #64]	@ (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004378:	0e1b      	lsrs	r3, r3, #24
 800437a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800438a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800438e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439a:	ee17 2a90 	vmov	r2, s15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043a2:	e002      	b.n	80043aa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
}
 80043aa:	bf00      	nop
 80043ac:	3724      	adds	r7, #36	@ 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	46020c00 	.word	0x46020c00
 80043bc:	4b742400 	.word	0x4b742400
 80043c0:	46000000 	.word	0x46000000
 80043c4:	080086c8 	.word	0x080086c8

080043c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	@ 0x38
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80043d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80043da:	430b      	orrs	r3, r1
 80043dc:	d145      	bne.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80043de:	4baa      	ldr	r3, [pc, #680]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80043e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80043ea:	4ba7      	ldr	r3, [pc, #668]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80043ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d108      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043fe:	d104      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004400:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34
 8004406:	f001 b987 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800440a:	4b9f      	ldr	r3, [pc, #636]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800440c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004418:	d114      	bne.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004420:	d110      	bne.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004422:	4b99      	ldr	r3, [pc, #612]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004430:	d103      	bne.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004432:	23fa      	movs	r3, #250	@ 0xfa
 8004434:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004436:	f001 b96f 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800443a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800443e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004440:	f001 b96a 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004444:	4b90      	ldr	r3, [pc, #576]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004450:	d107      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004458:	d103      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800445a:	4b8c      	ldr	r3, [pc, #560]	@ (800468c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
 800445e:	f001 b95b 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	637b      	str	r3, [r7, #52]	@ 0x34
 8004466:	f001 b957 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800446a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800446e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004472:	430b      	orrs	r3, r1
 8004474:	d151      	bne.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004476:	4b84      	ldr	r3, [pc, #528]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004478:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800447c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004480:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	2b80      	cmp	r3, #128	@ 0x80
 8004486:	d035      	beq.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	2b80      	cmp	r3, #128	@ 0x80
 800448c:	d841      	bhi.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	2b60      	cmp	r3, #96	@ 0x60
 8004492:	d02a      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004496:	2b60      	cmp	r3, #96	@ 0x60
 8004498:	d83b      	bhi.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	2b40      	cmp	r3, #64	@ 0x40
 800449e:	d009      	beq.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	d835      	bhi.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d012      	beq.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80044b2:	e02e      	b.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fb77 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044c2:	f001 b929 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044c6:	f107 0318 	add.w	r3, r7, #24
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fcc8 	bl	8003e60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044d4:	f001 b920 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fe19 	bl	8004114 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044e6:	f001 b917 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80044ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80044ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044f0:	f001 b912 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044f4:	4b64      	ldr	r3, [pc, #400]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004500:	d103      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004502:	4b63      	ldr	r3, [pc, #396]	@ (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004506:	f001 b907 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800450e:	f001 b903 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004516:	f001 b8ff 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800451a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800451e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004522:	430b      	orrs	r3, r1
 8004524:	d158      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004526:	4b58      	ldr	r3, [pc, #352]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004528:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800452c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004530:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004538:	d03b      	beq.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004540:	d846      	bhi.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004548:	d02e      	beq.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004550:	d83e      	bhi.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004558:	d00b      	beq.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004560:	d836      	bhi.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800456e:	d012      	beq.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004570:	e02e      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fb18 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004580:	f001 b8ca 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004584:	f107 0318 	add.w	r3, r7, #24
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fc69 	bl	8003e60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004592:	f001 b8c1 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004596:	f107 030c 	add.w	r3, r7, #12
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fdba 	bl	8004114 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045a4:	f001 b8b8 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80045a8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80045ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045ae:	f001 b8b3 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045b2:	4b35      	ldr	r3, [pc, #212]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045be:	d103      	bne.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80045c0:	4b33      	ldr	r3, [pc, #204]	@ (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80045c4:	f001 b8a8 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045cc:	f001 b8a4 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045d4:	f001 b8a0 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80045d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045dc:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80045e0:	430b      	orrs	r3, r1
 80045e2:	d16e      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80045e4:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80045e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045ea:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80045ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80045f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045f6:	d034      	beq.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045fe:	d85c      	bhi.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004606:	d00b      	beq.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800460e:	d854      	bhi.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	2b00      	cmp	r3, #0
 8004614:	d016      	beq.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800461c:	d009      	beq.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800461e:	e04c      	b.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fac1 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800462e:	f001 b873 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004632:	f107 0318 	add.w	r3, r7, #24
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fc12 	bl	8003e60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004640:	f001 b86a 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004644:	4b10      	ldr	r3, [pc, #64]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800464c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004650:	d103      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8004652:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004654:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004656:	f001 b85f 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800465e:	f001 b85b 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004662:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b20      	cmp	r3, #32
 800466c:	d121      	bne.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800466e:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800467a:	4b03      	ldr	r3, [pc, #12]	@ (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	0e1b      	lsrs	r3, r3, #24
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	e00f      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004686:	bf00      	nop
 8004688:	46020c00 	.word	0x46020c00
 800468c:	0007a120 	.word	0x0007a120
 8004690:	00f42400 	.word	0x00f42400
 8004694:	02dc6c00 	.word	0x02dc6c00
 8004698:	4ba7      	ldr	r3, [pc, #668]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800469a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800469e:	041b      	lsls	r3, r3, #16
 80046a0:	0e1b      	lsrs	r3, r3, #24
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	4aa5      	ldr	r2, [pc, #660]	@ (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80046a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80046ae:	f001 b833 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046b6:	f001 b82f 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046be:	f001 b82b 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80046c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c6:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80046ca:	430b      	orrs	r3, r1
 80046cc:	d17f      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80046ce:	4b9a      	ldr	r3, [pc, #616]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80046d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d165      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80046e0:	4b95      	ldr	r3, [pc, #596]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80046e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046e6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80046ea:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80046ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046f2:	d034      	beq.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80046f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046fa:	d853      	bhi.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004702:	d00b      	beq.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800470a:	d84b      	bhi.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004718:	d009      	beq.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800471a:	e043      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800471c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fa43 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800472a:	f000 bff5 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800472e:	f107 0318 	add.w	r3, r7, #24
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fb94 	bl	8003e60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800473c:	f000 bfec 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004740:	4b7d      	ldr	r3, [pc, #500]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800474c:	d103      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800474e:	4b7c      	ldr	r3, [pc, #496]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004750:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004752:	f000 bfe1 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800475a:	f000 bfdd 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800475e:	4b76      	ldr	r3, [pc, #472]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d118      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800476a:	4b73      	ldr	r3, [pc, #460]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8004776:	4b70      	ldr	r3, [pc, #448]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	0e1b      	lsrs	r3, r3, #24
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	e006      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8004782:	4b6d      	ldr	r3, [pc, #436]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	0e1b      	lsrs	r3, r3, #24
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	4a6a      	ldr	r2, [pc, #424]	@ (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004796:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004798:	f000 bfbe 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80047a0:	f000 bfba 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80047a8:	f000 bfb6 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80047ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b2:	d108      	bne.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f9f7 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c2:	f000 bfa9 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ca:	f000 bfa5 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80047ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d2:	1e51      	subs	r1, r2, #1
 80047d4:	430b      	orrs	r3, r1
 80047d6:	d136      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80047d8:	4b57      	ldr	r3, [pc, #348]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80047da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80047ea:	f7ff f8f9 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 80047ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80047f0:	f000 bf92 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d104      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80047fa:	f7fe ffc1 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80047fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8004800:	f000 bf8a 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004804:	4b4c      	ldr	r3, [pc, #304]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004810:	d106      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	2b02      	cmp	r3, #2
 8004816:	d103      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8004818:	4b4a      	ldr	r3, [pc, #296]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
 800481c:	f000 bf7c 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004820:	4b45      	ldr	r3, [pc, #276]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d107      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	2b03      	cmp	r3, #3
 8004832:	d104      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8004834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004838:	637b      	str	r3, [r7, #52]	@ 0x34
 800483a:	f000 bf6d 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
 8004842:	f000 bf69 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800484a:	1e91      	subs	r1, r2, #2
 800484c:	430b      	orrs	r3, r1
 800484e:	d136      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004850:	4b39      	ldr	r3, [pc, #228]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004862:	f7ff f8a9 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004866:	6378      	str	r0, [r7, #52]	@ 0x34
 8004868:	f000 bf56 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	2b04      	cmp	r3, #4
 8004870:	d104      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004872:	f7fe ff85 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004876:	6378      	str	r0, [r7, #52]	@ 0x34
 8004878:	f000 bf4e 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800487c:	4b2e      	ldr	r3, [pc, #184]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004888:	d106      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	2b08      	cmp	r3, #8
 800488e:	d103      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8004890:	4b2c      	ldr	r3, [pc, #176]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004892:	637b      	str	r3, [r7, #52]	@ 0x34
 8004894:	f000 bf40 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004898:	4b27      	ldr	r3, [pc, #156]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800489a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d107      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	2b0c      	cmp	r3, #12
 80048aa:	d104      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80048ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b2:	f000 bf31 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ba:	f000 bf2d 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80048be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c2:	1f11      	subs	r1, r2, #4
 80048c4:	430b      	orrs	r3, r1
 80048c6:	d13f      	bne.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80048c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80048ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048da:	f7ff f86d 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 80048de:	6378      	str	r0, [r7, #52]	@ 0x34
 80048e0:	f000 bf1a 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d104      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048ea:	f7fe ff49 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80048ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80048f0:	f000 bf12 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80048f4:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004900:	d106      	bne.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	2b20      	cmp	r3, #32
 8004906:	d103      	bne.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8004908:	4b0e      	ldr	r3, [pc, #56]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800490a:	637b      	str	r3, [r7, #52]	@ 0x34
 800490c:	f000 bf04 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004910:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d107      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	2b30      	cmp	r3, #48	@ 0x30
 8004922:	d104      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8004924:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
 800492a:	f000 bef5 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
 8004932:	f000 bef1 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004936:	bf00      	nop
 8004938:	46020c00 	.word	0x46020c00
 800493c:	080086c8 	.word	0x080086c8
 8004940:	02dc6c00 	.word	0x02dc6c00
 8004944:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800494c:	f1a2 0108 	sub.w	r1, r2, #8
 8004950:	430b      	orrs	r3, r1
 8004952:	d136      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004954:	4ba4      	ldr	r3, [pc, #656]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800495a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800495e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004966:	f7ff f827 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 800496a:	6378      	str	r0, [r7, #52]	@ 0x34
 800496c:	f000 bed4 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d104      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004976:	f7fe ff03 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800497a:	6378      	str	r0, [r7, #52]	@ 0x34
 800497c:	f000 becc 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004980:	4b99      	ldr	r3, [pc, #612]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498c:	d106      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	2b80      	cmp	r3, #128	@ 0x80
 8004992:	d103      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8004994:	4b95      	ldr	r3, [pc, #596]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
 8004998:	f000 bebe 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800499c:	4b92      	ldr	r3, [pc, #584]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800499e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d107      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80049ae:	d104      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80049b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b6:	f000 beaf 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049be:	f000 beab 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80049c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c6:	f1a2 0110 	sub.w	r1, r2, #16
 80049ca:	430b      	orrs	r3, r1
 80049cc:	d139      	bne.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80049ce:	4b86      	ldr	r3, [pc, #536]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80049d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d104      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fe ffea 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 80049e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80049e6:	f000 be97 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f0:	d104      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80049f2:	f7fe fec5 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80049f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80049f8:	f000 be8e 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80049fc:	4b7a      	ldr	r3, [pc, #488]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a08:	d107      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a10:	d103      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8004a12:	4b76      	ldr	r3, [pc, #472]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a16:	f000 be7f 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004a1a:	4b73      	ldr	r3, [pc, #460]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d108      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a2e:	d104      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8004a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a36:	f000 be6f 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3e:	f000 be6b 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a46:	f1a2 0120 	sub.w	r1, r2, #32
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	d158      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a4e:	4b66      	ldr	r3, [pc, #408]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004a60:	f7fe ffd2 	bl	8003a08 <HAL_RCC_GetPCLK3Freq>
 8004a64:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a66:	f000 be57 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d104      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a70:	f7fe fe86 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004a74:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a76:	f000 be4f 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a86:	d106      	bne.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d103      	bne.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8004a8e:	4b57      	ldr	r3, [pc, #348]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a92:	f000 be41 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004a96:	4b54      	ldr	r3, [pc, #336]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d104      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ab0:	f000 be32 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d11b      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d118      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ac6:	4b48      	ldr	r3, [pc, #288]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8004ad2:	4b45      	ldr	r3, [pc, #276]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0e1b      	lsrs	r3, r3, #24
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	e006      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004ade:	4b42      	ldr	r3, [pc, #264]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	0e1b      	lsrs	r3, r3, #24
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	4a40      	ldr	r2, [pc, #256]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af4:	f000 be10 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afc:	f000 be0c 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b04:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	d173      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004b0c:	4b36      	ldr	r3, [pc, #216]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004b16:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1e:	d104      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b20:	f7fe fe2e 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004b24:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b26:	f000 bdf7 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b30:	d108      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b32:	f107 0318 	add.w	r3, r7, #24
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff f992 	bl	8003e60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b40:	f000 bdea 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004b4a:	f7fe ff1b 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 8004b4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b50:	f000 bde2 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b5a:	d122      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b5c:	4b22      	ldr	r3, [pc, #136]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d118      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b68:	4b1f      	ldr	r3, [pc, #124]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004b74:	4b1c      	ldr	r3, [pc, #112]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	e006      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004b80:	4b19      	ldr	r3, [pc, #100]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	0e1b      	lsrs	r3, r3, #24
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	4a18      	ldr	r2, [pc, #96]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b96:	f000 bdbf 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b9e:	f000 bdbb 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004ba2:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bb6:	d103      	bne.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bbc:	f000 bdac 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004bc0:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bcc:	d107      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd4:	d103      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8004bd6:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bda:	f000 bd9d 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be2:	f000 bd99 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8004be6:	bf00      	nop
 8004be8:	46020c00 	.word	0x46020c00
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	080086c8 	.word	0x080086c8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	d158      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004c00:	4bad      	ldr	r3, [pc, #692]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004c02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d84b      	bhi.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004c12:	a201      	add	r2, pc, #4	@ (adr r2, 8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c51 	.word	0x08004c51
 8004c1c:	08004c2d 	.word	0x08004c2d
 8004c20:	08004c3f 	.word	0x08004c3f
 8004c24:	08004c5b 	.word	0x08004c5b
 8004c28:	08004c65 	.word	0x08004c65
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe ffbb 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c3a:	f000 bd6d 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fa66 	bl	8004114 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c4c:	f000 bd64 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004c50:	f7fe fe98 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 8004c54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c56:	f000 bd5f 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c5a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c60:	f000 bd5a 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c64:	4b94      	ldr	r3, [pc, #592]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d118      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c70:	4b91      	ldr	r3, [pc, #580]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8004c7c:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	0e1b      	lsrs	r3, r3, #24
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	e006      	b.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8004c88:	4b8b      	ldr	r3, [pc, #556]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	4a89      	ldr	r2, [pc, #548]	@ (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c9e:	f000 bd3b 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ca6:	f000 bd37 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cae:	f000 bd33 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	d167      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004cbe:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cc4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004cc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cd0:	d036      	beq.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cd8:	d855      	bhi.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ce0:	d029      	beq.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ce8:	d84d      	bhi.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cf0:	d013      	beq.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cf8:	d845      	bhi.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d015      	beq.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d06:	d13e      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe ff4d 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d16:	f000 bcff 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d1a:	f107 030c 	add.w	r3, r7, #12
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff f9f8 	bl	8004114 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d28:	f000 bcf6 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004d2c:	f7fe fe2a 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 8004d30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004d32:	f000 bcf1 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004d3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d3c:	f000 bcec 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d40:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d118      	bne.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d4c:	4b5a      	ldr	r3, [pc, #360]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8004d58:	4b57      	ldr	r3, [pc, #348]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	0e1b      	lsrs	r3, r3, #24
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	e006      	b.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8004d64:	4b54      	ldr	r3, [pc, #336]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	0e1b      	lsrs	r3, r3, #24
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	4a52      	ldr	r2, [pc, #328]	@ (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8004d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d7a:	f000 bccd 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d82:	f000 bcc9 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d8a:	f000 bcc5 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d92:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004d96:	430b      	orrs	r3, r1
 8004d98:	d14c      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004d9a:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004da0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004da4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004dac:	f7fe fe04 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004db0:	6378      	str	r0, [r7, #52]	@ 0x34
 8004db2:	f000 bcb1 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbc:	d104      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7fe fcdf 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004dc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004dc4:	f000 bca8 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ddc:	d103      	bne.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8004dde:	4b38      	ldr	r3, [pc, #224]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de2:	f000 bc99 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004de6:	4b34      	ldr	r3, [pc, #208]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d11c      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004df8:	d118      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8004e06:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	0e1b      	lsrs	r3, r3, #24
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	e006      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8004e12:	4b29      	ldr	r3, [pc, #164]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e18:	041b      	lsls	r3, r3, #16
 8004e1a:	0e1b      	lsrs	r3, r3, #24
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	4a26      	ldr	r2, [pc, #152]	@ (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8004e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e28:	f000 bc76 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e30:	f000 bc72 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e38:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	d152      	bne.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004e40:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e52:	f7fe fdb1 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004e56:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e58:	f000 bc5e 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e62:	d104      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e64:	f7fe fc8c 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004e68:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e6a:	f000 bc55 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004e6e:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e82:	d103      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8004e84:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e88:	f000 bc46 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d122      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e9e:	d11e      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8004eac:	4b02      	ldr	r3, [pc, #8]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	0e1b      	lsrs	r3, r3, #24
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	e00c      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8004eb8:	46020c00 	.word	0x46020c00
 8004ebc:	080086c8 	.word	0x080086c8
 8004ec0:	00f42400 	.word	0x00f42400
 8004ec4:	4ba1      	ldr	r3, [pc, #644]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eca:	041b      	lsls	r3, r3, #16
 8004ecc:	0e1b      	lsrs	r3, r3, #24
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	4a9f      	ldr	r2, [pc, #636]	@ (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eda:	f000 bc1d 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee2:	f000 bc19 	b.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	d151      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ef2:	4b96      	ldr	r3, [pc, #600]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ef8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004efc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f02:	d024      	beq.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f08:	d842      	bhi.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	2b80      	cmp	r3, #128	@ 0x80
 8004f0e:	d00d      	beq.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	2b80      	cmp	r3, #128	@ 0x80
 8004f14:	d83c      	bhi.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	2b40      	cmp	r3, #64	@ 0x40
 8004f20:	d011      	beq.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004f22:	e035      	b.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004f24:	f7fe fd70 	bl	8003a08 <HAL_RCC_GetPCLK3Freq>
 8004f28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f2a:	e3f5      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f2c:	4b87      	ldr	r3, [pc, #540]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f38:	d102      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8004f3a:	4b86      	ldr	r3, [pc, #536]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f3e:	e3eb      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f44:	e3e8      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004f46:	f7fe fc1b 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004f4a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f4c:	e3e4      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d117      	bne.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f5a:	4b7c      	ldr	r3, [pc, #496]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8004f66:	4b79      	ldr	r3, [pc, #484]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	0e1b      	lsrs	r3, r3, #24
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004f72:	4b76      	ldr	r3, [pc, #472]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	0e1b      	lsrs	r3, r3, #24
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	4a73      	ldr	r2, [pc, #460]	@ (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f86:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f88:	e3c6      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f8e:	e3c3      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f94:	e3c0      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	d147      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004fb4:	f7fe fd00 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004fb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fba:	e3ad      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc2:	d103      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fc4:	f7fe fbdc 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004fc8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fca:	e3a5      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004fcc:	4b5f      	ldr	r3, [pc, #380]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd8:	d106      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe6:	e397      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004fe8:	4b58      	ldr	r3, [pc, #352]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d11b      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ffa:	d117      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ffc:	4b53      	ldr	r3, [pc, #332]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8005008:	4b50      	ldr	r3, [pc, #320]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	0e1b      	lsrs	r3, r3, #24
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	e006      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8005014:	4b4d      	ldr	r3, [pc, #308]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	0e1b      	lsrs	r3, r3, #24
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	4a4b      	ldr	r2, [pc, #300]	@ (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005028:	637b      	str	r3, [r7, #52]	@ 0x34
 800502a:	e375      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005030:	e372      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005036:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800503a:	430b      	orrs	r3, r1
 800503c:	d164      	bne.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800503e:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005048:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d120      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005050:	4b3e      	ldr	r3, [pc, #248]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d117      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800505c:	4b3b      	ldr	r3, [pc, #236]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005068:	4b38      	ldr	r3, [pc, #224]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	e006      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005074:	4b35      	ldr	r3, [pc, #212]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	0e1b      	lsrs	r3, r3, #24
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	4a33      	ldr	r2, [pc, #204]	@ (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
 800508a:	e345      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005090:	e342      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005092:	4b2e      	ldr	r3, [pc, #184]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800509c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050a0:	d112      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a8:	d10e      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050aa:	4b28      	ldr	r3, [pc, #160]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80050ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050b8:	d102      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80050ba:	23fa      	movs	r3, #250	@ 0xfa
 80050bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050be:	e32b      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80050c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050c6:	e327      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80050c8:	4b20      	ldr	r3, [pc, #128]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d4:	d106      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050dc:	d102      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80050de:	4b1d      	ldr	r3, [pc, #116]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050e2:	e319      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80050e4:	4b19      	ldr	r3, [pc, #100]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80050e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d107      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050f8:	d103      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80050fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005100:	e30a      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
 8005106:	e307      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005110:	430b      	orrs	r3, r1
 8005112:	d16b      	bne.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005114:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800511a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800511e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005122:	2b00      	cmp	r3, #0
 8005124:	d127      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005126:	4b09      	ldr	r3, [pc, #36]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	d11e      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005132:	4b06      	ldr	r3, [pc, #24]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800513e:	4b03      	ldr	r3, [pc, #12]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	0e1b      	lsrs	r3, r3, #24
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	e00d      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800514a:	bf00      	nop
 800514c:	46020c00 	.word	0x46020c00
 8005150:	080086c8 	.word	0x080086c8
 8005154:	00f42400 	.word	0x00f42400
 8005158:	4b94      	ldr	r3, [pc, #592]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800515a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	0e1b      	lsrs	r3, r3, #24
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	4a92      	ldr	r2, [pc, #584]	@ (80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
 800516e:	e2d3      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
 8005174:	e2d0      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005176:	4b8d      	ldr	r3, [pc, #564]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800517c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005184:	d112      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518c:	d10e      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800518e:	4b87      	ldr	r3, [pc, #540]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800519c:	d102      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800519e:	23fa      	movs	r3, #250	@ 0xfa
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80051a2:	e2b9      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80051a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80051a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80051aa:	e2b5      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80051ac:	4b7f      	ldr	r3, [pc, #508]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b8:	d106      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c0:	d102      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80051c2:	4b7c      	ldr	r3, [pc, #496]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c6:	e2a7      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80051c8:	4b78      	ldr	r3, [pc, #480]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80051ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d107      	bne.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051dc:	d103      	bne.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e4:	e298      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ea:	e295      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80051ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80051f4:	430b      	orrs	r3, r1
 80051f6:	d147      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80051f8:	4b6c      	ldr	r3, [pc, #432]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80051fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051fe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005202:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800520a:	f7fe fbd5 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 800520e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005210:	e282      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005212:	4b66      	ldr	r3, [pc, #408]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800521c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005220:	d112      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005228:	d10e      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800522a:	4b60      	ldr	r3, [pc, #384]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800522c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005238:	d102      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800523a:	23fa      	movs	r3, #250	@ 0xfa
 800523c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800523e:	e26b      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005240:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005246:	e267      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005248:	4b58      	ldr	r3, [pc, #352]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005254:	d106      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8005256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005258:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800525c:	d102      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800525e:	4b55      	ldr	r3, [pc, #340]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
 8005262:	e259      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005264:	4b51      	ldr	r3, [pc, #324]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b02      	cmp	r3, #2
 8005270:	d107      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005278:	d103      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800527a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800527e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005280:	e24a      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
 8005286:	e247      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800528c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005290:	430b      	orrs	r3, r1
 8005292:	d12d      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005294:	4b45      	ldr	r3, [pc, #276]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800529a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800529e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80052a0:	4b42      	ldr	r3, [pc, #264]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ac:	d105      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80052b4:	4b3f      	ldr	r3, [pc, #252]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80052b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b8:	e22e      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052c0:	d107      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fc70 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d0:	e222      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052d8:	d107      	bne.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052da:	f107 0318 	add.w	r3, r7, #24
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fdbe 	bl	8003e60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e8:	e216      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ee:	e213      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80052f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80052f8:	430b      	orrs	r3, r1
 80052fa:	d15d      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80052fc:	4b2b      	ldr	r3, [pc, #172]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80052fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005302:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005306:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800530e:	d028      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005316:	d845      	bhi.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800531e:	d013      	beq.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005326:	d83d      	bhi.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005334:	d004      	beq.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8005336:	e035      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005338:	f7fe fb52 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 800533c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800533e:	e1eb      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005340:	f7fe fa1e 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005344:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005346:	e1e7      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005348:	4b18      	ldr	r3, [pc, #96]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005354:	d102      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8005356:	4b17      	ldr	r3, [pc, #92]	@ (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800535a:	e1dd      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005360:	e1da      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d117      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800536e:	4b0f      	ldr	r3, [pc, #60]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	0e1b      	lsrs	r3, r3, #24
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8005386:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	0e1b      	lsrs	r3, r3, #24
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	4a06      	ldr	r2, [pc, #24]	@ (80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800539c:	e1bc      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053a2:	e1b9      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053a8:	e1b6      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80053aa:	bf00      	nop
 80053ac:	46020c00 	.word	0x46020c00
 80053b0:	080086c8 	.word	0x080086c8
 80053b4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80053b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053bc:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80053c0:	430b      	orrs	r3, r1
 80053c2:	d156      	bne.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80053c4:	4ba5      	ldr	r3, [pc, #660]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80053c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053ce:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053d6:	d028      	beq.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053de:	d845      	bhi.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053e6:	d013      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053ee:	d83d      	bhi.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053fc:	d004      	beq.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80053fe:	e035      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005400:	f7fe fada 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8005404:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005406:	e187      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005408:	f7fe f9ba 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800540c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800540e:	e183      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005410:	4b92      	ldr	r3, [pc, #584]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541c:	d102      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800541e:	4b90      	ldr	r3, [pc, #576]	@ (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005420:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005422:	e179      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005428:	e176      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800542a:	4b8c      	ldr	r3, [pc, #560]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d117      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005436:	4b89      	ldr	r3, [pc, #548]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8005442:	4b86      	ldr	r3, [pc, #536]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0e1b      	lsrs	r3, r3, #24
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	e006      	b.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800544e:	4b83      	ldr	r3, [pc, #524]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	0e1b      	lsrs	r3, r3, #24
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	4a81      	ldr	r2, [pc, #516]	@ (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800545e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005464:	e158      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800546a:	e155      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005470:	e152      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005476:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800547a:	430b      	orrs	r3, r1
 800547c:	d177      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800547e:	4b77      	ldr	r3, [pc, #476]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005484:	f003 0318 	and.w	r3, r3, #24
 8005488:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	2b18      	cmp	r3, #24
 800548e:	d86b      	bhi.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8005490:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054fd 	.word	0x080054fd
 800549c:	08005569 	.word	0x08005569
 80054a0:	08005569 	.word	0x08005569
 80054a4:	08005569 	.word	0x08005569
 80054a8:	08005569 	.word	0x08005569
 80054ac:	08005569 	.word	0x08005569
 80054b0:	08005569 	.word	0x08005569
 80054b4:	08005569 	.word	0x08005569
 80054b8:	08005505 	.word	0x08005505
 80054bc:	08005569 	.word	0x08005569
 80054c0:	08005569 	.word	0x08005569
 80054c4:	08005569 	.word	0x08005569
 80054c8:	08005569 	.word	0x08005569
 80054cc:	08005569 	.word	0x08005569
 80054d0:	08005569 	.word	0x08005569
 80054d4:	08005569 	.word	0x08005569
 80054d8:	0800550d 	.word	0x0800550d
 80054dc:	08005569 	.word	0x08005569
 80054e0:	08005569 	.word	0x08005569
 80054e4:	08005569 	.word	0x08005569
 80054e8:	08005569 	.word	0x08005569
 80054ec:	08005569 	.word	0x08005569
 80054f0:	08005569 	.word	0x08005569
 80054f4:	08005569 	.word	0x08005569
 80054f8:	08005527 	.word	0x08005527
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80054fc:	f7fe fa84 	bl	8003a08 <HAL_RCC_GetPCLK3Freq>
 8005500:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005502:	e109      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005504:	f7fe f93c 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005508:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800550a:	e105      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800550c:	4b53      	ldr	r3, [pc, #332]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005518:	d102      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800551a:	4b51      	ldr	r3, [pc, #324]	@ (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800551c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800551e:	e0fb      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005524:	e0f8      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005526:	4b4d      	ldr	r3, [pc, #308]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b20      	cmp	r3, #32
 8005530:	d117      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005532:	4b4a      	ldr	r3, [pc, #296]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800553e:	4b47      	ldr	r3, [pc, #284]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	0e1b      	lsrs	r3, r3, #24
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	e006      	b.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800554a:	4b44      	ldr	r3, [pc, #272]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800554c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005550:	041b      	lsls	r3, r3, #16
 8005552:	0e1b      	lsrs	r3, r3, #24
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	4a42      	ldr	r2, [pc, #264]	@ (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800555a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005560:	e0da      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005566:	e0d7      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800556c:	e0d4      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800556e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005572:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005576:	430b      	orrs	r3, r1
 8005578:	d155      	bne.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800557a:	4b38      	ldr	r3, [pc, #224]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800557c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005580:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005584:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800558c:	d013      	beq.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005594:	d844      	bhi.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800559c:	d013      	beq.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055a4:	d83c      	bhi.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d014      	beq.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055b2:	d014      	beq.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80055b4:	e034      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055b6:	f107 0318 	add.w	r3, r7, #24
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fc50 	bl	8003e60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055c4:	e0a8      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe faee 	bl	8003bac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055d4:	e0a0      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80055d6:	f7fe f8d3 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80055da:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80055dc:	e09c      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055de:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d117      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055ea:	4b1c      	ldr	r3, [pc, #112]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80055f6:	4b19      	ldr	r3, [pc, #100]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	0e1b      	lsrs	r3, r3, #24
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	e006      	b.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8005602:	4b16      	ldr	r3, [pc, #88]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	0e1b      	lsrs	r3, r3, #24
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	4a14      	ldr	r2, [pc, #80]	@ (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005618:	e07e      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800561e:	e07b      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005624:	e078      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800562a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800562e:	430b      	orrs	r3, r1
 8005630:	d138      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005632:	4b0a      	ldr	r3, [pc, #40]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800563c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800563e:	4b07      	ldr	r3, [pc, #28]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d10d      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8005652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005656:	637b      	str	r3, [r7, #52]	@ 0x34
 8005658:	e05e      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800565a:	bf00      	nop
 800565c:	46020c00 	.word	0x46020c00
 8005660:	00f42400 	.word	0x00f42400
 8005664:	080086c8 	.word	0x080086c8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005668:	4b2e      	ldr	r3, [pc, #184]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800566a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800566e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005676:	d112      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567e:	d10e      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005680:	4b28      	ldr	r3, [pc, #160]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800568a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800568e:	d102      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8005690:	23fa      	movs	r3, #250	@ 0xfa
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005694:	e040      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005696:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800569a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800569c:	e03c      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a2:	e039      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80056a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80056ac:	430b      	orrs	r3, r1
 80056ae:	d131      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80056b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80056b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80056ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80056bc:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c8:	d105      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80056d0:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d4:	e020      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80056d6:	4b13      	ldr	r3, [pc, #76]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e2:	d106      	bne.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80056e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ea:	d102      	bne.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80056ec:	4b0f      	ldr	r3, [pc, #60]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80056f0:	e012      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80056f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fe:	d106      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005706:	d102      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8005708:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800570a:	637b      	str	r3, [r7, #52]	@ 0x34
 800570c:	e004      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	637b      	str	r3, [r7, #52]	@ 0x34
 8005712:	e001      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800571a:	4618      	mov	r0, r3
 800571c:	3738      	adds	r7, #56	@ 0x38
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	46020c00 	.word	0x46020c00
 8005728:	02dc6c00 	.word	0x02dc6c00
 800572c:	016e3600 	.word	0x016e3600
 8005730:	00f42400 	.word	0x00f42400

08005734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e049      	b.n	80057da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f841 	bl	80057e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f000 fa58 	bl	8005c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d001      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e072      	b.n	80058f6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a35      	ldr	r2, [pc, #212]	@ (8005904 <HAL_TIM_Base_Start_IT+0x10c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d040      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a34      	ldr	r2, [pc, #208]	@ (8005908 <HAL_TIM_Base_Start_IT+0x110>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d03b      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005844:	d036      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800584e:	d031      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2d      	ldr	r2, [pc, #180]	@ (800590c <HAL_TIM_Base_Start_IT+0x114>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d02c      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2c      	ldr	r2, [pc, #176]	@ (8005910 <HAL_TIM_Base_Start_IT+0x118>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d027      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2a      	ldr	r2, [pc, #168]	@ (8005914 <HAL_TIM_Base_Start_IT+0x11c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d022      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a29      	ldr	r2, [pc, #164]	@ (8005918 <HAL_TIM_Base_Start_IT+0x120>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d01d      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a27      	ldr	r2, [pc, #156]	@ (800591c <HAL_TIM_Base_Start_IT+0x124>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d018      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a26      	ldr	r2, [pc, #152]	@ (8005920 <HAL_TIM_Base_Start_IT+0x128>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a24      	ldr	r2, [pc, #144]	@ (8005924 <HAL_TIM_Base_Start_IT+0x12c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00e      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a23      	ldr	r2, [pc, #140]	@ (8005928 <HAL_TIM_Base_Start_IT+0x130>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d009      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a21      	ldr	r2, [pc, #132]	@ (800592c <HAL_TIM_Base_Start_IT+0x134>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xbc>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a20      	ldr	r2, [pc, #128]	@ (8005930 <HAL_TIM_Base_Start_IT+0x138>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d115      	bne.n	80058e0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005934 <HAL_TIM_Base_Start_IT+0x13c>)
 80058bc:	4013      	ands	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d015      	beq.n	80058f2 <HAL_TIM_Base_Start_IT+0xfa>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058cc:	d011      	beq.n	80058f2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058de:	e008      	b.n	80058f2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e000      	b.n	80058f4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40012c00 	.word	0x40012c00
 8005908:	50012c00 	.word	0x50012c00
 800590c:	40000400 	.word	0x40000400
 8005910:	50000400 	.word	0x50000400
 8005914:	40000800 	.word	0x40000800
 8005918:	50000800 	.word	0x50000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	50000c00 	.word	0x50000c00
 8005924:	40013400 	.word	0x40013400
 8005928:	50013400 	.word	0x50013400
 800592c:	40014000 	.word	0x40014000
 8005930:	50014000 	.word	0x50014000
 8005934:	00010007 	.word	0x00010007

08005938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d020      	beq.n	800599c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01b      	beq.n	800599c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0202 	mvn.w	r2, #2
 800596c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f931 	bl	8005bea <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f923 	bl	8005bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f934 	bl	8005bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d020      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0204 	mvn.w	r2, #4
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f90b 	bl	8005bea <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8fd 	bl	8005bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f90e 	bl	8005bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0208 	mvn.w	r2, #8
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2204      	movs	r2, #4
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8e5 	bl	8005bea <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8d7 	bl	8005bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8e8 	bl	8005bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d020      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01b      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0210 	mvn.w	r2, #16
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2208      	movs	r2, #8
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f8bf 	bl	8005bea <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f8b1 	bl	8005bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f8c2 	bl	8005bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0201 	mvn.w	r2, #1
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb fc76 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f9b5 	bl	8005e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f9ad 	bl	8005e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00c      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f87c 	bl	8005c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00c      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f06f 0220 	mvn.w	r2, #32
 8005b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f975 	bl	8005e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00c      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f981 	bl	8005e64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f979 	bl	8005e78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00c      	beq.n	8005baa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f971 	bl	8005e8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f969 	bl	8005ea0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a6b      	ldr	r2, [pc, #428]	@ (8005de8 <TIM_Base_SetConfig+0x1c0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d02b      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a6a      	ldr	r2, [pc, #424]	@ (8005dec <TIM_Base_SetConfig+0x1c4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d027      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4e:	d023      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c56:	d01f      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a65      	ldr	r2, [pc, #404]	@ (8005df0 <TIM_Base_SetConfig+0x1c8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d01b      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a64      	ldr	r2, [pc, #400]	@ (8005df4 <TIM_Base_SetConfig+0x1cc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d017      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a63      	ldr	r2, [pc, #396]	@ (8005df8 <TIM_Base_SetConfig+0x1d0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d013      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a62      	ldr	r2, [pc, #392]	@ (8005dfc <TIM_Base_SetConfig+0x1d4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00f      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a61      	ldr	r2, [pc, #388]	@ (8005e00 <TIM_Base_SetConfig+0x1d8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00b      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a60      	ldr	r2, [pc, #384]	@ (8005e04 <TIM_Base_SetConfig+0x1dc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d007      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a5f      	ldr	r2, [pc, #380]	@ (8005e08 <TIM_Base_SetConfig+0x1e0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_Base_SetConfig+0x70>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a5e      	ldr	r2, [pc, #376]	@ (8005e0c <TIM_Base_SetConfig+0x1e4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d108      	bne.n	8005caa <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a4e      	ldr	r2, [pc, #312]	@ (8005de8 <TIM_Base_SetConfig+0x1c0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d043      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8005dec <TIM_Base_SetConfig+0x1c4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d03f      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc0:	d03b      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cc8:	d037      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a48      	ldr	r2, [pc, #288]	@ (8005df0 <TIM_Base_SetConfig+0x1c8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d033      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a47      	ldr	r2, [pc, #284]	@ (8005df4 <TIM_Base_SetConfig+0x1cc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d02f      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a46      	ldr	r2, [pc, #280]	@ (8005df8 <TIM_Base_SetConfig+0x1d0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d02b      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a45      	ldr	r2, [pc, #276]	@ (8005dfc <TIM_Base_SetConfig+0x1d4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d027      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a44      	ldr	r2, [pc, #272]	@ (8005e00 <TIM_Base_SetConfig+0x1d8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d023      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a43      	ldr	r2, [pc, #268]	@ (8005e04 <TIM_Base_SetConfig+0x1dc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01f      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a42      	ldr	r2, [pc, #264]	@ (8005e08 <TIM_Base_SetConfig+0x1e0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01b      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a41      	ldr	r2, [pc, #260]	@ (8005e0c <TIM_Base_SetConfig+0x1e4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d017      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a40      	ldr	r2, [pc, #256]	@ (8005e10 <TIM_Base_SetConfig+0x1e8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a3f      	ldr	r2, [pc, #252]	@ (8005e14 <TIM_Base_SetConfig+0x1ec>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00f      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e18 <TIM_Base_SetConfig+0x1f0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a3d      	ldr	r2, [pc, #244]	@ (8005e1c <TIM_Base_SetConfig+0x1f4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e20 <TIM_Base_SetConfig+0x1f8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_Base_SetConfig+0x112>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a3b      	ldr	r2, [pc, #236]	@ (8005e24 <TIM_Base_SetConfig+0x1fc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <TIM_Base_SetConfig+0x1c0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d023      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <TIM_Base_SetConfig+0x1c4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01f      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a22      	ldr	r2, [pc, #136]	@ (8005e08 <TIM_Base_SetConfig+0x1e0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01b      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a21      	ldr	r2, [pc, #132]	@ (8005e0c <TIM_Base_SetConfig+0x1e4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d017      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a20      	ldr	r2, [pc, #128]	@ (8005e10 <TIM_Base_SetConfig+0x1e8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1f      	ldr	r2, [pc, #124]	@ (8005e14 <TIM_Base_SetConfig+0x1ec>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00f      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005e18 <TIM_Base_SetConfig+0x1f0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00b      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <TIM_Base_SetConfig+0x1f4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a1c      	ldr	r2, [pc, #112]	@ (8005e20 <TIM_Base_SetConfig+0x1f8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_Base_SetConfig+0x192>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e24 <TIM_Base_SetConfig+0x1fc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d103      	bne.n	8005dc2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f043 0204 	orr.w	r2, r3, #4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	50012c00 	.word	0x50012c00
 8005df0:	40000400 	.word	0x40000400
 8005df4:	50000400 	.word	0x50000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	50000800 	.word	0x50000800
 8005e00:	40000c00 	.word	0x40000c00
 8005e04:	50000c00 	.word	0x50000c00
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	50013400 	.word	0x50013400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	50014000 	.word	0x50014000
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	50014400 	.word	0x50014400
 8005e20:	40014800 	.word	0x40014800
 8005e24:	50014800 	.word	0x50014800

08005e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e042      	b.n	8005f4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f83b 	bl	8005f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2224      	movs	r2, #36	@ 0x24
 8005ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fa72 	bl	80063e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8cd 	bl	80060a4 <UART_SetConfig>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e01b      	b.n	8005f4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 faf1 	bl	800652c <UART_CheckIdleState>
 8005f4a:	4603      	mov	r3, r0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	@ 0x28
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	f040 808b 	bne.w	800609a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_UART_Transmit+0x28>
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e083      	b.n	800609c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9e:	2b80      	cmp	r3, #128	@ 0x80
 8005fa0:	d107      	bne.n	8005fb2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fb0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2221      	movs	r2, #33	@ 0x21
 8005fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fc2:	f7fb fe1b 	bl	8001bfc <HAL_GetTick>
 8005fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe0:	d108      	bne.n	8005ff4 <HAL_UART_Transmit+0x8c>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	e003      	b.n	8005ffc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ffc:	e030      	b.n	8006060 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2200      	movs	r2, #0
 8006006:	2180      	movs	r1, #128	@ 0x80
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fb39 	bl	8006680 <UART_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e03d      	b.n	800609c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006034:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	3302      	adds	r3, #2
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	e007      	b.n	800604e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3301      	adds	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1c8      	bne.n	8005ffe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2200      	movs	r2, #0
 8006074:	2140      	movs	r1, #64	@ 0x40
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fb02 	bl	8006680 <UART_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e006      	b.n	800609c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a8:	b094      	sub	sp, #80	@ 0x50
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b7e      	ldr	r3, [pc, #504]	@ (80062b4 <UART_SetConfig+0x210>)
 80060ba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4977      	ldr	r1, [pc, #476]	@ (80062b8 <UART_SetConfig+0x214>)
 80060dc:	4019      	ands	r1, r3
 80060de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e4:	430b      	orrs	r3, r1
 80060e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	68d9      	ldr	r1, [r3, #12]
 80060f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	ea40 0301 	orr.w	r3, r0, r1
 80060fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b6a      	ldr	r3, [pc, #424]	@ (80062b4 <UART_SetConfig+0x210>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d009      	beq.n	8006124 <UART_SetConfig+0x80>
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b69      	ldr	r3, [pc, #420]	@ (80062bc <UART_SetConfig+0x218>)
 8006116:	429a      	cmp	r2, r3
 8006118:	d004      	beq.n	8006124 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800611a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611c:	6a1a      	ldr	r2, [r3, #32]
 800611e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006120:	4313      	orrs	r3, r2
 8006122:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800612e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006138:	430b      	orrs	r3, r1
 800613a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	f023 000f 	bic.w	r0, r3, #15
 8006146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006148:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	ea40 0301 	orr.w	r3, r0, r1
 8006152:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b59      	ldr	r3, [pc, #356]	@ (80062c0 <UART_SetConfig+0x21c>)
 800615a:	429a      	cmp	r2, r3
 800615c:	d102      	bne.n	8006164 <UART_SetConfig+0xc0>
 800615e:	2301      	movs	r3, #1
 8006160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006162:	e029      	b.n	80061b8 <UART_SetConfig+0x114>
 8006164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b56      	ldr	r3, [pc, #344]	@ (80062c4 <UART_SetConfig+0x220>)
 800616a:	429a      	cmp	r2, r3
 800616c:	d102      	bne.n	8006174 <UART_SetConfig+0xd0>
 800616e:	2302      	movs	r3, #2
 8006170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006172:	e021      	b.n	80061b8 <UART_SetConfig+0x114>
 8006174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	4b53      	ldr	r3, [pc, #332]	@ (80062c8 <UART_SetConfig+0x224>)
 800617a:	429a      	cmp	r2, r3
 800617c:	d102      	bne.n	8006184 <UART_SetConfig+0xe0>
 800617e:	2304      	movs	r3, #4
 8006180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006182:	e019      	b.n	80061b8 <UART_SetConfig+0x114>
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	4b50      	ldr	r3, [pc, #320]	@ (80062cc <UART_SetConfig+0x228>)
 800618a:	429a      	cmp	r2, r3
 800618c:	d102      	bne.n	8006194 <UART_SetConfig+0xf0>
 800618e:	2308      	movs	r3, #8
 8006190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006192:	e011      	b.n	80061b8 <UART_SetConfig+0x114>
 8006194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b4d      	ldr	r3, [pc, #308]	@ (80062d0 <UART_SetConfig+0x22c>)
 800619a:	429a      	cmp	r2, r3
 800619c:	d102      	bne.n	80061a4 <UART_SetConfig+0x100>
 800619e:	2310      	movs	r3, #16
 80061a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061a2:	e009      	b.n	80061b8 <UART_SetConfig+0x114>
 80061a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b42      	ldr	r3, [pc, #264]	@ (80062b4 <UART_SetConfig+0x210>)
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d102      	bne.n	80061b4 <UART_SetConfig+0x110>
 80061ae:	2320      	movs	r3, #32
 80061b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061b2:	e001      	b.n	80061b8 <UART_SetConfig+0x114>
 80061b4:	2300      	movs	r3, #0
 80061b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b3d      	ldr	r3, [pc, #244]	@ (80062b4 <UART_SetConfig+0x210>)
 80061be:	429a      	cmp	r2, r3
 80061c0:	d005      	beq.n	80061ce <UART_SetConfig+0x12a>
 80061c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b3d      	ldr	r3, [pc, #244]	@ (80062bc <UART_SetConfig+0x218>)
 80061c8:	429a      	cmp	r2, r3
 80061ca:	f040 8085 	bne.w	80062d8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80061ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061d0:	2200      	movs	r2, #0
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80061d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80061da:	f7fe f8f5 	bl	80043c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80061de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80061e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80e8 	beq.w	80063b8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	4a39      	ldr	r2, [pc, #228]	@ (80062d4 <UART_SetConfig+0x230>)
 80061ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f2:	461a      	mov	r2, r3
 80061f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061fa:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	4413      	add	r3, r2
 8006206:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006208:	429a      	cmp	r2, r3
 800620a:	d305      	bcc.n	8006218 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006212:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006214:	429a      	cmp	r2, r3
 8006216:	d903      	bls.n	8006220 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800621e:	e048      	b.n	80062b2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006222:	2200      	movs	r2, #0
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	61fa      	str	r2, [r7, #28]
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	4a29      	ldr	r2, [pc, #164]	@ (80062d4 <UART_SetConfig+0x230>)
 800622e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006232:	b29b      	uxth	r3, r3
 8006234:	2200      	movs	r2, #0
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	617a      	str	r2, [r7, #20]
 800623a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800623e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006242:	f7fa f81f 	bl	8000284 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	020b      	lsls	r3, r1, #8
 8006258:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800625c:	0202      	lsls	r2, r0, #8
 800625e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006260:	6849      	ldr	r1, [r1, #4]
 8006262:	0849      	lsrs	r1, r1, #1
 8006264:	2000      	movs	r0, #0
 8006266:	460c      	mov	r4, r1
 8006268:	4605      	mov	r5, r0
 800626a:	eb12 0804 	adds.w	r8, r2, r4
 800626e:	eb43 0905 	adc.w	r9, r3, r5
 8006272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	60fa      	str	r2, [r7, #12]
 800627c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006280:	4640      	mov	r0, r8
 8006282:	4649      	mov	r1, r9
 8006284:	f7f9 fffe 	bl	8000284 <__aeabi_uldivmod>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4613      	mov	r3, r2
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006296:	d308      	bcc.n	80062aa <UART_SetConfig+0x206>
 8006298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629e:	d204      	bcs.n	80062aa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062a6:	60da      	str	r2, [r3, #12]
 80062a8:	e003      	b.n	80062b2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80062b0:	e082      	b.n	80063b8 <UART_SetConfig+0x314>
 80062b2:	e081      	b.n	80063b8 <UART_SetConfig+0x314>
 80062b4:	46002400 	.word	0x46002400
 80062b8:	cfff69f3 	.word	0xcfff69f3
 80062bc:	56002400 	.word	0x56002400
 80062c0:	40013800 	.word	0x40013800
 80062c4:	40004400 	.word	0x40004400
 80062c8:	40004800 	.word	0x40004800
 80062cc:	40004c00 	.word	0x40004c00
 80062d0:	40005000 	.word	0x40005000
 80062d4:	08008794 	.word	0x08008794
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e0:	d13c      	bne.n	800635c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80062e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062e4:	2200      	movs	r2, #0
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ee:	f7fe f86b 	bl	80043c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80062f2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d05e      	beq.n	80063b8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	4a39      	ldr	r2, [pc, #228]	@ (80063e4 <UART_SetConfig+0x340>)
 8006300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006304:	461a      	mov	r2, r3
 8006306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006308:	fbb3 f3f2 	udiv	r3, r3, r2
 800630c:	005a      	lsls	r2, r3, #1
 800630e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	441a      	add	r2, r3
 8006316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	fbb2 f3f3 	udiv	r3, r2, r3
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006322:	2b0f      	cmp	r3, #15
 8006324:	d916      	bls.n	8006354 <UART_SetConfig+0x2b0>
 8006326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800632c:	d212      	bcs.n	8006354 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800632e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006330:	b29b      	uxth	r3, r3
 8006332:	f023 030f 	bic.w	r3, r3, #15
 8006336:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	b29b      	uxth	r3, r3
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	b29a      	uxth	r2, r3
 8006344:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006346:	4313      	orrs	r3, r2
 8006348:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006350:	60da      	str	r2, [r3, #12]
 8006352:	e031      	b.n	80063b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800635a:	e02d      	b.n	80063b8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800635c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800635e:	2200      	movs	r2, #0
 8006360:	469a      	mov	sl, r3
 8006362:	4693      	mov	fp, r2
 8006364:	4650      	mov	r0, sl
 8006366:	4659      	mov	r1, fp
 8006368:	f7fe f82e 	bl	80043c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800636c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800636e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d021      	beq.n	80063b8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	4a1a      	ldr	r2, [pc, #104]	@ (80063e4 <UART_SetConfig+0x340>)
 800637a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800637e:	461a      	mov	r2, r3
 8006380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006382:	fbb3 f2f2 	udiv	r2, r3, r2
 8006386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	441a      	add	r2, r3
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	fbb2 f3f3 	udiv	r3, r2, r3
 8006396:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639a:	2b0f      	cmp	r3, #15
 800639c:	d909      	bls.n	80063b2 <UART_SetConfig+0x30e>
 800639e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a4:	d205      	bcs.n	80063b2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	e002      	b.n	80063b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ba:	2201      	movs	r2, #1
 80063bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80063c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c2:	2201      	movs	r2, #1
 80063c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ca:	2200      	movs	r2, #0
 80063cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d0:	2200      	movs	r2, #0
 80063d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3750      	adds	r7, #80	@ 0x50
 80063dc:	46bd      	mov	sp, r7
 80063de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063e2:	bf00      	nop
 80063e4:	08008794 	.word	0x08008794

080063e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01a      	beq.n	80064fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064e6:	d10a      	bne.n	80064fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b098      	sub	sp, #96	@ 0x60
 8006530:	af02      	add	r7, sp, #8
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800653c:	f7fb fb5e 	bl	8001bfc <HAL_GetTick>
 8006540:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b08      	cmp	r3, #8
 800654e:	d12f      	bne.n	80065b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006550:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f88e 	bl	8006680 <UART_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d022      	beq.n	80065b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800657e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006588:	647b      	str	r3, [r7, #68]	@ 0x44
 800658a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800658e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e6      	bne.n	800656a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e063      	b.n	8006678 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d149      	bne.n	8006652 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c6:	2200      	movs	r2, #0
 80065c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f857 	bl	8006680 <UART_WaitOnFlagUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d03c      	beq.n	8006652 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	623b      	str	r3, [r7, #32]
   return(result);
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80065f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e6      	bne.n	80065d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	60fb      	str	r3, [r7, #12]
   return(result);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800662a:	61fa      	str	r2, [r7, #28]
 800662c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	69b9      	ldr	r1, [r7, #24]
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	617b      	str	r3, [r7, #20]
   return(result);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e5      	bne.n	800660a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e012      	b.n	8006678 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3758      	adds	r7, #88	@ 0x58
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006690:	e04f      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d04b      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800669a:	f7fb faaf 	bl	8001bfc <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d302      	bcc.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e04e      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d037      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b80      	cmp	r3, #128	@ 0x80
 80066c6:	d034      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b40      	cmp	r3, #64	@ 0x40
 80066cc:	d031      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d110      	bne.n	80066fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2208      	movs	r2, #8
 80066e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f838 	bl	800675a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2208      	movs	r2, #8
 80066ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e029      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800670c:	d111      	bne.n	8006732 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f81e 	bl	800675a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e00f      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	429a      	cmp	r2, r3
 800674e:	d0a0      	beq.n	8006692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800675a:	b480      	push	{r7}
 800675c:	b095      	sub	sp, #84	@ 0x54
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006780:	643b      	str	r3, [r7, #64]	@ 0x40
 8006782:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006786:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e6      	bne.n	8006762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3308      	adds	r3, #8
 80067b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e3      	bne.n	8006794 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d118      	bne.n	8006806 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f023 0310 	bic.w	r3, r3, #16
 80067e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6979      	ldr	r1, [r7, #20]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e6      	bne.n	80067d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800681a:	bf00      	nop
 800681c:	3754      	adds	r7, #84	@ 0x54
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <std>:
 8006828:	2300      	movs	r3, #0
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
 800682e:	6083      	str	r3, [r0, #8]
 8006830:	8181      	strh	r1, [r0, #12]
 8006832:	4619      	mov	r1, r3
 8006834:	6643      	str	r3, [r0, #100]	@ 0x64
 8006836:	81c2      	strh	r2, [r0, #14]
 8006838:	2208      	movs	r2, #8
 800683a:	6183      	str	r3, [r0, #24]
 800683c:	e9c0 3300 	strd	r3, r3, [r0]
 8006840:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006844:	305c      	adds	r0, #92	@ 0x5c
 8006846:	f000 fa19 	bl	8006c7c <memset>
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <std+0x58>)
 800684c:	6224      	str	r4, [r4, #32]
 800684e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006850:	4b0c      	ldr	r3, [pc, #48]	@ (8006884 <std+0x5c>)
 8006852:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006854:	4b0c      	ldr	r3, [pc, #48]	@ (8006888 <std+0x60>)
 8006856:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006858:	4b0c      	ldr	r3, [pc, #48]	@ (800688c <std+0x64>)
 800685a:	6323      	str	r3, [r4, #48]	@ 0x30
 800685c:	4b0c      	ldr	r3, [pc, #48]	@ (8006890 <std+0x68>)
 800685e:	429c      	cmp	r4, r3
 8006860:	d006      	beq.n	8006870 <std+0x48>
 8006862:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006866:	4294      	cmp	r4, r2
 8006868:	d002      	beq.n	8006870 <std+0x48>
 800686a:	33d0      	adds	r3, #208	@ 0xd0
 800686c:	429c      	cmp	r4, r3
 800686e:	d105      	bne.n	800687c <std+0x54>
 8006870:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006878:	f000 ba8c 	b.w	8006d94 <__retarget_lock_init_recursive>
 800687c:	bd10      	pop	{r4, pc}
 800687e:	bf00      	nop
 8006880:	08006acd 	.word	0x08006acd
 8006884:	08006aef 	.word	0x08006aef
 8006888:	08006b27 	.word	0x08006b27
 800688c:	08006b4b 	.word	0x08006b4b
 8006890:	20000394 	.word	0x20000394

08006894 <stdio_exit_handler>:
 8006894:	4a02      	ldr	r2, [pc, #8]	@ (80068a0 <stdio_exit_handler+0xc>)
 8006896:	4903      	ldr	r1, [pc, #12]	@ (80068a4 <stdio_exit_handler+0x10>)
 8006898:	4803      	ldr	r0, [pc, #12]	@ (80068a8 <stdio_exit_handler+0x14>)
 800689a:	f000 b869 	b.w	8006970 <_fwalk_sglue>
 800689e:	bf00      	nop
 80068a0:	20000028 	.word	0x20000028
 80068a4:	080078ed 	.word	0x080078ed
 80068a8:	20000038 	.word	0x20000038

080068ac <cleanup_stdio>:
 80068ac:	6841      	ldr	r1, [r0, #4]
 80068ae:	4b0c      	ldr	r3, [pc, #48]	@ (80068e0 <cleanup_stdio+0x34>)
 80068b0:	4299      	cmp	r1, r3
 80068b2:	b510      	push	{r4, lr}
 80068b4:	4604      	mov	r4, r0
 80068b6:	d001      	beq.n	80068bc <cleanup_stdio+0x10>
 80068b8:	f001 f818 	bl	80078ec <_fflush_r>
 80068bc:	68a1      	ldr	r1, [r4, #8]
 80068be:	4b09      	ldr	r3, [pc, #36]	@ (80068e4 <cleanup_stdio+0x38>)
 80068c0:	4299      	cmp	r1, r3
 80068c2:	d002      	beq.n	80068ca <cleanup_stdio+0x1e>
 80068c4:	4620      	mov	r0, r4
 80068c6:	f001 f811 	bl	80078ec <_fflush_r>
 80068ca:	68e1      	ldr	r1, [r4, #12]
 80068cc:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <cleanup_stdio+0x3c>)
 80068ce:	4299      	cmp	r1, r3
 80068d0:	d004      	beq.n	80068dc <cleanup_stdio+0x30>
 80068d2:	4620      	mov	r0, r4
 80068d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d8:	f001 b808 	b.w	80078ec <_fflush_r>
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	bf00      	nop
 80068e0:	20000394 	.word	0x20000394
 80068e4:	200003fc 	.word	0x200003fc
 80068e8:	20000464 	.word	0x20000464

080068ec <global_stdio_init.part.0>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <global_stdio_init.part.0+0x30>)
 80068f0:	2104      	movs	r1, #4
 80068f2:	4c0b      	ldr	r4, [pc, #44]	@ (8006920 <global_stdio_init.part.0+0x34>)
 80068f4:	4a0b      	ldr	r2, [pc, #44]	@ (8006924 <global_stdio_init.part.0+0x38>)
 80068f6:	4620      	mov	r0, r4
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f7ff ff94 	bl	8006828 <std>
 8006900:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006904:	2201      	movs	r2, #1
 8006906:	2109      	movs	r1, #9
 8006908:	f7ff ff8e 	bl	8006828 <std>
 800690c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006910:	2202      	movs	r2, #2
 8006912:	2112      	movs	r1, #18
 8006914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006918:	f7ff bf86 	b.w	8006828 <std>
 800691c:	200004cc 	.word	0x200004cc
 8006920:	20000394 	.word	0x20000394
 8006924:	08006895 	.word	0x08006895

08006928 <__sfp_lock_acquire>:
 8006928:	4801      	ldr	r0, [pc, #4]	@ (8006930 <__sfp_lock_acquire+0x8>)
 800692a:	f000 ba34 	b.w	8006d96 <__retarget_lock_acquire_recursive>
 800692e:	bf00      	nop
 8006930:	200004d5 	.word	0x200004d5

08006934 <__sfp_lock_release>:
 8006934:	4801      	ldr	r0, [pc, #4]	@ (800693c <__sfp_lock_release+0x8>)
 8006936:	f000 ba2f 	b.w	8006d98 <__retarget_lock_release_recursive>
 800693a:	bf00      	nop
 800693c:	200004d5 	.word	0x200004d5

08006940 <__sinit>:
 8006940:	b510      	push	{r4, lr}
 8006942:	4604      	mov	r4, r0
 8006944:	f7ff fff0 	bl	8006928 <__sfp_lock_acquire>
 8006948:	6a23      	ldr	r3, [r4, #32]
 800694a:	b11b      	cbz	r3, 8006954 <__sinit+0x14>
 800694c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006950:	f7ff bff0 	b.w	8006934 <__sfp_lock_release>
 8006954:	4b04      	ldr	r3, [pc, #16]	@ (8006968 <__sinit+0x28>)
 8006956:	6223      	str	r3, [r4, #32]
 8006958:	4b04      	ldr	r3, [pc, #16]	@ (800696c <__sinit+0x2c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1f5      	bne.n	800694c <__sinit+0xc>
 8006960:	f7ff ffc4 	bl	80068ec <global_stdio_init.part.0>
 8006964:	e7f2      	b.n	800694c <__sinit+0xc>
 8006966:	bf00      	nop
 8006968:	080068ad 	.word	0x080068ad
 800696c:	200004cc 	.word	0x200004cc

08006970 <_fwalk_sglue>:
 8006970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006974:	4607      	mov	r7, r0
 8006976:	4688      	mov	r8, r1
 8006978:	4614      	mov	r4, r2
 800697a:	2600      	movs	r6, #0
 800697c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006980:	f1b9 0901 	subs.w	r9, r9, #1
 8006984:	d505      	bpl.n	8006992 <_fwalk_sglue+0x22>
 8006986:	6824      	ldr	r4, [r4, #0]
 8006988:	2c00      	cmp	r4, #0
 800698a:	d1f7      	bne.n	800697c <_fwalk_sglue+0xc>
 800698c:	4630      	mov	r0, r6
 800698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d907      	bls.n	80069a8 <_fwalk_sglue+0x38>
 8006998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800699c:	3301      	adds	r3, #1
 800699e:	d003      	beq.n	80069a8 <_fwalk_sglue+0x38>
 80069a0:	4629      	mov	r1, r5
 80069a2:	4638      	mov	r0, r7
 80069a4:	47c0      	blx	r8
 80069a6:	4306      	orrs	r6, r0
 80069a8:	3568      	adds	r5, #104	@ 0x68
 80069aa:	e7e9      	b.n	8006980 <_fwalk_sglue+0x10>

080069ac <iprintf>:
 80069ac:	b40f      	push	{r0, r1, r2, r3}
 80069ae:	b507      	push	{r0, r1, r2, lr}
 80069b0:	4906      	ldr	r1, [pc, #24]	@ (80069cc <iprintf+0x20>)
 80069b2:	ab04      	add	r3, sp, #16
 80069b4:	6808      	ldr	r0, [r1, #0]
 80069b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ba:	6881      	ldr	r1, [r0, #8]
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	f000 fc67 	bl	8007290 <_vfiprintf_r>
 80069c2:	b003      	add	sp, #12
 80069c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c8:	b004      	add	sp, #16
 80069ca:	4770      	bx	lr
 80069cc:	20000034 	.word	0x20000034

080069d0 <_puts_r>:
 80069d0:	6a03      	ldr	r3, [r0, #32]
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	4605      	mov	r5, r0
 80069d6:	460e      	mov	r6, r1
 80069d8:	6884      	ldr	r4, [r0, #8]
 80069da:	b90b      	cbnz	r3, 80069e0 <_puts_r+0x10>
 80069dc:	f7ff ffb0 	bl	8006940 <__sinit>
 80069e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d405      	bmi.n	80069f2 <_puts_r+0x22>
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	0598      	lsls	r0, r3, #22
 80069ea:	d402      	bmi.n	80069f2 <_puts_r+0x22>
 80069ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ee:	f000 f9d2 	bl	8006d96 <__retarget_lock_acquire_recursive>
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	0719      	lsls	r1, r3, #28
 80069f6:	d502      	bpl.n	80069fe <_puts_r+0x2e>
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d135      	bne.n	8006a6a <_puts_r+0x9a>
 80069fe:	4621      	mov	r1, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f000 f8e5 	bl	8006bd0 <__swsetup_r>
 8006a06:	b380      	cbz	r0, 8006a6a <_puts_r+0x9a>
 8006a08:	f04f 35ff 	mov.w	r5, #4294967295
 8006a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a0e:	07da      	lsls	r2, r3, #31
 8006a10:	d405      	bmi.n	8006a1e <_puts_r+0x4e>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	059b      	lsls	r3, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_puts_r+0x4e>
 8006a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a1a:	f000 f9bd 	bl	8006d98 <__retarget_lock_release_recursive>
 8006a1e:	4628      	mov	r0, r5
 8006a20:	bd70      	pop	{r4, r5, r6, pc}
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da04      	bge.n	8006a30 <_puts_r+0x60>
 8006a26:	69a2      	ldr	r2, [r4, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	dc17      	bgt.n	8006a5c <_puts_r+0x8c>
 8006a2c:	290a      	cmp	r1, #10
 8006a2e:	d015      	beq.n	8006a5c <_puts_r+0x8c>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	6022      	str	r2, [r4, #0]
 8006a36:	7019      	strb	r1, [r3, #0]
 8006a38:	68a3      	ldr	r3, [r4, #8]
 8006a3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	60a3      	str	r3, [r4, #8]
 8006a42:	2900      	cmp	r1, #0
 8006a44:	d1ed      	bne.n	8006a22 <_puts_r+0x52>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da11      	bge.n	8006a6e <_puts_r+0x9e>
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	210a      	movs	r1, #10
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f87f 	bl	8006b52 <__swbuf_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d0d7      	beq.n	8006a08 <_puts_r+0x38>
 8006a58:	250a      	movs	r5, #10
 8006a5a:	e7d7      	b.n	8006a0c <_puts_r+0x3c>
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f877 	bl	8006b52 <__swbuf_r>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1e7      	bne.n	8006a38 <_puts_r+0x68>
 8006a68:	e7ce      	b.n	8006a08 <_puts_r+0x38>
 8006a6a:	3e01      	subs	r6, #1
 8006a6c:	e7e4      	b.n	8006a38 <_puts_r+0x68>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	6022      	str	r2, [r4, #0]
 8006a74:	220a      	movs	r2, #10
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	e7ee      	b.n	8006a58 <_puts_r+0x88>
	...

08006a7c <puts>:
 8006a7c:	4b02      	ldr	r3, [pc, #8]	@ (8006a88 <puts+0xc>)
 8006a7e:	4601      	mov	r1, r0
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	f7ff bfa5 	b.w	80069d0 <_puts_r>
 8006a86:	bf00      	nop
 8006a88:	20000034 	.word	0x20000034

08006a8c <siprintf>:
 8006a8c:	b40e      	push	{r1, r2, r3}
 8006a8e:	b500      	push	{lr}
 8006a90:	b09c      	sub	sp, #112	@ 0x70
 8006a92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a96:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a98:	9002      	str	r0, [sp, #8]
 8006a9a:	9006      	str	r0, [sp, #24]
 8006a9c:	9107      	str	r1, [sp, #28]
 8006a9e:	9104      	str	r1, [sp, #16]
 8006aa0:	4808      	ldr	r0, [pc, #32]	@ (8006ac4 <siprintf+0x38>)
 8006aa2:	4909      	ldr	r1, [pc, #36]	@ (8006ac8 <siprintf+0x3c>)
 8006aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa8:	9105      	str	r1, [sp, #20]
 8006aaa:	a902      	add	r1, sp, #8
 8006aac:	6800      	ldr	r0, [r0, #0]
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	f000 fac8 	bl	8007044 <_svfiprintf_r>
 8006ab4:	9b02      	ldr	r3, [sp, #8]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	b01c      	add	sp, #112	@ 0x70
 8006abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ac0:	b003      	add	sp, #12
 8006ac2:	4770      	bx	lr
 8006ac4:	20000034 	.word	0x20000034
 8006ac8:	ffff0208 	.word	0xffff0208

08006acc <__sread>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	460c      	mov	r4, r1
 8006ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad4:	f000 f910 	bl	8006cf8 <_read_r>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	bfab      	itete	ge
 8006adc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ade:	89a3      	ldrhlt	r3, [r4, #12]
 8006ae0:	181b      	addge	r3, r3, r0
 8006ae2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ae6:	bfac      	ite	ge
 8006ae8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006aea:	81a3      	strhlt	r3, [r4, #12]
 8006aec:	bd10      	pop	{r4, pc}

08006aee <__swrite>:
 8006aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af2:	461f      	mov	r7, r3
 8006af4:	898b      	ldrh	r3, [r1, #12]
 8006af6:	4605      	mov	r5, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	05db      	lsls	r3, r3, #23
 8006afc:	4616      	mov	r6, r2
 8006afe:	d505      	bpl.n	8006b0c <__swrite+0x1e>
 8006b00:	2302      	movs	r3, #2
 8006b02:	2200      	movs	r2, #0
 8006b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b08:	f000 f8e4 	bl	8006cd4 <_lseek_r>
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	4632      	mov	r2, r6
 8006b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b14:	4628      	mov	r0, r5
 8006b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b22:	f000 b8fb 	b.w	8006d1c <_write_r>

08006b26 <__sseek>:
 8006b26:	b510      	push	{r4, lr}
 8006b28:	460c      	mov	r4, r1
 8006b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2e:	f000 f8d1 	bl	8006cd4 <_lseek_r>
 8006b32:	1c43      	adds	r3, r0, #1
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	bf15      	itete	ne
 8006b38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b42:	81a3      	strheq	r3, [r4, #12]
 8006b44:	bf18      	it	ne
 8006b46:	81a3      	strhne	r3, [r4, #12]
 8006b48:	bd10      	pop	{r4, pc}

08006b4a <__sclose>:
 8006b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4e:	f000 b8b1 	b.w	8006cb4 <_close_r>

08006b52 <__swbuf_r>:
 8006b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b54:	460e      	mov	r6, r1
 8006b56:	4614      	mov	r4, r2
 8006b58:	4605      	mov	r5, r0
 8006b5a:	b118      	cbz	r0, 8006b64 <__swbuf_r+0x12>
 8006b5c:	6a03      	ldr	r3, [r0, #32]
 8006b5e:	b90b      	cbnz	r3, 8006b64 <__swbuf_r+0x12>
 8006b60:	f7ff feee 	bl	8006940 <__sinit>
 8006b64:	69a3      	ldr	r3, [r4, #24]
 8006b66:	60a3      	str	r3, [r4, #8]
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	071a      	lsls	r2, r3, #28
 8006b6c:	d501      	bpl.n	8006b72 <__swbuf_r+0x20>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	b943      	cbnz	r3, 8006b84 <__swbuf_r+0x32>
 8006b72:	4621      	mov	r1, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 f82b 	bl	8006bd0 <__swsetup_r>
 8006b7a:	b118      	cbz	r0, 8006b84 <__swbuf_r+0x32>
 8006b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b80:	4638      	mov	r0, r7
 8006b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	b2f6      	uxtb	r6, r6
 8006b88:	6922      	ldr	r2, [r4, #16]
 8006b8a:	4637      	mov	r7, r6
 8006b8c:	1a98      	subs	r0, r3, r2
 8006b8e:	6963      	ldr	r3, [r4, #20]
 8006b90:	4283      	cmp	r3, r0
 8006b92:	dc05      	bgt.n	8006ba0 <__swbuf_r+0x4e>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fea8 	bl	80078ec <_fflush_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d1ed      	bne.n	8006b7c <__swbuf_r+0x2a>
 8006ba0:	68a3      	ldr	r3, [r4, #8]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	60a3      	str	r3, [r4, #8]
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	701e      	strb	r6, [r3, #0]
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	6962      	ldr	r2, [r4, #20]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d004      	beq.n	8006bc0 <__swbuf_r+0x6e>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	07db      	lsls	r3, r3, #31
 8006bba:	d5e1      	bpl.n	8006b80 <__swbuf_r+0x2e>
 8006bbc:	2e0a      	cmp	r6, #10
 8006bbe:	d1df      	bne.n	8006b80 <__swbuf_r+0x2e>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f000 fe92 	bl	80078ec <_fflush_r>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d0d9      	beq.n	8006b80 <__swbuf_r+0x2e>
 8006bcc:	e7d6      	b.n	8006b7c <__swbuf_r+0x2a>
	...

08006bd0 <__swsetup_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4b29      	ldr	r3, [pc, #164]	@ (8006c78 <__swsetup_r+0xa8>)
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	b118      	cbz	r0, 8006be4 <__swsetup_r+0x14>
 8006bdc:	6a03      	ldr	r3, [r0, #32]
 8006bde:	b90b      	cbnz	r3, 8006be4 <__swsetup_r+0x14>
 8006be0:	f7ff feae 	bl	8006940 <__sinit>
 8006be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be8:	0719      	lsls	r1, r3, #28
 8006bea:	d422      	bmi.n	8006c32 <__swsetup_r+0x62>
 8006bec:	06da      	lsls	r2, r3, #27
 8006bee:	d407      	bmi.n	8006c00 <__swsetup_r+0x30>
 8006bf0:	2209      	movs	r2, #9
 8006bf2:	602a      	str	r2, [r5, #0]
 8006bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	e033      	b.n	8006c68 <__swsetup_r+0x98>
 8006c00:	0758      	lsls	r0, r3, #29
 8006c02:	d512      	bpl.n	8006c2a <__swsetup_r+0x5a>
 8006c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c06:	b141      	cbz	r1, 8006c1a <__swsetup_r+0x4a>
 8006c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c0c:	4299      	cmp	r1, r3
 8006c0e:	d002      	beq.n	8006c16 <__swsetup_r+0x46>
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f8c3 	bl	8006d9c <_free_r>
 8006c16:	2300      	movs	r3, #0
 8006c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	2300      	movs	r3, #0
 8006c24:	6063      	str	r3, [r4, #4]
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	f043 0308 	orr.w	r3, r3, #8
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	b94b      	cbnz	r3, 8006c4a <__swsetup_r+0x7a>
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c40:	d003      	beq.n	8006c4a <__swsetup_r+0x7a>
 8006c42:	4621      	mov	r1, r4
 8006c44:	4628      	mov	r0, r5
 8006c46:	f000 fe9e 	bl	8007986 <__smakebuf_r>
 8006c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c4e:	f013 0201 	ands.w	r2, r3, #1
 8006c52:	d00a      	beq.n	8006c6a <__swsetup_r+0x9a>
 8006c54:	2200      	movs	r2, #0
 8006c56:	60a2      	str	r2, [r4, #8]
 8006c58:	6962      	ldr	r2, [r4, #20]
 8006c5a:	4252      	negs	r2, r2
 8006c5c:	61a2      	str	r2, [r4, #24]
 8006c5e:	6922      	ldr	r2, [r4, #16]
 8006c60:	b942      	cbnz	r2, 8006c74 <__swsetup_r+0xa4>
 8006c62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c66:	d1c5      	bne.n	8006bf4 <__swsetup_r+0x24>
 8006c68:	bd38      	pop	{r3, r4, r5, pc}
 8006c6a:	0799      	lsls	r1, r3, #30
 8006c6c:	bf58      	it	pl
 8006c6e:	6962      	ldrpl	r2, [r4, #20]
 8006c70:	60a2      	str	r2, [r4, #8]
 8006c72:	e7f4      	b.n	8006c5e <__swsetup_r+0x8e>
 8006c74:	2000      	movs	r0, #0
 8006c76:	e7f7      	b.n	8006c68 <__swsetup_r+0x98>
 8006c78:	20000034 	.word	0x20000034

08006c7c <memset>:
 8006c7c:	4402      	add	r2, r0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d100      	bne.n	8006c86 <memset+0xa>
 8006c84:	4770      	bx	lr
 8006c86:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8a:	e7f9      	b.n	8006c80 <memset+0x4>

08006c8c <strncpy>:
 8006c8c:	3901      	subs	r1, #1
 8006c8e:	4603      	mov	r3, r0
 8006c90:	b510      	push	{r4, lr}
 8006c92:	b132      	cbz	r2, 8006ca2 <strncpy+0x16>
 8006c94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c98:	3a01      	subs	r2, #1
 8006c9a:	f803 4b01 	strb.w	r4, [r3], #1
 8006c9e:	2c00      	cmp	r4, #0
 8006ca0:	d1f7      	bne.n	8006c92 <strncpy+0x6>
 8006ca2:	441a      	add	r2, r3
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d100      	bne.n	8006cac <strncpy+0x20>
 8006caa:	bd10      	pop	{r4, pc}
 8006cac:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb0:	e7f9      	b.n	8006ca6 <strncpy+0x1a>
	...

08006cb4 <_close_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4d05      	ldr	r5, [pc, #20]	@ (8006cd0 <_close_r+0x1c>)
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	f7fa fc81 	bl	80015c6 <_close>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_close_r+0x1a>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_close_r+0x1a>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	200004d0 	.word	0x200004d0

08006cd4 <_lseek_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4d06      	ldr	r5, [pc, #24]	@ (8006cf4 <_lseek_r+0x20>)
 8006cda:	4608      	mov	r0, r1
 8006cdc:	4611      	mov	r1, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f7fa fc96 	bl	8001614 <_lseek>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_lseek_r+0x1e>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_lseek_r+0x1e>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	200004d0 	.word	0x200004d0

08006cf8 <_read_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4d06      	ldr	r5, [pc, #24]	@ (8006d18 <_read_r+0x20>)
 8006cfe:	4608      	mov	r0, r1
 8006d00:	4611      	mov	r1, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	602a      	str	r2, [r5, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f7fa fc24 	bl	8001554 <_read>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_read_r+0x1e>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_read_r+0x1e>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	200004d0 	.word	0x200004d0

08006d1c <_write_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4604      	mov	r4, r0
 8006d20:	4d06      	ldr	r5, [pc, #24]	@ (8006d3c <_write_r+0x20>)
 8006d22:	4608      	mov	r0, r1
 8006d24:	4611      	mov	r1, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	602a      	str	r2, [r5, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f7fa fc2f 	bl	800158e <_write>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_write_r+0x1e>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_write_r+0x1e>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	200004d0 	.word	0x200004d0

08006d40 <__errno>:
 8006d40:	4b01      	ldr	r3, [pc, #4]	@ (8006d48 <__errno+0x8>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000034 	.word	0x20000034

08006d4c <__libc_init_array>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8006d84 <__libc_init_array+0x38>)
 8006d50:	2600      	movs	r6, #0
 8006d52:	4c0d      	ldr	r4, [pc, #52]	@ (8006d88 <__libc_init_array+0x3c>)
 8006d54:	1b64      	subs	r4, r4, r5
 8006d56:	10a4      	asrs	r4, r4, #2
 8006d58:	42a6      	cmp	r6, r4
 8006d5a:	d109      	bne.n	8006d70 <__libc_init_array+0x24>
 8006d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d8c <__libc_init_array+0x40>)
 8006d5e:	2600      	movs	r6, #0
 8006d60:	4c0b      	ldr	r4, [pc, #44]	@ (8006d90 <__libc_init_array+0x44>)
 8006d62:	f000 feeb 	bl	8007b3c <_init>
 8006d66:	1b64      	subs	r4, r4, r5
 8006d68:	10a4      	asrs	r4, r4, #2
 8006d6a:	42a6      	cmp	r6, r4
 8006d6c:	d105      	bne.n	8006d7a <__libc_init_array+0x2e>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d74:	3601      	adds	r6, #1
 8006d76:	4798      	blx	r3
 8006d78:	e7ee      	b.n	8006d58 <__libc_init_array+0xc>
 8006d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7e:	3601      	adds	r6, #1
 8006d80:	4798      	blx	r3
 8006d82:	e7f2      	b.n	8006d6a <__libc_init_array+0x1e>
 8006d84:	080087e8 	.word	0x080087e8
 8006d88:	080087e8 	.word	0x080087e8
 8006d8c:	080087e8 	.word	0x080087e8
 8006d90:	080087ec 	.word	0x080087ec

08006d94 <__retarget_lock_init_recursive>:
 8006d94:	4770      	bx	lr

08006d96 <__retarget_lock_acquire_recursive>:
 8006d96:	4770      	bx	lr

08006d98 <__retarget_lock_release_recursive>:
 8006d98:	4770      	bx	lr
	...

08006d9c <_free_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4605      	mov	r5, r0
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d041      	beq.n	8006e28 <_free_r+0x8c>
 8006da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da8:	1f0c      	subs	r4, r1, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bfb8      	it	lt
 8006dae:	18e4      	addlt	r4, r4, r3
 8006db0:	f000 f8e0 	bl	8006f74 <__malloc_lock>
 8006db4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e2c <_free_r+0x90>)
 8006db6:	6813      	ldr	r3, [r2, #0]
 8006db8:	b933      	cbnz	r3, 8006dc8 <_free_r+0x2c>
 8006dba:	6063      	str	r3, [r4, #4]
 8006dbc:	6014      	str	r4, [r2, #0]
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc4:	f000 b8dc 	b.w	8006f80 <__malloc_unlock>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d908      	bls.n	8006dde <_free_r+0x42>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf01      	itttt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	e7ed      	b.n	8006dba <_free_r+0x1e>
 8006dde:	461a      	mov	r2, r3
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	b10b      	cbz	r3, 8006de8 <_free_r+0x4c>
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	d9fa      	bls.n	8006dde <_free_r+0x42>
 8006de8:	6811      	ldr	r1, [r2, #0]
 8006dea:	1850      	adds	r0, r2, r1
 8006dec:	42a0      	cmp	r0, r4
 8006dee:	d10b      	bne.n	8006e08 <_free_r+0x6c>
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	4401      	add	r1, r0
 8006df4:	1850      	adds	r0, r2, r1
 8006df6:	6011      	str	r1, [r2, #0]
 8006df8:	4283      	cmp	r3, r0
 8006dfa:	d1e0      	bne.n	8006dbe <_free_r+0x22>
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4408      	add	r0, r1
 8006e02:	6053      	str	r3, [r2, #4]
 8006e04:	6010      	str	r0, [r2, #0]
 8006e06:	e7da      	b.n	8006dbe <_free_r+0x22>
 8006e08:	d902      	bls.n	8006e10 <_free_r+0x74>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	e7d6      	b.n	8006dbe <_free_r+0x22>
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	1821      	adds	r1, r4, r0
 8006e14:	428b      	cmp	r3, r1
 8006e16:	bf02      	ittt	eq
 8006e18:	6819      	ldreq	r1, [r3, #0]
 8006e1a:	685b      	ldreq	r3, [r3, #4]
 8006e1c:	1809      	addeq	r1, r1, r0
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	bf08      	it	eq
 8006e22:	6021      	streq	r1, [r4, #0]
 8006e24:	6054      	str	r4, [r2, #4]
 8006e26:	e7ca      	b.n	8006dbe <_free_r+0x22>
 8006e28:	bd38      	pop	{r3, r4, r5, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200004dc 	.word	0x200004dc

08006e30 <sbrk_aligned>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	4e0f      	ldr	r6, [pc, #60]	@ (8006e70 <sbrk_aligned+0x40>)
 8006e34:	460c      	mov	r4, r1
 8006e36:	4605      	mov	r5, r0
 8006e38:	6831      	ldr	r1, [r6, #0]
 8006e3a:	b911      	cbnz	r1, 8006e42 <sbrk_aligned+0x12>
 8006e3c:	f000 fe1c 	bl	8007a78 <_sbrk_r>
 8006e40:	6030      	str	r0, [r6, #0]
 8006e42:	4621      	mov	r1, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 fe17 	bl	8007a78 <_sbrk_r>
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	d103      	bne.n	8006e56 <sbrk_aligned+0x26>
 8006e4e:	f04f 34ff 	mov.w	r4, #4294967295
 8006e52:	4620      	mov	r0, r4
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
 8006e56:	1cc4      	adds	r4, r0, #3
 8006e58:	f024 0403 	bic.w	r4, r4, #3
 8006e5c:	42a0      	cmp	r0, r4
 8006e5e:	d0f8      	beq.n	8006e52 <sbrk_aligned+0x22>
 8006e60:	1a21      	subs	r1, r4, r0
 8006e62:	4628      	mov	r0, r5
 8006e64:	f000 fe08 	bl	8007a78 <_sbrk_r>
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d1f2      	bne.n	8006e52 <sbrk_aligned+0x22>
 8006e6c:	e7ef      	b.n	8006e4e <sbrk_aligned+0x1e>
 8006e6e:	bf00      	nop
 8006e70:	200004d8 	.word	0x200004d8

08006e74 <_malloc_r>:
 8006e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e78:	1ccd      	adds	r5, r1, #3
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	f025 0503 	bic.w	r5, r5, #3
 8006e80:	3508      	adds	r5, #8
 8006e82:	2d0c      	cmp	r5, #12
 8006e84:	bf38      	it	cc
 8006e86:	250c      	movcc	r5, #12
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	db01      	blt.n	8006e90 <_malloc_r+0x1c>
 8006e8c:	42a9      	cmp	r1, r5
 8006e8e:	d904      	bls.n	8006e9a <_malloc_r+0x26>
 8006e90:	230c      	movs	r3, #12
 8006e92:	6033      	str	r3, [r6, #0]
 8006e94:	2000      	movs	r0, #0
 8006e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f70 <_malloc_r+0xfc>
 8006e9e:	f000 f869 	bl	8006f74 <__malloc_lock>
 8006ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea6:	461c      	mov	r4, r3
 8006ea8:	bb44      	cbnz	r4, 8006efc <_malloc_r+0x88>
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4630      	mov	r0, r6
 8006eae:	f7ff ffbf 	bl	8006e30 <sbrk_aligned>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	d158      	bne.n	8006f6a <_malloc_r+0xf6>
 8006eb8:	f8d8 4000 	ldr.w	r4, [r8]
 8006ebc:	4627      	mov	r7, r4
 8006ebe:	2f00      	cmp	r7, #0
 8006ec0:	d143      	bne.n	8006f4a <_malloc_r+0xd6>
 8006ec2:	2c00      	cmp	r4, #0
 8006ec4:	d04b      	beq.n	8006f5e <_malloc_r+0xea>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	4639      	mov	r1, r7
 8006eca:	4630      	mov	r0, r6
 8006ecc:	eb04 0903 	add.w	r9, r4, r3
 8006ed0:	f000 fdd2 	bl	8007a78 <_sbrk_r>
 8006ed4:	4581      	cmp	r9, r0
 8006ed6:	d142      	bne.n	8006f5e <_malloc_r+0xea>
 8006ed8:	6821      	ldr	r1, [r4, #0]
 8006eda:	4630      	mov	r0, r6
 8006edc:	1a6d      	subs	r5, r5, r1
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7ff ffa6 	bl	8006e30 <sbrk_aligned>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d03a      	beq.n	8006f5e <_malloc_r+0xea>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	442b      	add	r3, r5
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	f8d8 3000 	ldr.w	r3, [r8]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	bb62      	cbnz	r2, 8006f50 <_malloc_r+0xdc>
 8006ef6:	f8c8 7000 	str.w	r7, [r8]
 8006efa:	e00f      	b.n	8006f1c <_malloc_r+0xa8>
 8006efc:	6822      	ldr	r2, [r4, #0]
 8006efe:	1b52      	subs	r2, r2, r5
 8006f00:	d420      	bmi.n	8006f44 <_malloc_r+0xd0>
 8006f02:	2a0b      	cmp	r2, #11
 8006f04:	d917      	bls.n	8006f36 <_malloc_r+0xc2>
 8006f06:	1961      	adds	r1, r4, r5
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	6025      	str	r5, [r4, #0]
 8006f0c:	bf18      	it	ne
 8006f0e:	6059      	strne	r1, [r3, #4]
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	bf08      	it	eq
 8006f14:	f8c8 1000 	streq.w	r1, [r8]
 8006f18:	5162      	str	r2, [r4, r5]
 8006f1a:	604b      	str	r3, [r1, #4]
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f000 f82f 	bl	8006f80 <__malloc_unlock>
 8006f22:	f104 000b 	add.w	r0, r4, #11
 8006f26:	1d23      	adds	r3, r4, #4
 8006f28:	f020 0007 	bic.w	r0, r0, #7
 8006f2c:	1ac2      	subs	r2, r0, r3
 8006f2e:	bf1c      	itt	ne
 8006f30:	1a1b      	subne	r3, r3, r0
 8006f32:	50a3      	strne	r3, [r4, r2]
 8006f34:	e7af      	b.n	8006e96 <_malloc_r+0x22>
 8006f36:	6862      	ldr	r2, [r4, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	bf0c      	ite	eq
 8006f3c:	f8c8 2000 	streq.w	r2, [r8]
 8006f40:	605a      	strne	r2, [r3, #4]
 8006f42:	e7eb      	b.n	8006f1c <_malloc_r+0xa8>
 8006f44:	4623      	mov	r3, r4
 8006f46:	6864      	ldr	r4, [r4, #4]
 8006f48:	e7ae      	b.n	8006ea8 <_malloc_r+0x34>
 8006f4a:	463c      	mov	r4, r7
 8006f4c:	687f      	ldr	r7, [r7, #4]
 8006f4e:	e7b6      	b.n	8006ebe <_malloc_r+0x4a>
 8006f50:	461a      	mov	r2, r3
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	d1fb      	bne.n	8006f50 <_malloc_r+0xdc>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	6053      	str	r3, [r2, #4]
 8006f5c:	e7de      	b.n	8006f1c <_malloc_r+0xa8>
 8006f5e:	230c      	movs	r3, #12
 8006f60:	4630      	mov	r0, r6
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	f000 f80c 	bl	8006f80 <__malloc_unlock>
 8006f68:	e794      	b.n	8006e94 <_malloc_r+0x20>
 8006f6a:	6005      	str	r5, [r0, #0]
 8006f6c:	e7d6      	b.n	8006f1c <_malloc_r+0xa8>
 8006f6e:	bf00      	nop
 8006f70:	200004dc 	.word	0x200004dc

08006f74 <__malloc_lock>:
 8006f74:	4801      	ldr	r0, [pc, #4]	@ (8006f7c <__malloc_lock+0x8>)
 8006f76:	f7ff bf0e 	b.w	8006d96 <__retarget_lock_acquire_recursive>
 8006f7a:	bf00      	nop
 8006f7c:	200004d4 	.word	0x200004d4

08006f80 <__malloc_unlock>:
 8006f80:	4801      	ldr	r0, [pc, #4]	@ (8006f88 <__malloc_unlock+0x8>)
 8006f82:	f7ff bf09 	b.w	8006d98 <__retarget_lock_release_recursive>
 8006f86:	bf00      	nop
 8006f88:	200004d4 	.word	0x200004d4

08006f8c <__ssputs_r>:
 8006f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	461f      	mov	r7, r3
 8006f92:	688e      	ldr	r6, [r1, #8]
 8006f94:	4682      	mov	sl, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	42be      	cmp	r6, r7
 8006f9a:	4690      	mov	r8, r2
 8006f9c:	680b      	ldr	r3, [r1, #0]
 8006f9e:	d82d      	bhi.n	8006ffc <__ssputs_r+0x70>
 8006fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fa8:	d026      	beq.n	8006ff8 <__ssputs_r+0x6c>
 8006faa:	6965      	ldr	r5, [r4, #20]
 8006fac:	6909      	ldr	r1, [r1, #16]
 8006fae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fb2:	eba3 0901 	sub.w	r9, r3, r1
 8006fb6:	1c7b      	adds	r3, r7, #1
 8006fb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fbc:	444b      	add	r3, r9
 8006fbe:	106d      	asrs	r5, r5, #1
 8006fc0:	429d      	cmp	r5, r3
 8006fc2:	bf38      	it	cc
 8006fc4:	461d      	movcc	r5, r3
 8006fc6:	0553      	lsls	r3, r2, #21
 8006fc8:	d527      	bpl.n	800701a <__ssputs_r+0x8e>
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7ff ff52 	bl	8006e74 <_malloc_r>
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	b360      	cbz	r0, 800702e <__ssputs_r+0xa2>
 8006fd4:	464a      	mov	r2, r9
 8006fd6:	6921      	ldr	r1, [r4, #16]
 8006fd8:	f000 fd6c 	bl	8007ab4 <memcpy>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	6126      	str	r6, [r4, #16]
 8006fea:	444e      	add	r6, r9
 8006fec:	6165      	str	r5, [r4, #20]
 8006fee:	eba5 0509 	sub.w	r5, r5, r9
 8006ff2:	6026      	str	r6, [r4, #0]
 8006ff4:	463e      	mov	r6, r7
 8006ff6:	60a5      	str	r5, [r4, #8]
 8006ff8:	42be      	cmp	r6, r7
 8006ffa:	d900      	bls.n	8006ffe <__ssputs_r+0x72>
 8006ffc:	463e      	mov	r6, r7
 8006ffe:	4632      	mov	r2, r6
 8007000:	4641      	mov	r1, r8
 8007002:	6820      	ldr	r0, [r4, #0]
 8007004:	f000 fcfb 	bl	80079fe <memmove>
 8007008:	68a3      	ldr	r3, [r4, #8]
 800700a:	2000      	movs	r0, #0
 800700c:	1b9b      	subs	r3, r3, r6
 800700e:	60a3      	str	r3, [r4, #8]
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	4433      	add	r3, r6
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701a:	462a      	mov	r2, r5
 800701c:	f000 fd57 	bl	8007ace <_realloc_r>
 8007020:	4606      	mov	r6, r0
 8007022:	2800      	cmp	r0, #0
 8007024:	d1e0      	bne.n	8006fe8 <__ssputs_r+0x5c>
 8007026:	6921      	ldr	r1, [r4, #16]
 8007028:	4650      	mov	r0, sl
 800702a:	f7ff feb7 	bl	8006d9c <_free_r>
 800702e:	230c      	movs	r3, #12
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	f8ca 3000 	str.w	r3, [sl]
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800703e:	81a3      	strh	r3, [r4, #12]
 8007040:	e7e9      	b.n	8007016 <__ssputs_r+0x8a>
	...

08007044 <_svfiprintf_r>:
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	4698      	mov	r8, r3
 800704a:	898b      	ldrh	r3, [r1, #12]
 800704c:	b09d      	sub	sp, #116	@ 0x74
 800704e:	4607      	mov	r7, r0
 8007050:	061b      	lsls	r3, r3, #24
 8007052:	460d      	mov	r5, r1
 8007054:	4614      	mov	r4, r2
 8007056:	d510      	bpl.n	800707a <_svfiprintf_r+0x36>
 8007058:	690b      	ldr	r3, [r1, #16]
 800705a:	b973      	cbnz	r3, 800707a <_svfiprintf_r+0x36>
 800705c:	2140      	movs	r1, #64	@ 0x40
 800705e:	f7ff ff09 	bl	8006e74 <_malloc_r>
 8007062:	6028      	str	r0, [r5, #0]
 8007064:	6128      	str	r0, [r5, #16]
 8007066:	b930      	cbnz	r0, 8007076 <_svfiprintf_r+0x32>
 8007068:	230c      	movs	r3, #12
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	b01d      	add	sp, #116	@ 0x74
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	2340      	movs	r3, #64	@ 0x40
 8007078:	616b      	str	r3, [r5, #20]
 800707a:	2300      	movs	r3, #0
 800707c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007080:	f04f 0901 	mov.w	r9, #1
 8007084:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8007228 <_svfiprintf_r+0x1e4>
 8007088:	9309      	str	r3, [sp, #36]	@ 0x24
 800708a:	2320      	movs	r3, #32
 800708c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007090:	2330      	movs	r3, #48	@ 0x30
 8007092:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007096:	4623      	mov	r3, r4
 8007098:	469a      	mov	sl, r3
 800709a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800709e:	b10a      	cbz	r2, 80070a4 <_svfiprintf_r+0x60>
 80070a0:	2a25      	cmp	r2, #37	@ 0x25
 80070a2:	d1f9      	bne.n	8007098 <_svfiprintf_r+0x54>
 80070a4:	ebba 0b04 	subs.w	fp, sl, r4
 80070a8:	d00b      	beq.n	80070c2 <_svfiprintf_r+0x7e>
 80070aa:	465b      	mov	r3, fp
 80070ac:	4622      	mov	r2, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	4638      	mov	r0, r7
 80070b2:	f7ff ff6b 	bl	8006f8c <__ssputs_r>
 80070b6:	3001      	adds	r0, #1
 80070b8:	f000 80a7 	beq.w	800720a <_svfiprintf_r+0x1c6>
 80070bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070be:	445a      	add	r2, fp
 80070c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80070c2:	f89a 3000 	ldrb.w	r3, [sl]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 809f 	beq.w	800720a <_svfiprintf_r+0x1c6>
 80070cc:	2300      	movs	r3, #0
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	f10a 0a01 	add.w	sl, sl, #1
 80070d6:	9304      	str	r3, [sp, #16]
 80070d8:	9307      	str	r3, [sp, #28]
 80070da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070de:	931a      	str	r3, [sp, #104]	@ 0x68
 80070e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e4:	4654      	mov	r4, sl
 80070e6:	2205      	movs	r2, #5
 80070e8:	484f      	ldr	r0, [pc, #316]	@ (8007228 <_svfiprintf_r+0x1e4>)
 80070ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ee:	f000 fcd3 	bl	8007a98 <memchr>
 80070f2:	9a04      	ldr	r2, [sp, #16]
 80070f4:	b9d8      	cbnz	r0, 800712e <_svfiprintf_r+0xea>
 80070f6:	06d0      	lsls	r0, r2, #27
 80070f8:	bf44      	itt	mi
 80070fa:	2320      	movmi	r3, #32
 80070fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007100:	0711      	lsls	r1, r2, #28
 8007102:	bf44      	itt	mi
 8007104:	232b      	movmi	r3, #43	@ 0x2b
 8007106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800710a:	f89a 3000 	ldrb.w	r3, [sl]
 800710e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007110:	d015      	beq.n	800713e <_svfiprintf_r+0xfa>
 8007112:	9a07      	ldr	r2, [sp, #28]
 8007114:	4654      	mov	r4, sl
 8007116:	2000      	movs	r0, #0
 8007118:	f04f 0c0a 	mov.w	ip, #10
 800711c:	4621      	mov	r1, r4
 800711e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007122:	3b30      	subs	r3, #48	@ 0x30
 8007124:	2b09      	cmp	r3, #9
 8007126:	d94b      	bls.n	80071c0 <_svfiprintf_r+0x17c>
 8007128:	b1b0      	cbz	r0, 8007158 <_svfiprintf_r+0x114>
 800712a:	9207      	str	r2, [sp, #28]
 800712c:	e014      	b.n	8007158 <_svfiprintf_r+0x114>
 800712e:	eba0 0308 	sub.w	r3, r0, r8
 8007132:	46a2      	mov	sl, r4
 8007134:	fa09 f303 	lsl.w	r3, r9, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	9304      	str	r3, [sp, #16]
 800713c:	e7d2      	b.n	80070e4 <_svfiprintf_r+0xa0>
 800713e:	9b03      	ldr	r3, [sp, #12]
 8007140:	1d19      	adds	r1, r3, #4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	9103      	str	r1, [sp, #12]
 8007148:	bfbb      	ittet	lt
 800714a:	425b      	neglt	r3, r3
 800714c:	f042 0202 	orrlt.w	r2, r2, #2
 8007150:	9307      	strge	r3, [sp, #28]
 8007152:	9307      	strlt	r3, [sp, #28]
 8007154:	bfb8      	it	lt
 8007156:	9204      	strlt	r2, [sp, #16]
 8007158:	7823      	ldrb	r3, [r4, #0]
 800715a:	2b2e      	cmp	r3, #46	@ 0x2e
 800715c:	d10a      	bne.n	8007174 <_svfiprintf_r+0x130>
 800715e:	7863      	ldrb	r3, [r4, #1]
 8007160:	2b2a      	cmp	r3, #42	@ 0x2a
 8007162:	d132      	bne.n	80071ca <_svfiprintf_r+0x186>
 8007164:	9b03      	ldr	r3, [sp, #12]
 8007166:	3402      	adds	r4, #2
 8007168:	1d1a      	adds	r2, r3, #4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007170:	9203      	str	r2, [sp, #12]
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007238 <_svfiprintf_r+0x1f4>
 8007178:	2203      	movs	r2, #3
 800717a:	7821      	ldrb	r1, [r4, #0]
 800717c:	4650      	mov	r0, sl
 800717e:	f000 fc8b 	bl	8007a98 <memchr>
 8007182:	b138      	cbz	r0, 8007194 <_svfiprintf_r+0x150>
 8007184:	eba0 000a 	sub.w	r0, r0, sl
 8007188:	2240      	movs	r2, #64	@ 0x40
 800718a:	9b04      	ldr	r3, [sp, #16]
 800718c:	3401      	adds	r4, #1
 800718e:	4082      	lsls	r2, r0
 8007190:	4313      	orrs	r3, r2
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007198:	2206      	movs	r2, #6
 800719a:	4824      	ldr	r0, [pc, #144]	@ (800722c <_svfiprintf_r+0x1e8>)
 800719c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071a0:	f000 fc7a 	bl	8007a98 <memchr>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d036      	beq.n	8007216 <_svfiprintf_r+0x1d2>
 80071a8:	4b21      	ldr	r3, [pc, #132]	@ (8007230 <_svfiprintf_r+0x1ec>)
 80071aa:	bb1b      	cbnz	r3, 80071f4 <_svfiprintf_r+0x1b0>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	3307      	adds	r3, #7
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	3308      	adds	r3, #8
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ba:	4433      	add	r3, r6
 80071bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071be:	e76a      	b.n	8007096 <_svfiprintf_r+0x52>
 80071c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071c4:	460c      	mov	r4, r1
 80071c6:	2001      	movs	r0, #1
 80071c8:	e7a8      	b.n	800711c <_svfiprintf_r+0xd8>
 80071ca:	2300      	movs	r3, #0
 80071cc:	3401      	adds	r4, #1
 80071ce:	f04f 0c0a 	mov.w	ip, #10
 80071d2:	4619      	mov	r1, r3
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	4620      	mov	r0, r4
 80071d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071dc:	3a30      	subs	r2, #48	@ 0x30
 80071de:	2a09      	cmp	r2, #9
 80071e0:	d903      	bls.n	80071ea <_svfiprintf_r+0x1a6>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0c6      	beq.n	8007174 <_svfiprintf_r+0x130>
 80071e6:	9105      	str	r1, [sp, #20]
 80071e8:	e7c4      	b.n	8007174 <_svfiprintf_r+0x130>
 80071ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ee:	4604      	mov	r4, r0
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7f0      	b.n	80071d6 <_svfiprintf_r+0x192>
 80071f4:	ab03      	add	r3, sp, #12
 80071f6:	462a      	mov	r2, r5
 80071f8:	a904      	add	r1, sp, #16
 80071fa:	4638      	mov	r0, r7
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <_svfiprintf_r+0x1f0>)
 8007200:	f3af 8000 	nop.w
 8007204:	1c42      	adds	r2, r0, #1
 8007206:	4606      	mov	r6, r0
 8007208:	d1d6      	bne.n	80071b8 <_svfiprintf_r+0x174>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	065b      	lsls	r3, r3, #25
 800720e:	f53f af2d 	bmi.w	800706c <_svfiprintf_r+0x28>
 8007212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007214:	e72c      	b.n	8007070 <_svfiprintf_r+0x2c>
 8007216:	ab03      	add	r3, sp, #12
 8007218:	462a      	mov	r2, r5
 800721a:	a904      	add	r1, sp, #16
 800721c:	4638      	mov	r0, r7
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4b04      	ldr	r3, [pc, #16]	@ (8007234 <_svfiprintf_r+0x1f0>)
 8007222:	f000 f9bf 	bl	80075a4 <_printf_i>
 8007226:	e7ed      	b.n	8007204 <_svfiprintf_r+0x1c0>
 8007228:	080087ac 	.word	0x080087ac
 800722c:	080087b6 	.word	0x080087b6
 8007230:	00000000 	.word	0x00000000
 8007234:	08006f8d 	.word	0x08006f8d
 8007238:	080087b2 	.word	0x080087b2

0800723c <__sfputc_r>:
 800723c:	6893      	ldr	r3, [r2, #8]
 800723e:	3b01      	subs	r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	6093      	str	r3, [r2, #8]
 8007244:	b410      	push	{r4}
 8007246:	da08      	bge.n	800725a <__sfputc_r+0x1e>
 8007248:	6994      	ldr	r4, [r2, #24]
 800724a:	42a3      	cmp	r3, r4
 800724c:	db01      	blt.n	8007252 <__sfputc_r+0x16>
 800724e:	290a      	cmp	r1, #10
 8007250:	d103      	bne.n	800725a <__sfputc_r+0x1e>
 8007252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007256:	f7ff bc7c 	b.w	8006b52 <__swbuf_r>
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	1c58      	adds	r0, r3, #1
 800725e:	6010      	str	r0, [r2, #0]
 8007260:	4608      	mov	r0, r1
 8007262:	7019      	strb	r1, [r3, #0]
 8007264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007268:	4770      	bx	lr

0800726a <__sfputs_r>:
 800726a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726c:	4606      	mov	r6, r0
 800726e:	460f      	mov	r7, r1
 8007270:	4614      	mov	r4, r2
 8007272:	18d5      	adds	r5, r2, r3
 8007274:	42ac      	cmp	r4, r5
 8007276:	d101      	bne.n	800727c <__sfputs_r+0x12>
 8007278:	2000      	movs	r0, #0
 800727a:	e007      	b.n	800728c <__sfputs_r+0x22>
 800727c:	463a      	mov	r2, r7
 800727e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007282:	4630      	mov	r0, r6
 8007284:	f7ff ffda 	bl	800723c <__sfputc_r>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d1f3      	bne.n	8007274 <__sfputs_r+0xa>
 800728c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007290 <_vfiprintf_r>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	460d      	mov	r5, r1
 8007296:	b09d      	sub	sp, #116	@ 0x74
 8007298:	4614      	mov	r4, r2
 800729a:	4698      	mov	r8, r3
 800729c:	4606      	mov	r6, r0
 800729e:	b118      	cbz	r0, 80072a8 <_vfiprintf_r+0x18>
 80072a0:	6a03      	ldr	r3, [r0, #32]
 80072a2:	b90b      	cbnz	r3, 80072a8 <_vfiprintf_r+0x18>
 80072a4:	f7ff fb4c 	bl	8006940 <__sinit>
 80072a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072aa:	07d9      	lsls	r1, r3, #31
 80072ac:	d405      	bmi.n	80072ba <_vfiprintf_r+0x2a>
 80072ae:	89ab      	ldrh	r3, [r5, #12]
 80072b0:	059a      	lsls	r2, r3, #22
 80072b2:	d402      	bmi.n	80072ba <_vfiprintf_r+0x2a>
 80072b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072b6:	f7ff fd6e 	bl	8006d96 <__retarget_lock_acquire_recursive>
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	071b      	lsls	r3, r3, #28
 80072be:	d501      	bpl.n	80072c4 <_vfiprintf_r+0x34>
 80072c0:	692b      	ldr	r3, [r5, #16]
 80072c2:	b99b      	cbnz	r3, 80072ec <_vfiprintf_r+0x5c>
 80072c4:	4629      	mov	r1, r5
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff fc82 	bl	8006bd0 <__swsetup_r>
 80072cc:	b170      	cbz	r0, 80072ec <_vfiprintf_r+0x5c>
 80072ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072d0:	07dc      	lsls	r4, r3, #31
 80072d2:	d504      	bpl.n	80072de <_vfiprintf_r+0x4e>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	b01d      	add	sp, #116	@ 0x74
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	89ab      	ldrh	r3, [r5, #12]
 80072e0:	0598      	lsls	r0, r3, #22
 80072e2:	d4f7      	bmi.n	80072d4 <_vfiprintf_r+0x44>
 80072e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072e6:	f7ff fd57 	bl	8006d98 <__retarget_lock_release_recursive>
 80072ea:	e7f3      	b.n	80072d4 <_vfiprintf_r+0x44>
 80072ec:	2300      	movs	r3, #0
 80072ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f2:	f04f 0901 	mov.w	r9, #1
 80072f6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80074ac <_vfiprintf_r+0x21c>
 80072fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80072fc:	2320      	movs	r3, #32
 80072fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007302:	2330      	movs	r3, #48	@ 0x30
 8007304:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007308:	4623      	mov	r3, r4
 800730a:	469a      	mov	sl, r3
 800730c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007310:	b10a      	cbz	r2, 8007316 <_vfiprintf_r+0x86>
 8007312:	2a25      	cmp	r2, #37	@ 0x25
 8007314:	d1f9      	bne.n	800730a <_vfiprintf_r+0x7a>
 8007316:	ebba 0b04 	subs.w	fp, sl, r4
 800731a:	d00b      	beq.n	8007334 <_vfiprintf_r+0xa4>
 800731c:	465b      	mov	r3, fp
 800731e:	4622      	mov	r2, r4
 8007320:	4629      	mov	r1, r5
 8007322:	4630      	mov	r0, r6
 8007324:	f7ff ffa1 	bl	800726a <__sfputs_r>
 8007328:	3001      	adds	r0, #1
 800732a:	f000 80a7 	beq.w	800747c <_vfiprintf_r+0x1ec>
 800732e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007330:	445a      	add	r2, fp
 8007332:	9209      	str	r2, [sp, #36]	@ 0x24
 8007334:	f89a 3000 	ldrb.w	r3, [sl]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 809f 	beq.w	800747c <_vfiprintf_r+0x1ec>
 800733e:	2300      	movs	r3, #0
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	f10a 0a01 	add.w	sl, sl, #1
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	9307      	str	r3, [sp, #28]
 800734c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007350:	931a      	str	r3, [sp, #104]	@ 0x68
 8007352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007356:	4654      	mov	r4, sl
 8007358:	2205      	movs	r2, #5
 800735a:	4854      	ldr	r0, [pc, #336]	@ (80074ac <_vfiprintf_r+0x21c>)
 800735c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007360:	f000 fb9a 	bl	8007a98 <memchr>
 8007364:	9a04      	ldr	r2, [sp, #16]
 8007366:	b9d8      	cbnz	r0, 80073a0 <_vfiprintf_r+0x110>
 8007368:	06d1      	lsls	r1, r2, #27
 800736a:	bf44      	itt	mi
 800736c:	2320      	movmi	r3, #32
 800736e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007372:	0713      	lsls	r3, r2, #28
 8007374:	bf44      	itt	mi
 8007376:	232b      	movmi	r3, #43	@ 0x2b
 8007378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800737c:	f89a 3000 	ldrb.w	r3, [sl]
 8007380:	2b2a      	cmp	r3, #42	@ 0x2a
 8007382:	d015      	beq.n	80073b0 <_vfiprintf_r+0x120>
 8007384:	9a07      	ldr	r2, [sp, #28]
 8007386:	4654      	mov	r4, sl
 8007388:	2000      	movs	r0, #0
 800738a:	f04f 0c0a 	mov.w	ip, #10
 800738e:	4621      	mov	r1, r4
 8007390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007394:	3b30      	subs	r3, #48	@ 0x30
 8007396:	2b09      	cmp	r3, #9
 8007398:	d94b      	bls.n	8007432 <_vfiprintf_r+0x1a2>
 800739a:	b1b0      	cbz	r0, 80073ca <_vfiprintf_r+0x13a>
 800739c:	9207      	str	r2, [sp, #28]
 800739e:	e014      	b.n	80073ca <_vfiprintf_r+0x13a>
 80073a0:	eba0 0308 	sub.w	r3, r0, r8
 80073a4:	46a2      	mov	sl, r4
 80073a6:	fa09 f303 	lsl.w	r3, r9, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	e7d2      	b.n	8007356 <_vfiprintf_r+0xc6>
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	1d19      	adds	r1, r3, #4
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	9103      	str	r1, [sp, #12]
 80073ba:	bfbb      	ittet	lt
 80073bc:	425b      	neglt	r3, r3
 80073be:	f042 0202 	orrlt.w	r2, r2, #2
 80073c2:	9307      	strge	r3, [sp, #28]
 80073c4:	9307      	strlt	r3, [sp, #28]
 80073c6:	bfb8      	it	lt
 80073c8:	9204      	strlt	r2, [sp, #16]
 80073ca:	7823      	ldrb	r3, [r4, #0]
 80073cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80073ce:	d10a      	bne.n	80073e6 <_vfiprintf_r+0x156>
 80073d0:	7863      	ldrb	r3, [r4, #1]
 80073d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80073d4:	d132      	bne.n	800743c <_vfiprintf_r+0x1ac>
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	3402      	adds	r4, #2
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073e2:	9203      	str	r2, [sp, #12]
 80073e4:	9305      	str	r3, [sp, #20]
 80073e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074bc <_vfiprintf_r+0x22c>
 80073ea:	2203      	movs	r2, #3
 80073ec:	7821      	ldrb	r1, [r4, #0]
 80073ee:	4650      	mov	r0, sl
 80073f0:	f000 fb52 	bl	8007a98 <memchr>
 80073f4:	b138      	cbz	r0, 8007406 <_vfiprintf_r+0x176>
 80073f6:	eba0 000a 	sub.w	r0, r0, sl
 80073fa:	2240      	movs	r2, #64	@ 0x40
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	3401      	adds	r4, #1
 8007400:	4082      	lsls	r2, r0
 8007402:	4313      	orrs	r3, r2
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740a:	2206      	movs	r2, #6
 800740c:	4828      	ldr	r0, [pc, #160]	@ (80074b0 <_vfiprintf_r+0x220>)
 800740e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007412:	f000 fb41 	bl	8007a98 <memchr>
 8007416:	2800      	cmp	r0, #0
 8007418:	d03f      	beq.n	800749a <_vfiprintf_r+0x20a>
 800741a:	4b26      	ldr	r3, [pc, #152]	@ (80074b4 <_vfiprintf_r+0x224>)
 800741c:	bb1b      	cbnz	r3, 8007466 <_vfiprintf_r+0x1d6>
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	3307      	adds	r3, #7
 8007422:	f023 0307 	bic.w	r3, r3, #7
 8007426:	3308      	adds	r3, #8
 8007428:	9303      	str	r3, [sp, #12]
 800742a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742c:	443b      	add	r3, r7
 800742e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007430:	e76a      	b.n	8007308 <_vfiprintf_r+0x78>
 8007432:	fb0c 3202 	mla	r2, ip, r2, r3
 8007436:	460c      	mov	r4, r1
 8007438:	2001      	movs	r0, #1
 800743a:	e7a8      	b.n	800738e <_vfiprintf_r+0xfe>
 800743c:	2300      	movs	r3, #0
 800743e:	3401      	adds	r4, #1
 8007440:	f04f 0c0a 	mov.w	ip, #10
 8007444:	4619      	mov	r1, r3
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	4620      	mov	r0, r4
 800744a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800744e:	3a30      	subs	r2, #48	@ 0x30
 8007450:	2a09      	cmp	r2, #9
 8007452:	d903      	bls.n	800745c <_vfiprintf_r+0x1cc>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0c6      	beq.n	80073e6 <_vfiprintf_r+0x156>
 8007458:	9105      	str	r1, [sp, #20]
 800745a:	e7c4      	b.n	80073e6 <_vfiprintf_r+0x156>
 800745c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007460:	4604      	mov	r4, r0
 8007462:	2301      	movs	r3, #1
 8007464:	e7f0      	b.n	8007448 <_vfiprintf_r+0x1b8>
 8007466:	ab03      	add	r3, sp, #12
 8007468:	462a      	mov	r2, r5
 800746a:	a904      	add	r1, sp, #16
 800746c:	4630      	mov	r0, r6
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	4b11      	ldr	r3, [pc, #68]	@ (80074b8 <_vfiprintf_r+0x228>)
 8007472:	f3af 8000 	nop.w
 8007476:	4607      	mov	r7, r0
 8007478:	1c78      	adds	r0, r7, #1
 800747a:	d1d6      	bne.n	800742a <_vfiprintf_r+0x19a>
 800747c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800747e:	07d9      	lsls	r1, r3, #31
 8007480:	d405      	bmi.n	800748e <_vfiprintf_r+0x1fe>
 8007482:	89ab      	ldrh	r3, [r5, #12]
 8007484:	059a      	lsls	r2, r3, #22
 8007486:	d402      	bmi.n	800748e <_vfiprintf_r+0x1fe>
 8007488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800748a:	f7ff fc85 	bl	8006d98 <__retarget_lock_release_recursive>
 800748e:	89ab      	ldrh	r3, [r5, #12]
 8007490:	065b      	lsls	r3, r3, #25
 8007492:	f53f af1f 	bmi.w	80072d4 <_vfiprintf_r+0x44>
 8007496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007498:	e71e      	b.n	80072d8 <_vfiprintf_r+0x48>
 800749a:	ab03      	add	r3, sp, #12
 800749c:	462a      	mov	r2, r5
 800749e:	a904      	add	r1, sp, #16
 80074a0:	4630      	mov	r0, r6
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	4b04      	ldr	r3, [pc, #16]	@ (80074b8 <_vfiprintf_r+0x228>)
 80074a6:	f000 f87d 	bl	80075a4 <_printf_i>
 80074aa:	e7e4      	b.n	8007476 <_vfiprintf_r+0x1e6>
 80074ac:	080087ac 	.word	0x080087ac
 80074b0:	080087b6 	.word	0x080087b6
 80074b4:	00000000 	.word	0x00000000
 80074b8:	0800726b 	.word	0x0800726b
 80074bc:	080087b2 	.word	0x080087b2

080074c0 <_printf_common>:
 80074c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c4:	4616      	mov	r6, r2
 80074c6:	4698      	mov	r8, r3
 80074c8:	688a      	ldr	r2, [r1, #8]
 80074ca:	4607      	mov	r7, r0
 80074cc:	690b      	ldr	r3, [r1, #16]
 80074ce:	460c      	mov	r4, r1
 80074d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074d4:	4293      	cmp	r3, r2
 80074d6:	bfb8      	it	lt
 80074d8:	4613      	movlt	r3, r2
 80074da:	6033      	str	r3, [r6, #0]
 80074dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074e0:	b10a      	cbz	r2, 80074e6 <_printf_common+0x26>
 80074e2:	3301      	adds	r3, #1
 80074e4:	6033      	str	r3, [r6, #0]
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	0699      	lsls	r1, r3, #26
 80074ea:	bf42      	ittt	mi
 80074ec:	6833      	ldrmi	r3, [r6, #0]
 80074ee:	3302      	addmi	r3, #2
 80074f0:	6033      	strmi	r3, [r6, #0]
 80074f2:	6825      	ldr	r5, [r4, #0]
 80074f4:	f015 0506 	ands.w	r5, r5, #6
 80074f8:	d106      	bne.n	8007508 <_printf_common+0x48>
 80074fa:	f104 0a19 	add.w	sl, r4, #25
 80074fe:	68e3      	ldr	r3, [r4, #12]
 8007500:	6832      	ldr	r2, [r6, #0]
 8007502:	1a9b      	subs	r3, r3, r2
 8007504:	42ab      	cmp	r3, r5
 8007506:	dc2b      	bgt.n	8007560 <_printf_common+0xa0>
 8007508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	3b00      	subs	r3, #0
 8007510:	bf18      	it	ne
 8007512:	2301      	movne	r3, #1
 8007514:	0692      	lsls	r2, r2, #26
 8007516:	d430      	bmi.n	800757a <_printf_common+0xba>
 8007518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800751c:	4641      	mov	r1, r8
 800751e:	4638      	mov	r0, r7
 8007520:	47c8      	blx	r9
 8007522:	3001      	adds	r0, #1
 8007524:	d023      	beq.n	800756e <_printf_common+0xae>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	341a      	adds	r4, #26
 800752a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800752e:	f003 0306 	and.w	r3, r3, #6
 8007532:	2b04      	cmp	r3, #4
 8007534:	bf0a      	itet	eq
 8007536:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800753a:	2500      	movne	r5, #0
 800753c:	6833      	ldreq	r3, [r6, #0]
 800753e:	f04f 0600 	mov.w	r6, #0
 8007542:	bf08      	it	eq
 8007544:	1aed      	subeq	r5, r5, r3
 8007546:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800754a:	bf08      	it	eq
 800754c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007550:	4293      	cmp	r3, r2
 8007552:	bfc4      	itt	gt
 8007554:	1a9b      	subgt	r3, r3, r2
 8007556:	18ed      	addgt	r5, r5, r3
 8007558:	42b5      	cmp	r5, r6
 800755a:	d11a      	bne.n	8007592 <_printf_common+0xd2>
 800755c:	2000      	movs	r0, #0
 800755e:	e008      	b.n	8007572 <_printf_common+0xb2>
 8007560:	2301      	movs	r3, #1
 8007562:	4652      	mov	r2, sl
 8007564:	4641      	mov	r1, r8
 8007566:	4638      	mov	r0, r7
 8007568:	47c8      	blx	r9
 800756a:	3001      	adds	r0, #1
 800756c:	d103      	bne.n	8007576 <_printf_common+0xb6>
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007576:	3501      	adds	r5, #1
 8007578:	e7c1      	b.n	80074fe <_printf_common+0x3e>
 800757a:	18e1      	adds	r1, r4, r3
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	2030      	movs	r0, #48	@ 0x30
 8007580:	3302      	adds	r3, #2
 8007582:	4422      	add	r2, r4
 8007584:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800758c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007590:	e7c2      	b.n	8007518 <_printf_common+0x58>
 8007592:	2301      	movs	r3, #1
 8007594:	4622      	mov	r2, r4
 8007596:	4641      	mov	r1, r8
 8007598:	4638      	mov	r0, r7
 800759a:	47c8      	blx	r9
 800759c:	3001      	adds	r0, #1
 800759e:	d0e6      	beq.n	800756e <_printf_common+0xae>
 80075a0:	3601      	adds	r6, #1
 80075a2:	e7d9      	b.n	8007558 <_printf_common+0x98>

080075a4 <_printf_i>:
 80075a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	7e0f      	ldrb	r7, [r1, #24]
 80075aa:	4691      	mov	r9, r2
 80075ac:	4680      	mov	r8, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	2f78      	cmp	r7, #120	@ 0x78
 80075b2:	469a      	mov	sl, r3
 80075b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075ba:	d807      	bhi.n	80075cc <_printf_i+0x28>
 80075bc:	2f62      	cmp	r7, #98	@ 0x62
 80075be:	d80a      	bhi.n	80075d6 <_printf_i+0x32>
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	f000 80d2 	beq.w	800776a <_printf_i+0x1c6>
 80075c6:	2f58      	cmp	r7, #88	@ 0x58
 80075c8:	f000 80b9 	beq.w	800773e <_printf_i+0x19a>
 80075cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075d4:	e03a      	b.n	800764c <_printf_i+0xa8>
 80075d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075da:	2b15      	cmp	r3, #21
 80075dc:	d8f6      	bhi.n	80075cc <_printf_i+0x28>
 80075de:	a101      	add	r1, pc, #4	@ (adr r1, 80075e4 <_printf_i+0x40>)
 80075e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	08007651 	.word	0x08007651
 80075ec:	080075cd 	.word	0x080075cd
 80075f0:	080075cd 	.word	0x080075cd
 80075f4:	080075cd 	.word	0x080075cd
 80075f8:	080075cd 	.word	0x080075cd
 80075fc:	08007651 	.word	0x08007651
 8007600:	080075cd 	.word	0x080075cd
 8007604:	080075cd 	.word	0x080075cd
 8007608:	080075cd 	.word	0x080075cd
 800760c:	080075cd 	.word	0x080075cd
 8007610:	08007751 	.word	0x08007751
 8007614:	0800767b 	.word	0x0800767b
 8007618:	0800770b 	.word	0x0800770b
 800761c:	080075cd 	.word	0x080075cd
 8007620:	080075cd 	.word	0x080075cd
 8007624:	08007773 	.word	0x08007773
 8007628:	080075cd 	.word	0x080075cd
 800762c:	0800767b 	.word	0x0800767b
 8007630:	080075cd 	.word	0x080075cd
 8007634:	080075cd 	.word	0x080075cd
 8007638:	08007713 	.word	0x08007713
 800763c:	6833      	ldr	r3, [r6, #0]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6032      	str	r2, [r6, #0]
 8007644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007648:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800764c:	2301      	movs	r3, #1
 800764e:	e09d      	b.n	800778c <_printf_i+0x1e8>
 8007650:	6833      	ldr	r3, [r6, #0]
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	1d19      	adds	r1, r3, #4
 8007656:	6031      	str	r1, [r6, #0]
 8007658:	0606      	lsls	r6, r0, #24
 800765a:	d501      	bpl.n	8007660 <_printf_i+0xbc>
 800765c:	681d      	ldr	r5, [r3, #0]
 800765e:	e003      	b.n	8007668 <_printf_i+0xc4>
 8007660:	0645      	lsls	r5, r0, #25
 8007662:	d5fb      	bpl.n	800765c <_printf_i+0xb8>
 8007664:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007668:	2d00      	cmp	r5, #0
 800766a:	da03      	bge.n	8007674 <_printf_i+0xd0>
 800766c:	232d      	movs	r3, #45	@ 0x2d
 800766e:	426d      	negs	r5, r5
 8007670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007674:	4859      	ldr	r0, [pc, #356]	@ (80077dc <_printf_i+0x238>)
 8007676:	230a      	movs	r3, #10
 8007678:	e011      	b.n	800769e <_printf_i+0xfa>
 800767a:	6821      	ldr	r1, [r4, #0]
 800767c:	6833      	ldr	r3, [r6, #0]
 800767e:	0608      	lsls	r0, r1, #24
 8007680:	f853 5b04 	ldr.w	r5, [r3], #4
 8007684:	d402      	bmi.n	800768c <_printf_i+0xe8>
 8007686:	0649      	lsls	r1, r1, #25
 8007688:	bf48      	it	mi
 800768a:	b2ad      	uxthmi	r5, r5
 800768c:	2f6f      	cmp	r7, #111	@ 0x6f
 800768e:	6033      	str	r3, [r6, #0]
 8007690:	4852      	ldr	r0, [pc, #328]	@ (80077dc <_printf_i+0x238>)
 8007692:	bf14      	ite	ne
 8007694:	230a      	movne	r3, #10
 8007696:	2308      	moveq	r3, #8
 8007698:	2100      	movs	r1, #0
 800769a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800769e:	6866      	ldr	r6, [r4, #4]
 80076a0:	2e00      	cmp	r6, #0
 80076a2:	60a6      	str	r6, [r4, #8]
 80076a4:	bfa2      	ittt	ge
 80076a6:	6821      	ldrge	r1, [r4, #0]
 80076a8:	f021 0104 	bicge.w	r1, r1, #4
 80076ac:	6021      	strge	r1, [r4, #0]
 80076ae:	b90d      	cbnz	r5, 80076b4 <_printf_i+0x110>
 80076b0:	2e00      	cmp	r6, #0
 80076b2:	d04b      	beq.n	800774c <_printf_i+0x1a8>
 80076b4:	4616      	mov	r6, r2
 80076b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80076ba:	fb03 5711 	mls	r7, r3, r1, r5
 80076be:	5dc7      	ldrb	r7, [r0, r7]
 80076c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076c4:	462f      	mov	r7, r5
 80076c6:	460d      	mov	r5, r1
 80076c8:	42bb      	cmp	r3, r7
 80076ca:	d9f4      	bls.n	80076b6 <_printf_i+0x112>
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d10b      	bne.n	80076e8 <_printf_i+0x144>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	07df      	lsls	r7, r3, #31
 80076d4:	d508      	bpl.n	80076e8 <_printf_i+0x144>
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	6861      	ldr	r1, [r4, #4]
 80076da:	4299      	cmp	r1, r3
 80076dc:	bfde      	ittt	le
 80076de:	2330      	movle	r3, #48	@ 0x30
 80076e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076e8:	1b92      	subs	r2, r2, r6
 80076ea:	6122      	str	r2, [r4, #16]
 80076ec:	464b      	mov	r3, r9
 80076ee:	aa03      	add	r2, sp, #12
 80076f0:	4621      	mov	r1, r4
 80076f2:	4640      	mov	r0, r8
 80076f4:	f8cd a000 	str.w	sl, [sp]
 80076f8:	f7ff fee2 	bl	80074c0 <_printf_common>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d14a      	bne.n	8007796 <_printf_i+0x1f2>
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	b004      	add	sp, #16
 8007706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	f043 0320 	orr.w	r3, r3, #32
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	2778      	movs	r7, #120	@ 0x78
 8007714:	4832      	ldr	r0, [pc, #200]	@ (80077e0 <_printf_i+0x23c>)
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800771c:	061f      	lsls	r7, r3, #24
 800771e:	6831      	ldr	r1, [r6, #0]
 8007720:	f851 5b04 	ldr.w	r5, [r1], #4
 8007724:	d402      	bmi.n	800772c <_printf_i+0x188>
 8007726:	065f      	lsls	r7, r3, #25
 8007728:	bf48      	it	mi
 800772a:	b2ad      	uxthmi	r5, r5
 800772c:	6031      	str	r1, [r6, #0]
 800772e:	07d9      	lsls	r1, r3, #31
 8007730:	bf44      	itt	mi
 8007732:	f043 0320 	orrmi.w	r3, r3, #32
 8007736:	6023      	strmi	r3, [r4, #0]
 8007738:	b11d      	cbz	r5, 8007742 <_printf_i+0x19e>
 800773a:	2310      	movs	r3, #16
 800773c:	e7ac      	b.n	8007698 <_printf_i+0xf4>
 800773e:	4827      	ldr	r0, [pc, #156]	@ (80077dc <_printf_i+0x238>)
 8007740:	e7e9      	b.n	8007716 <_printf_i+0x172>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	f023 0320 	bic.w	r3, r3, #32
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	e7f6      	b.n	800773a <_printf_i+0x196>
 800774c:	4616      	mov	r6, r2
 800774e:	e7bd      	b.n	80076cc <_printf_i+0x128>
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	6825      	ldr	r5, [r4, #0]
 8007754:	1d18      	adds	r0, r3, #4
 8007756:	6961      	ldr	r1, [r4, #20]
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	062e      	lsls	r6, r5, #24
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	d501      	bpl.n	8007764 <_printf_i+0x1c0>
 8007760:	6019      	str	r1, [r3, #0]
 8007762:	e002      	b.n	800776a <_printf_i+0x1c6>
 8007764:	0668      	lsls	r0, r5, #25
 8007766:	d5fb      	bpl.n	8007760 <_printf_i+0x1bc>
 8007768:	8019      	strh	r1, [r3, #0]
 800776a:	2300      	movs	r3, #0
 800776c:	4616      	mov	r6, r2
 800776e:	6123      	str	r3, [r4, #16]
 8007770:	e7bc      	b.n	80076ec <_printf_i+0x148>
 8007772:	6833      	ldr	r3, [r6, #0]
 8007774:	2100      	movs	r1, #0
 8007776:	1d1a      	adds	r2, r3, #4
 8007778:	6032      	str	r2, [r6, #0]
 800777a:	681e      	ldr	r6, [r3, #0]
 800777c:	6862      	ldr	r2, [r4, #4]
 800777e:	4630      	mov	r0, r6
 8007780:	f000 f98a 	bl	8007a98 <memchr>
 8007784:	b108      	cbz	r0, 800778a <_printf_i+0x1e6>
 8007786:	1b80      	subs	r0, r0, r6
 8007788:	6060      	str	r0, [r4, #4]
 800778a:	6863      	ldr	r3, [r4, #4]
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	2300      	movs	r3, #0
 8007790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007794:	e7aa      	b.n	80076ec <_printf_i+0x148>
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	4632      	mov	r2, r6
 800779a:	4649      	mov	r1, r9
 800779c:	4640      	mov	r0, r8
 800779e:	47d0      	blx	sl
 80077a0:	3001      	adds	r0, #1
 80077a2:	d0ad      	beq.n	8007700 <_printf_i+0x15c>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	079b      	lsls	r3, r3, #30
 80077a8:	d413      	bmi.n	80077d2 <_printf_i+0x22e>
 80077aa:	68e0      	ldr	r0, [r4, #12]
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	4298      	cmp	r0, r3
 80077b0:	bfb8      	it	lt
 80077b2:	4618      	movlt	r0, r3
 80077b4:	e7a6      	b.n	8007704 <_printf_i+0x160>
 80077b6:	2301      	movs	r3, #1
 80077b8:	4632      	mov	r2, r6
 80077ba:	4649      	mov	r1, r9
 80077bc:	4640      	mov	r0, r8
 80077be:	47d0      	blx	sl
 80077c0:	3001      	adds	r0, #1
 80077c2:	d09d      	beq.n	8007700 <_printf_i+0x15c>
 80077c4:	3501      	adds	r5, #1
 80077c6:	68e3      	ldr	r3, [r4, #12]
 80077c8:	9903      	ldr	r1, [sp, #12]
 80077ca:	1a5b      	subs	r3, r3, r1
 80077cc:	42ab      	cmp	r3, r5
 80077ce:	dcf2      	bgt.n	80077b6 <_printf_i+0x212>
 80077d0:	e7eb      	b.n	80077aa <_printf_i+0x206>
 80077d2:	2500      	movs	r5, #0
 80077d4:	f104 0619 	add.w	r6, r4, #25
 80077d8:	e7f5      	b.n	80077c6 <_printf_i+0x222>
 80077da:	bf00      	nop
 80077dc:	080087bd 	.word	0x080087bd
 80077e0:	080087ce 	.word	0x080087ce

080077e4 <__sflush_r>:
 80077e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ec:	0716      	lsls	r6, r2, #28
 80077ee:	4605      	mov	r5, r0
 80077f0:	460c      	mov	r4, r1
 80077f2:	d454      	bmi.n	800789e <__sflush_r+0xba>
 80077f4:	684b      	ldr	r3, [r1, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dc02      	bgt.n	8007800 <__sflush_r+0x1c>
 80077fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dd48      	ble.n	8007892 <__sflush_r+0xae>
 8007800:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007802:	2e00      	cmp	r6, #0
 8007804:	d045      	beq.n	8007892 <__sflush_r+0xae>
 8007806:	2300      	movs	r3, #0
 8007808:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800780c:	682f      	ldr	r7, [r5, #0]
 800780e:	6a21      	ldr	r1, [r4, #32]
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	d030      	beq.n	8007876 <__sflush_r+0x92>
 8007814:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	0759      	lsls	r1, r3, #29
 800781a:	d505      	bpl.n	8007828 <__sflush_r+0x44>
 800781c:	6863      	ldr	r3, [r4, #4]
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007822:	b10b      	cbz	r3, 8007828 <__sflush_r+0x44>
 8007824:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007826:	1ad2      	subs	r2, r2, r3
 8007828:	2300      	movs	r3, #0
 800782a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800782c:	6a21      	ldr	r1, [r4, #32]
 800782e:	4628      	mov	r0, r5
 8007830:	47b0      	blx	r6
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	d106      	bne.n	8007846 <__sflush_r+0x62>
 8007838:	6829      	ldr	r1, [r5, #0]
 800783a:	291d      	cmp	r1, #29
 800783c:	d82b      	bhi.n	8007896 <__sflush_r+0xb2>
 800783e:	4a2a      	ldr	r2, [pc, #168]	@ (80078e8 <__sflush_r+0x104>)
 8007840:	410a      	asrs	r2, r1
 8007842:	07d6      	lsls	r6, r2, #31
 8007844:	d427      	bmi.n	8007896 <__sflush_r+0xb2>
 8007846:	2200      	movs	r2, #0
 8007848:	04d9      	lsls	r1, r3, #19
 800784a:	6062      	str	r2, [r4, #4]
 800784c:	6922      	ldr	r2, [r4, #16]
 800784e:	6022      	str	r2, [r4, #0]
 8007850:	d504      	bpl.n	800785c <__sflush_r+0x78>
 8007852:	1c42      	adds	r2, r0, #1
 8007854:	d101      	bne.n	800785a <__sflush_r+0x76>
 8007856:	682b      	ldr	r3, [r5, #0]
 8007858:	b903      	cbnz	r3, 800785c <__sflush_r+0x78>
 800785a:	6560      	str	r0, [r4, #84]	@ 0x54
 800785c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800785e:	602f      	str	r7, [r5, #0]
 8007860:	b1b9      	cbz	r1, 8007892 <__sflush_r+0xae>
 8007862:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007866:	4299      	cmp	r1, r3
 8007868:	d002      	beq.n	8007870 <__sflush_r+0x8c>
 800786a:	4628      	mov	r0, r5
 800786c:	f7ff fa96 	bl	8006d9c <_free_r>
 8007870:	2300      	movs	r3, #0
 8007872:	6363      	str	r3, [r4, #52]	@ 0x34
 8007874:	e00d      	b.n	8007892 <__sflush_r+0xae>
 8007876:	2301      	movs	r3, #1
 8007878:	4628      	mov	r0, r5
 800787a:	47b0      	blx	r6
 800787c:	4602      	mov	r2, r0
 800787e:	1c50      	adds	r0, r2, #1
 8007880:	d1c9      	bne.n	8007816 <__sflush_r+0x32>
 8007882:	682b      	ldr	r3, [r5, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0c6      	beq.n	8007816 <__sflush_r+0x32>
 8007888:	2b1d      	cmp	r3, #29
 800788a:	d001      	beq.n	8007890 <__sflush_r+0xac>
 800788c:	2b16      	cmp	r3, #22
 800788e:	d11d      	bne.n	80078cc <__sflush_r+0xe8>
 8007890:	602f      	str	r7, [r5, #0]
 8007892:	2000      	movs	r0, #0
 8007894:	e021      	b.n	80078da <__sflush_r+0xf6>
 8007896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800789a:	b21b      	sxth	r3, r3
 800789c:	e01a      	b.n	80078d4 <__sflush_r+0xf0>
 800789e:	690f      	ldr	r7, [r1, #16]
 80078a0:	2f00      	cmp	r7, #0
 80078a2:	d0f6      	beq.n	8007892 <__sflush_r+0xae>
 80078a4:	0793      	lsls	r3, r2, #30
 80078a6:	680e      	ldr	r6, [r1, #0]
 80078a8:	600f      	str	r7, [r1, #0]
 80078aa:	bf0c      	ite	eq
 80078ac:	694b      	ldreq	r3, [r1, #20]
 80078ae:	2300      	movne	r3, #0
 80078b0:	eba6 0807 	sub.w	r8, r6, r7
 80078b4:	608b      	str	r3, [r1, #8]
 80078b6:	f1b8 0f00 	cmp.w	r8, #0
 80078ba:	ddea      	ble.n	8007892 <__sflush_r+0xae>
 80078bc:	4643      	mov	r3, r8
 80078be:	463a      	mov	r2, r7
 80078c0:	6a21      	ldr	r1, [r4, #32]
 80078c2:	4628      	mov	r0, r5
 80078c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078c6:	47b0      	blx	r6
 80078c8:	2800      	cmp	r0, #0
 80078ca:	dc08      	bgt.n	80078de <__sflush_r+0xfa>
 80078cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078de:	4407      	add	r7, r0
 80078e0:	eba8 0800 	sub.w	r8, r8, r0
 80078e4:	e7e7      	b.n	80078b6 <__sflush_r+0xd2>
 80078e6:	bf00      	nop
 80078e8:	dfbffffe 	.word	0xdfbffffe

080078ec <_fflush_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	690b      	ldr	r3, [r1, #16]
 80078f0:	4605      	mov	r5, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	b913      	cbnz	r3, 80078fc <_fflush_r+0x10>
 80078f6:	2500      	movs	r5, #0
 80078f8:	4628      	mov	r0, r5
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	b118      	cbz	r0, 8007906 <_fflush_r+0x1a>
 80078fe:	6a03      	ldr	r3, [r0, #32]
 8007900:	b90b      	cbnz	r3, 8007906 <_fflush_r+0x1a>
 8007902:	f7ff f81d 	bl	8006940 <__sinit>
 8007906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f3      	beq.n	80078f6 <_fflush_r+0xa>
 800790e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007910:	07d0      	lsls	r0, r2, #31
 8007912:	d404      	bmi.n	800791e <_fflush_r+0x32>
 8007914:	0599      	lsls	r1, r3, #22
 8007916:	d402      	bmi.n	800791e <_fflush_r+0x32>
 8007918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800791a:	f7ff fa3c 	bl	8006d96 <__retarget_lock_acquire_recursive>
 800791e:	4628      	mov	r0, r5
 8007920:	4621      	mov	r1, r4
 8007922:	f7ff ff5f 	bl	80077e4 <__sflush_r>
 8007926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007928:	4605      	mov	r5, r0
 800792a:	07da      	lsls	r2, r3, #31
 800792c:	d4e4      	bmi.n	80078f8 <_fflush_r+0xc>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	059b      	lsls	r3, r3, #22
 8007932:	d4e1      	bmi.n	80078f8 <_fflush_r+0xc>
 8007934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007936:	f7ff fa2f 	bl	8006d98 <__retarget_lock_release_recursive>
 800793a:	e7dd      	b.n	80078f8 <_fflush_r+0xc>

0800793c <__swhatbuf_r>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	460c      	mov	r4, r1
 8007940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007944:	b096      	sub	sp, #88	@ 0x58
 8007946:	4615      	mov	r5, r2
 8007948:	2900      	cmp	r1, #0
 800794a:	461e      	mov	r6, r3
 800794c:	da0c      	bge.n	8007968 <__swhatbuf_r+0x2c>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	2100      	movs	r1, #0
 8007952:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007956:	bf14      	ite	ne
 8007958:	2340      	movne	r3, #64	@ 0x40
 800795a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800795e:	2000      	movs	r0, #0
 8007960:	6031      	str	r1, [r6, #0]
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	b016      	add	sp, #88	@ 0x58
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	466a      	mov	r2, sp
 800796a:	f000 f863 	bl	8007a34 <_fstat_r>
 800796e:	2800      	cmp	r0, #0
 8007970:	dbed      	blt.n	800794e <__swhatbuf_r+0x12>
 8007972:	9901      	ldr	r1, [sp, #4]
 8007974:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007978:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800797c:	4259      	negs	r1, r3
 800797e:	4159      	adcs	r1, r3
 8007980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007984:	e7eb      	b.n	800795e <__swhatbuf_r+0x22>

08007986 <__smakebuf_r>:
 8007986:	898b      	ldrh	r3, [r1, #12]
 8007988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800798a:	079d      	lsls	r5, r3, #30
 800798c:	4606      	mov	r6, r0
 800798e:	460c      	mov	r4, r1
 8007990:	d507      	bpl.n	80079a2 <__smakebuf_r+0x1c>
 8007992:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	6123      	str	r3, [r4, #16]
 800799a:	2301      	movs	r3, #1
 800799c:	6163      	str	r3, [r4, #20]
 800799e:	b003      	add	sp, #12
 80079a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a2:	ab01      	add	r3, sp, #4
 80079a4:	466a      	mov	r2, sp
 80079a6:	f7ff ffc9 	bl	800793c <__swhatbuf_r>
 80079aa:	9f00      	ldr	r7, [sp, #0]
 80079ac:	4605      	mov	r5, r0
 80079ae:	4630      	mov	r0, r6
 80079b0:	4639      	mov	r1, r7
 80079b2:	f7ff fa5f 	bl	8006e74 <_malloc_r>
 80079b6:	b948      	cbnz	r0, 80079cc <__smakebuf_r+0x46>
 80079b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079bc:	059a      	lsls	r2, r3, #22
 80079be:	d4ee      	bmi.n	800799e <__smakebuf_r+0x18>
 80079c0:	f023 0303 	bic.w	r3, r3, #3
 80079c4:	f043 0302 	orr.w	r3, r3, #2
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	e7e2      	b.n	8007992 <__smakebuf_r+0xc>
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	6020      	str	r0, [r4, #0]
 80079d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079dc:	b15b      	cbz	r3, 80079f6 <__smakebuf_r+0x70>
 80079de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 f838 	bl	8007a58 <_isatty_r>
 80079e8:	b128      	cbz	r0, 80079f6 <__smakebuf_r+0x70>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f023 0303 	bic.w	r3, r3, #3
 80079f0:	f043 0301 	orr.w	r3, r3, #1
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	431d      	orrs	r5, r3
 80079fa:	81a5      	strh	r5, [r4, #12]
 80079fc:	e7cf      	b.n	800799e <__smakebuf_r+0x18>

080079fe <memmove>:
 80079fe:	4288      	cmp	r0, r1
 8007a00:	b510      	push	{r4, lr}
 8007a02:	eb01 0402 	add.w	r4, r1, r2
 8007a06:	d902      	bls.n	8007a0e <memmove+0x10>
 8007a08:	4284      	cmp	r4, r0
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	d807      	bhi.n	8007a1e <memmove+0x20>
 8007a0e:	1e43      	subs	r3, r0, #1
 8007a10:	42a1      	cmp	r1, r4
 8007a12:	d008      	beq.n	8007a26 <memmove+0x28>
 8007a14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a18:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a1c:	e7f8      	b.n	8007a10 <memmove+0x12>
 8007a1e:	4402      	add	r2, r0
 8007a20:	4601      	mov	r1, r0
 8007a22:	428a      	cmp	r2, r1
 8007a24:	d100      	bne.n	8007a28 <memmove+0x2a>
 8007a26:	bd10      	pop	{r4, pc}
 8007a28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a30:	e7f7      	b.n	8007a22 <memmove+0x24>
	...

08007a34 <_fstat_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	2300      	movs	r3, #0
 8007a38:	4d06      	ldr	r5, [pc, #24]	@ (8007a54 <_fstat_r+0x20>)
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	f7f9 fdcc 	bl	80015de <_fstat>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d102      	bne.n	8007a50 <_fstat_r+0x1c>
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	b103      	cbz	r3, 8007a50 <_fstat_r+0x1c>
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	bf00      	nop
 8007a54:	200004d0 	.word	0x200004d0

08007a58 <_isatty_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4d05      	ldr	r5, [pc, #20]	@ (8007a74 <_isatty_r+0x1c>)
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4608      	mov	r0, r1
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	f7f9 fdcb 	bl	80015fe <_isatty>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d102      	bne.n	8007a72 <_isatty_r+0x1a>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b103      	cbz	r3, 8007a72 <_isatty_r+0x1a>
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	200004d0 	.word	0x200004d0

08007a78 <_sbrk_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4d05      	ldr	r5, [pc, #20]	@ (8007a94 <_sbrk_r+0x1c>)
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	602b      	str	r3, [r5, #0]
 8007a84:	f7f9 fdd4 	bl	8001630 <_sbrk>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_sbrk_r+0x1a>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_sbrk_r+0x1a>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	200004d0 	.word	0x200004d0

08007a98 <memchr>:
 8007a98:	b2c9      	uxtb	r1, r1
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4402      	add	r2, r0
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	d101      	bne.n	8007aaa <memchr+0x12>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e003      	b.n	8007ab2 <memchr+0x1a>
 8007aaa:	7804      	ldrb	r4, [r0, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	428c      	cmp	r4, r1
 8007ab0:	d1f6      	bne.n	8007aa0 <memchr+0x8>
 8007ab2:	bd10      	pop	{r4, pc}

08007ab4 <memcpy>:
 8007ab4:	440a      	add	r2, r1
 8007ab6:	1e43      	subs	r3, r0, #1
 8007ab8:	4291      	cmp	r1, r2
 8007aba:	d100      	bne.n	8007abe <memcpy+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	b510      	push	{r4, lr}
 8007ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac4:	4291      	cmp	r1, r2
 8007ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aca:	d1f9      	bne.n	8007ac0 <memcpy+0xc>
 8007acc:	bd10      	pop	{r4, pc}

08007ace <_realloc_r>:
 8007ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	4615      	mov	r5, r2
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b921      	cbnz	r1, 8007ae4 <_realloc_r+0x16>
 8007ada:	4611      	mov	r1, r2
 8007adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	f7ff b9c8 	b.w	8006e74 <_malloc_r>
 8007ae4:	b92a      	cbnz	r2, 8007af2 <_realloc_r+0x24>
 8007ae6:	f7ff f959 	bl	8006d9c <_free_r>
 8007aea:	2400      	movs	r4, #0
 8007aec:	4620      	mov	r0, r4
 8007aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af2:	f000 f81a 	bl	8007b2a <_malloc_usable_size_r>
 8007af6:	4285      	cmp	r5, r0
 8007af8:	4606      	mov	r6, r0
 8007afa:	d802      	bhi.n	8007b02 <_realloc_r+0x34>
 8007afc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b00:	d8f4      	bhi.n	8007aec <_realloc_r+0x1e>
 8007b02:	4629      	mov	r1, r5
 8007b04:	4640      	mov	r0, r8
 8007b06:	f7ff f9b5 	bl	8006e74 <_malloc_r>
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d0ec      	beq.n	8007aea <_realloc_r+0x1c>
 8007b10:	42b5      	cmp	r5, r6
 8007b12:	462a      	mov	r2, r5
 8007b14:	4621      	mov	r1, r4
 8007b16:	bf28      	it	cs
 8007b18:	4632      	movcs	r2, r6
 8007b1a:	f7ff ffcb 	bl	8007ab4 <memcpy>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4640      	mov	r0, r8
 8007b22:	463c      	mov	r4, r7
 8007b24:	f7ff f93a 	bl	8006d9c <_free_r>
 8007b28:	e7e0      	b.n	8007aec <_realloc_r+0x1e>

08007b2a <_malloc_usable_size_r>:
 8007b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b2e:	1f18      	subs	r0, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bfbc      	itt	lt
 8007b34:	580b      	ldrlt	r3, [r1, r0]
 8007b36:	18c0      	addlt	r0, r0, r3
 8007b38:	4770      	bx	lr
	...

08007b3c <_init>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr

08007b48 <_fini>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr
